<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>域名 youmei.io 的由来</title>
      <link href="/2018/06/25/%E5%9F%9F%E5%90%8Dyoumei.io%E7%9A%84%E7%94%B1%E6%9D%A5/"/>
      <url>/2018/06/25/%E5%9F%9F%E5%90%8Dyoumei.io%E7%9A%84%E7%94%B1%E6%9D%A5/</url>
      <content type="html"><![CDATA[<p>对于入手【youmei.io】域名的原因，我是根据以下规则来的，当然最初不是这么想的，只是想要的域名都已经被注册了。。。</p><p>30字口诀：<br>小宝淘乐趣，大多优美妙。一五点微友，好天通万家。金易贝米人，快闪超聚帮。<br>小（小红书、小站教育）<br>宝（余额宝、驾考宝典）<br>淘（淘世界、蜜淘、淘汽档口）<br>乐（分期乐、乐流、乐动力）<br>趣（趣分期、我趣旅行）<br>大（大姨吗、大众点评、大智慧）<br>多（房多多、多盟、多看阅读）<br>优（优信拍、优酷土豆）<br>美（美团、美拍、美丽说、美图秀秀）<br>妙（奇妙清单、妙计旅行）<br>一（一个、一刻、一条、一席）<br>五（58到家、51talk）<br>点（养车点点、点名时间）<br>微（微信、微博、微在、微会）<br>友（友盟、友秘）<br>好（平安好房、好屋中国、好奇心日报）<br>天（天猫、天天果园、天天用车）<br>通（百度股市通、人脉通）<br>万（WIFI万能钥匙、十万个冷笑话）<br>家（汽车之家、河狸家）<br>金（金斧子、金数据）<br>易（网易、易车）<br>贝（贝贝、贝米）<br>米（小米、米聊）<br>人（人人、人人车）<br>快（快手、快的）<br>闪（闪电购、闪银）<br>超（超级课程表、超好玩）<br>聚（聚划算、聚美）<br>帮（阿姨帮、作业帮）<br>取名字总结有：10大“门派”<br>植物学派：蘑菇街、荔枝FM、土豆、IT桔子<br>动物学派：猿题库、功夫熊、小猪短租、小马购车、土巴兔、考拉FM、蜻蜓FM、企鹅吃喝指南、搜狗、搜狐<br>数字学派：51信用卡、58同城，59store<br>叠字学派：陌陌、探探、抱抱、人人、脉脉<br>字母学派：YY，QQ，JJ棋牌、KK唱响<br>拟声学派：滴滴、么么搜、嘟嘟美甲<br>实物学派：豆瓣、穿衣助手、饭本、觅食、团车、爱屋吉屋、药给力<br>创意学派：拉勾网、3W咖啡、托福Easy姐、喜马拉雅、黄油相机、面包旅行、雪球、斗鱼<br>国学学派：凤凰网、知乎、金箍棒、榫卯<br>洋气学派：UCloud，OneAPM，Keep，Fork，MONO，EMIE、NICE、IN、Face++<br>其他：<br>衍生学派：找钢网、找塑料、找叉叉<br>同业学派：易果生鲜、一米鲜、每日优鲜、爱鲜蜂<br>游戏学派：三国叉叉、萌叉叉、全民叉叉<br>取名字的关键有：3点friendly需要注意：<br>1.大脑记忆friendly：简而言之，容易记住。<br>2.输入法friendly：按音一次就能打出来，不会有生僻字。<br>3.搜索引擎friendly：搜索结果不会和一些常用或者热门词汇竞争。<br>案例：今日头条、周末去哪儿、学霸君<br>很好奇其他国家的互联网公司起名有什么规律~</p>]]></content>
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim常用命令总结</title>
      <link href="/2018/06/25/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2018/06/25/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>在命令状态下对当前行用== （连按=两次）, 或对多行用n==（n是自然数）表示自动缩进从当前行起的下面n行。你可以试试把代码缩进任意打乱再用n==排版，相当于一般IDE里的code format。使用gg=G可对整篇代码进行排版。<br>vim 选择文本，删除，复制，粘贴<br>文本的选择，对于编辑器来说，是很基本的东西，也经常被用到，总结如下：<br>v 从光标当前位置开始，光标所经过的地方会被选中，再按一下v结束。<br>V 从光标当前行开始，光标经过的行都会被选中，再按一下Ｖ结束。<br>Ctrl + v 从光标当前位置开始，选中光标起点和终点所构成的矩形区域，再按一下Ｃtrl + v结束。<br>ggVG 选中全部的文本， 其中gg为跳到行首，V选中整行，G末尾<br>选中后就可以用编辑命令对其进行编辑，如<br>d 删除<br>y 复制 （默认是复制到”寄存器）<br>p 粘贴 （默认从”寄存器取出内容粘贴）<br>“+y 复制到系统剪贴板(也就是vim的+寄存器）</p><h1 id="“-p-从系统剪贴板粘贴"><a href="/2018/06/25/vim常用命令总结/#“-p-从系统剪贴板粘贴" class="headerlink" title="“+p 从系统剪贴板粘贴"></a>“+p 从系统剪贴板粘贴</h1><p>vim命令总结<br>1.删除字符<br>要删除一个字符，只需要将光标移到该字符上按下”x”。<br>2.删除一行<br>删除一整行内容使用”dd”命令。删除后下面的行会移上来填补空缺。<br>3.删除换行符<br>在Vim中你可以把两行合并为一行，也就是说两行之间的换行符被删除了：命令是”J”。<br>4.撤销<br>如果你误删了过多的内容。显然你可以再输入一遍，但是命令”u” 更简便，它可以撤消上一次的操作。<br>5.重做<br>如果你撤消了多次，你还可以用CTRL-R(重做)来反转撤消的动作。换句话说，它是对撤消的撤消。撤消命令还有另一种形式，”U”命令，它一次撤消对一行的全部操作。第二次使用该命令则会撤消前一个”U”的操作。用”u”和CTRL-R你可以找回任何一个操作状态。<br>6.追加<br>“i”命令可以在当前光标之前插入文本。<br>“a”命令可以在当前光标之后插入文本。<br>“o”命令可以在当前行的下面另起一行，并使当前模式转为Insert模式。<br>“O”命令(注意是大写的字母O)将在当前行的上面另起一行。<br>7.使用命令计数<br>假设你要向上移动9行。这可以用”kkkkkkkkk”或”9k”来完成。事实上，很多命令都可以接受一个数字作为重复执行同一命令的次数。比如刚才的例子，要在行尾追加三个感叹号，当时用的命令是”a!!!”。另一个办法是用”3a!”命令。3说明该命令将被重复执行3次。同样，删除3个字符可以用”3x”。指定的数字要紧挨在它所要修饰的命令前面。<br>8.退出<br>要退出Vim，用命令”ZZ”。该命令保存当前文件并退出Vim。<br>9.放弃编辑<br>丢弃所有的修改并退出，用命令”:q!”。用”:e!”命令放弃所有修改并重新载入该文件的原始内容。<br>10.以Word为单位的移动<br>使用”w”命令可以将光标向前移动一个word的首字符上；比如”3w”将光标向前移动3个words。”b”命令则将光标向后移动到前一个word的首字符上。<br>“e”命令会将光标移动到下一个word的最后一个字符。命令”ge”，它将光标移动到前一个word的最后一个字符上。、<br>11.移动到行首或行尾<br>“$”命令将光标移动到当前行行尾。如果你的键盘上有一个键，它的作用也一样。”^”命令将光标移动到当前行的第一个非空白字符上。”0”命令则总是把光标移动到当前行的第一个字符上。键也是如此。”$”命令还可接受一个计数，如”1$”会将光标移动到当前行行尾，”2$”则会移动到下一行的行尾，如此类推。”0”命令却不能接受类似这样的计数，命令”^”前加上一个计数也没有任何效果。<br>12.移动到指定字符上<br>命令”fx”在当前行上查找下一个字符x（向右方向），可以带一个命令计数”F”命令向左方向搜索。”tx”命令形同”fx”命令，只不过它不是把光标停留在被搜索字符上，而是在它之前的一个字符上。提示：”t”意为”To”。该命令的反方向版是”Tx”。这4个命令都可以用”;”来重复。以”,”也是重复同样的命令，但是方向与原命令的方向相反。<br>13.以匹配一个括号为目的移动<br>用命令”%”跳转到与当前光标下的括号相匹配的那一个括号上去。如果当前光标在”(“上，它就向前跳转到与它匹配的”)”上，如果当前在”)”上，它就向后自动跳转到匹配的”(“上去.<br>14.移动到指定行<br>用”G”命令指定一个命令计数，这个命令就会把光标定位到由命令计数指定的行上。比如”33G”就会把光标置于第33行上。没有指定命令计数作为参数的话, “G”会把光标定位到最后一行上。”gg”命令是跳转到第一行的快捷的方法。<br>另一个移动到某行的方法是在命令”%”之前指定一个命令计数比如”50%”将会把光标定位在文件的中间. “90%”跳到接近文件尾的地方。<br>命令”H”,”M”,”L”,分别将光标跳转到第一行，中间行，结尾行部分。<br>15.告诉你当前的位置<br>使用CTRL-G命令。”set number”在每行的前面显示一个行号。相反关闭行号用命令”:set nonumber”。”:set ruler”在Vim窗口的右下角显示当前光标位置。<br>16.滚屏<br>CTRL-U显示文本的窗口向上滚动了半屏。CTRL-D命令将窗口向下移动半屏。一次滚动一行可以使用CTRL-E(向上滚动)和CTRL-Y(向下滚动)。要向前滚动一整屏使用命令CTRL-F。另外CTRL-B是它的反向版。”zz”命令会把当前行置为屏幕正中央，”zt”命令会把当前行置于屏幕顶端，”zb”则把当前行置于屏幕底端.<br>17.简单搜索<br>“/string”命令可用于搜索一个字符串。要查找上次查找的字符串的下一个位置,使用”n”命令。如果你知道你要找的确切位置是目标字符串的第几次出现，还可以在”n”之前放置一个命令计数。”3n”会去查找目标字符串的第3次出现。<br>“?”命令与”/“的工作相同，只是搜索方向相反.”N”命令会重复前一次查找，但是与最初用”/“或”?”指定的搜索方向相反。<br>如果查找内容忽略大小写，则用命令”set ignorecase”, 返回精确匹配用命令”set noignorecase” 。<br>18.在文本中查找下一个word<br>把光标定位于这个word上然后按下””键。Vim将会取当前光标所在的word并将它作用目标字符串进行搜索。”#”命令是””的反向版。还可以在这两个命令前加一个命令计数:”3*”查找当前光标下的word的第三次出现。<br>19.查找整个word<br>如果你用”/the”来查找Vim也会匹配到”there”。要查找作为独立单词的”the”使用如下命令：”/the&gt;”。”&gt;”是一个特殊的记法，它只匹配一个word的结束处。近似地，”&lt;”匹配到一个word的开始处。这样查找作为一个word的”the”就可以用:”/“。<br>20.高亮显示搜索结果<br>开启这一功能用”:set hlsearch”，关闭这一功能：”:set nohlsearch”。如果只是想去掉当前的高亮显示，可以使用下面的命令：”:nohlsearch”(可以简写为noh)。<br>21.匹配一行的开头与结尾<br>^ 字符匹配一行的开头。$字符匹配一行的末尾。<br>所以”/was$”只匹配位于一行末尾的单词was，所以”/^was”只匹配位于一行开始的单词was。<br>22.匹配任何的单字符<br>.这个字符可以匹配到任何字符。比如”c.m”可以匹配任何前一个字符是c，后一个字符是m的情况，不管中间的字符是什么。<br>23.匹配特殊字符<br>放一个反斜杠在特殊字符前面。如果你查找”ter。”，用命令”/ter。”<br>24.使用标记<br>当你用”G”命令从一个地方跳转到另一个地方时，Vim会记得你起跳的位置。这个位置在Vim中是一个标记。使用命令” <code>&quot;可以使你跳回到刚才的出发点。</code>命令可以在两点之间来回跳转。CTRL-O命令是跳转到你更早些时间停置光标的位置(提示:O意为older). CTRL-I则是跳回到后来停置光标的更新的位置(提示：I在键盘上位于O前面)。<br>注:使用CTRL-I 与按下键一样。<br>25.具名标记<br>命令”ma”将当前光标下的位置名之为标记”a”。从a到z一共可以使用26个自定义的标记。要跳转到一个你定义过的标记，使用命令” marks “marks就是定义的标记的名字。命令” ‘a “使你跳转到a所在行的行首，” a “会精确定位a所在的位置。命令：”:marks”用来查看标记的列表。<br>命令delm！删除所有标记。<br>26.操作符命令和位移<br>“dw”命令可以删除一个word，”d4w”命令是删除4个word，依此类推。类似有”d2e”、”d$”。此类命令有一个固定的模式：操作符命令+位移命令。首先键入一个操作符命令。比如”d”是一个删除操作符。接下来是一个位移命。比如”w”。这样任何移动光标命令所及之处，都是命令的作用范围。<br>27.改变文本<br>操作符命令是”c”，改变命令。它的行为与”d”命令类似，不过在命令执行后会进入Insert模式。比如”cw”改变一个word。或者，更准确地说，它删除一个word并让你置身于Insert模式。<br>“cc”命令可以改变整行。不过仍保持原来的缩进。<br>“c$”改变当前光标到行尾的内容。<br>快捷命令：x 代表dl(删除当前光标下的字符)<br>X 代表dh(删除当前光标左边的字符)<br>D 代表d$(删除到行尾的内容)<br>C 代表c$(修改到行尾的内容)<br>s 代表cl(修改一个字符)<br>S 代表cc(修改一整行)<br>命令”3dw”和”d3w”都是删除3个word。第一个命令”3dw”可以看作是删除一个word的操作执行3次；第二个命令”d3w”是一次删除3个word。这是其中不明显的差异。事实上你可以在两处都放上命令记数，比如，”3d2w”是删除两个word，重复执行3次，总共是6个word。<br>28.替换单个字符<br>“r”命令不是一个操作符命令。它等待你键入下一个字符用以替换当前光标下的那个字符。”r”命令前辍以一个命令记数是将多个字符都替换为即将输入的那个字符。要把一个字符替换为一个换行符使用”r”。它会删除一个字符并插入一个换行符。在此处使用命令记数只会删除指定个数的字符：”4r”将把4个字符替换为一个换行符。<br>29.重复改动<br>“.”命令会重复上一次做出的改动。”.”命令会重复你做出的所有修改，除了”u”命令CTRL-R和以冒号开头的命令。”.”需要在Normal模式下执行，它重复的是命令，而不是被改动的内容，<br>30.Visual模式<br>按”v”可以进入Visual模式。移动光标以覆盖你想操纵的文本范围。同时被选中的文本会以高亮显示。最后键入操作符命令。<br>31.移动文本<br>以”d”或”x”这样的命令删除文本时，被删除的内容还是被保存了起来。你还可以用p命令把它取回来。”P”命令是把被去回的内容放在光标之前，”p”则是放在光标之后。对于以”dd”删除的整行内容，”P”会把它置于当前行的上一行。”p”则是至于当前行的后一行。也可以对命令”p”和”P”命令使用命令记数。它的效果是同样的内容被取回指定的次数。这样一来”dd”之后的”3p”就可以把被删除行的3 份副本放到当前位置。<br>命令”xp”将光标所在的字符与后一个字符交换。<br>32.复制文本（VIM编辑器内复制）<br>“y”操作符命令会把文本复制到一个寄存器3中。然后可以用”p”命令把它取回。因为”y”是一个操作符命令，所以你可以用”yw”来复制一个word. 同样可以使用命令记数。如下例中用”y2w”命令复制两个word，”yy”命令复制一整行，”Y”也是复制整行的内容，复制当前光标至行尾的命令是”y$”。<br>33.文本对象<br>“diw” 删除当前光标所在的word(不包括空白字符) “daw” 删除当前光标所在的word(包括空白字符)<br>34.快捷命令<br>x 删除当前光标下的字符(“dl”的快捷命令)<br>X 删除当前光标之前的字符(“dh”的快捷命令)<br>D 删除自当前光标至行尾的内容(“d$”的快捷命令)<br>dw 删除自当前光标至下一个word的开头<br>db 删除自当前光标至前一个word的开始<br>diw 删除当前光标所在的word(不包括空白字符)<br>daw 删除当前光标所在的word(包括空白字符)<br>dG 删除当前行至文件尾的内容<br>dgg 删除当前行至文件头的内容<br>如果你用”c”命令代替”d”这些命令就都变成更改命令。使用”y”就是yank命令，如此类推。<br>35.编辑另一个文件<br>用命令”:edit foo.txt”，也可简写为”:e foo.txt”。<br>36.文件列表<br>可以在启动Vim时就指定要编辑多个文件，用命令”vim one.c two.c three.c”。Vim将在启动后只显示第一个文件，完成该文件的编辑后，可以用令：”:next”或”:n”要保存工作成果并继续下一个文件的编辑，命令：”:wnext”或”:wn”可以合并这一过程。<br>37.显示当前正在编辑的文件<br>用命令”:args”。<br>38.移动到另一个文件<br>用命令”:previous” “:prev”回到上一个文件,合并保存步骤则是”:wprevious” “:wprev”。要移到最后一个文件”:last”,到第一个”:first”.不过没有”:wlast”或者”:wfirst”这样的命令。可以在”:next”和”:previous”命令前面使用一个命令计数。<br>39.编辑另一个文件列表<br>不用重新启动Vim，就可以重新定义一个文件列表。命令”:args five.c six.c seven.h”定义了要编辑的三个文件。<br>39.自动存盘<br>命令”:set autowrite”,”set aw”。自动把内容写回文件: 如果文件被修改过，在每个:next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、CTRL-] 和 CTRL-^命令时进行。<br>命令”:set autowriteall”,”set awa”。和 ‘autowrite’ 类似，但也适用于”:edit”、”:enew”、”:quit”、”:qall”、”:exit”、”:xit”、”:recover” 和关闭 Vim 窗口。置位本选项也意味着 Vim 的行为就像打开 ‘autowrite’ 一样。<br>40.切换到另一文件<br>要在两个文件间快速切换，使用CTRL-^。<br>41.文件标记<br>以大写字母命名的标记。它们是全局标记，它们可以用在任何文件中。比如，正在编辑”fab1.Java”,用命令”50%mF”在文件的中间设置一个名为F的标记。然后在”fab2.java”文件中，用命令”GnB”在最后一行设置名为B的标记。在可以用”F”命令跳转到文件”fab1.java”的半中间。或者编辑另一个文件，”‘B”命令会再把你带回文件”fab2.java”的最后一行。<br>要知道某个标记所代表的位置是什么，可以将该标记的名字作为”marks”命令的参数”:marks M”或者连续跟上几个参数”:marks MJK”<br>可以用CTRL-O和CTRL-I可以跳转到较早的位置和靠后的某位置。<br>42.查看文件<br>仅是查看文件，不向文件写入内容，可以用只读形式编辑文件。用命令：<br>vim -R file。如果是想强制性地避免对文件进行修改，可以用命令：<br>vim -M file。<br>43.更改文件名<br>将现有文件存成新的文件，用命令”:sav(eas) move.c”。如果想改变当前正在编辑的文件名，但不想保存该文件，就可以用命令：”:f(ile) move.c”。<br>44.分割一个窗口<br>打开一个新窗口最简单的办法就是使用命令：”:split”。CTRL-W 命令可以切换当前活动窗口。<br>45.关闭窗口<br>用命令：”close”.可以关闭当前窗口。实际上,任何退出文件编辑的命令”:quit”和”ZZ”都会关闭窗口，但是用”:close”可以阻止你关闭最后一个Vim，以免以意外地整个关闭了Vim。<br>46.关闭除当前窗口外的所有其他窗口<br>用命令：”:only”,关闭除当前窗口外的所有其它窗口。如果这些窗口中有被修改过的，你会得到一个错误信息，同时那个窗口会被留下来。<br>47.为另一个文件分隔出一个窗口<br>命令”:split two.c”可以打开第二个窗口同时在新打开的窗口中开始编辑作为<br>参数的文件。如果要打开一个新窗口并开始编辑一个空的缓冲区，使用命令:”:new”。<br>48.垂直分割<br>用命令”:vsplit或：:vsplit two.c”。同样有一个对应的”:vnew”命令，用于垂直分隔窗口并在其中打开一个新的空缓冲区。<br>49.切换窗口<br>CTRL-W h 到左边的窗口<br>CTRL-W j 到下面的窗口<br>CTRL-W k 到上面的窗口<br>CTRL-W l 到右边的窗口<br>CTRL-W t 到顶部窗口<br>CTRL-W b 到底部窗口<br>50.针对所有窗口操作的命令<br>“:qall”放弃所有操作并退出，”:wall”保存所有，”:wqall”保存所有并退出。<br>51.为每一个文件打开一个窗口<br>使用”-o”选项可以让Vim为每一个文件打开一个窗口：<br>“vim -o one.txt two.txt three.txt”。<br>52.使用vimdiff查看不同<br>“vimdiff main.c~ main.c”,另一种进入diff模式的办法可以在Vim运行中操作。编辑文件”main.c”，然后打开另一个分隔窗口显示其不同:<br>“:edit main.c”<br>“:vertical diffpatch main.c.diff”。<br>53.页签<br>命令”:tabe(dit) thatfile”在一个窗口中打开”thatfile”，该窗口占据着整个的Vim显示区域。命令”:tab split/new”结果是新建了一个拥有一个窗口的页签。以用”gt”命令在不同的页签间切换。</p><p>这是我总结的一些基本用法,可能对初用者会有帮助,独乐乐不如众乐乐,是吧!<br>说明：以下黑色为vi和vim均有的一般功能，而红色为Vim（Vi Improved）所特有功能。Vim一般的Unix和Linux下均有安装。<br> 三种状态<br>Command： 任何输入都会作为编辑命令，而不会出现在屏幕上，任何输入都引起立即反映<br>Insert： 任何输入的数据都置于编辑寄存器，按ESC，可跳回command方式<br>Escape： 以“：”或者“/”为前导的指令，出现在屏幕的最下一行，任何输入都被当成特别指令。<br> 离开vi<br>:q! 离开vi，并放弃刚在缓冲区内编辑的内容。<br>:wq 将缓冲区内的资料写入磁盘中，并离开vi。</p>]]></content>
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>两种网易云音乐播放器调用代码 网站可直接调用</title>
      <link href="/2018/06/25/%E4%B8%A4%E7%A7%8D%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E8%B0%83%E7%94%A8%E4%BB%A3%E7%A0%81%20%E7%BD%91%E7%AB%99%E5%8F%AF%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8/"/>
      <url>/2018/06/25/%E4%B8%A4%E7%A7%8D%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E8%B0%83%E7%94%A8%E4%BB%A3%E7%A0%81%20%E7%BD%91%E7%AB%99%E5%8F%AF%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>第一种：<br>效果：代码：</p><iframe src="//music.163.com/outchain/player?type=2&amp;id=4341314&amp;auto=1&amp;height=66" width="100%" height="86" frameborder="no" marginwidth="0" marginheight="0">&lt;span data-mce-type=”bookmark” style=”display: inline-block; width: 0px; overflow: hidden; line-height: 0;” class=”mce_SELRES_start”&gt;&lt;/span&gt;</iframe><p>参数说明：</p><p>播放器可修改参数：</p><p>width=100% #自适应宽度<br>height=86 #根据自己喜好修改<br>id=4341314 #为歌曲的ID <a href="http://music.163.com/#/song?id=4341314" target="_blank" rel="noopener">http://music.163.com/#/song?id=4341314</a><br>auto=0 #0为不自动播放，1为自动播放</p><p>第二种：<br>效果：调用代码：</p><p>&lt;iframe src=”<a href="http://music.163.com/outchain/player?type=0&amp;id=967047669&amp;auto=0&amp;height=430&quot;" target="_blank" rel="noopener">http://music.163.com/outchain/player?type=0&amp;id=967047669&amp;auto=0&amp;height=430&quot;</a> </p>]]></content>
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网易云音乐 </tag>
            
            <tag> 音乐播放器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7 常用命令集合</title>
      <link href="/2018/06/25/CentOS7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/"/>
      <url>/2018/06/25/CentOS7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<p>常用命令</p><p>文件与目录操作</p><p>命令 解析<br>cd /home 进入 ‘/home’ 目录<br>cd .. 返回上一级目录<br>cd ../.. 返回上两级目录<br>cd - 返回上次所在目录<br>cp file1 file2 将file1复制为file2<br>cp -a dir1 dir2 复制一个目录<br>cp -a /tmp/dir1 . 复制一个目录到当前工作目录（.代表当前目录）<br>ls 查看目录中的文件<br>ls -a 显示隐藏文件<br>ls -l 显示详细信息<br>ls -lrt 按时间显示文件（l表示详细列表，r表示反向排序，t表示按时间排序）<br>pwd 显示工作路径<br>mkdir dir1 创建 ‘dir1’ 目录<br>mkdir dir1 dir2 同时创建两个目录<br>mkdir -p /tmp/dir1/dir2 创建一个目录树<br>mv dir1 dir2 移动/重命名一个目录<br>rm -f file1 删除 ‘file1’<br>rm -rf dir1 删除 ‘dir1’ 目录及其子目录内容<br>查看文件内容</p><p>命令 解析<br>cat file1 从第一个字节开始正向查看文件的内容<br>head -2 file1 查看一个文件的前两行<br>more file1 查看一个长文件的内容<br>tac file1 从最后一行开始反向查看一个文件的内容<br>tail -3 file1 查看一个文件的最后三行<br>vi file 打开并浏览文件<br>文本内容处理</p><p>命令 解析<br>grep str /tmp/test 在文件 ‘/tmp/test’ 中查找 “str”<br>grep ^str /tmp/test 在文件 ‘/tmp/test’ 中查找以 “str” 开始的行<br>grep [0-9] /tmp/test 查找 ‘/tmp/test’ 文件中所有包含数字的行<br>grep str -r /tmp/* 在目录 ‘/tmp’ 及其子目录中查找 “str”<br>diff file1 file2 找出两个文件的不同处<br>sdiff file1 file2 以对比的方式显示两个文件的不同<br>vi file<br>操作 解析<br>i 进入编辑文本模式<br>Esc 退出编辑文本模式<br>:w 保存当前修改<br>:q 不保存退出vi<br>:wq 保存当前修改并退出vi<br>查询操作</p><p>命令 解析<br>find / -name file1 从 ‘/’ 开始进入根文件系统查找文件和目录<br>find / -user user1 查找属于用户 ‘user1’ 的文件和目录<br>find /home/user1 -name <em>.bin 在目录 ‘/ home/user1’ 中查找以 ‘.bin’ 结尾的文件<br>find /usr/bin -type f -atime +100 查找在过去100天内未被使用过的执行文件<br>find /usr/bin -type f -mtime -10 查找在10天内被创建或者修改过的文件<br>locate </em>.ps 寻找以 ‘.ps’ 结尾的文件，先运行 ‘updatedb’ 命令<br>find -name ‘*.[ch]’ | xargs grep -E ‘expr’ 在当前目录及其子目录所有.c和.h文件中查找 ‘expr’<br>find -type f -print0 | xargs -r0 grep -F ‘expr’ 在当前目录及其子目录的常规文件中查找 ‘expr’<br>find -maxdepth 1 -type f | xargs grep -F ‘expr’ 在当前目录中查找 ‘expr’<br>压缩、解压</p><p>命令 解析<br>bzip2 file1 压缩 file1<br>bunzip2 file1.bz2 解压 file1.bz2<br>gzip file1 压缩 file1<br>gzip -9 file1 最大程度压缩 file1<br>gunzip file1.gz 解压 file1.gz<br>tar -cvf archive.tar file1 把file1打包成 archive.tar（-c: 建立压缩档案；-v: 显示所有过程；-f: 使用档案名字，是必须的，是最后一个参数）<br>tar -cvf archive.tar file1 dir1 把 file1，dir1 打包成 archive.tar<br>tar -tf archive.tar 显示一个包中的内容<br>tar -xvf archive.tar 释放一个包<br>tar -xvf archive.tar -C /tmp 把压缩包释放到 /tmp目录下<br>zip file1.zip file1 创建一个zip格式的压缩包<br>zip -r file1.zip file1 dir1 把文件和目录压缩成一个zip格式的压缩包<br>unzip file1.zip 解压一个zip格式的压缩包到当前目录<br>unzip test.zip -d /tmp/ 解压一个zip格式的压缩包到 /tmp 目录<br>yum安装器</p><p>命令 解析<br>yum -y install [package] 下载并安装一个rpm包<br>yum localinstall [package.rpm] 安装一个rpm包，使用你自己的软件仓库解决所有依赖关系<br>yum -y update 更新当前系统中安装的所有rpm包<br>yum update [package] 更新一个rpm包<br>yum remove [package] 删除一个rpm包<br>yum list 列出当前系统中安装的所有包<br>yum search [package] 在rpm仓库中搜寻软件包<br>yum clean [package] 清除缓存目录（/var/cache/yum）下的软件包<br>yum clean headers 删除所有头文件<br>yum clean all 删除所有缓存的包和头文件<br>网络相关</p><p>命令 解析<br>ifconfig eth0 显示一个以太网卡的配置<br>ifconfig eth0 192.168.1.1 netmask 255.255.255.0 配置网卡的IP地址<br>ifdown eth0 禁用 ‘eth0’ 网络设备<br>ifup eth0 启用 ‘eth0’ 网络设备<br>iwconfig eth1 显示一个无线网卡的配置<br>iwlist scan 显示无线网络<br>ip addr show 显示网卡的IP地址<br>系统相关</p><p>命令 解析<br>su - 切换到root权限（与su有区别）<br>shutdown -h now 关机<br>shutdown -r now 重启<br>top 罗列使用CPU资源最多的linux任务 （输入q退出）<br>pstree 以树状图显示程序<br>man ping 查看参考手册（例如ping 命令）<br>passwd 修改密码<br>df -h 显示磁盘的使用情况<br>cal -3 显示前一个月，当前月以及下一个月的月历<br>cal 10 1988 显示指定月，年的月历<br>date –date ‘1970-01-01 UTC 1427888888 seconds’ 把一相对于1970-01-01 00:00的秒数转换成时间<br>XSheel 5相关操作</p><p>窗体快捷键</p><p>命令 解析<br>Ctrl + u 删除光标之前到行首的字符<br>Ctrl + k 删除光标之前到行尾的字符<br>Ctrl + c 取消当前行输入的命令，相当于Ctrl + Break<br>Ctrl + a 光标移动到行首（ahead of line），相当于通常的Home键<br>Ctrl + e 光标移动到行尾（end of line）<br>Ctrl + f 光标向前（forward）移动一个字符位置<br>Ctrl + b 光标往回（backward）移动一个字符位置<br>Ctrl + l 清屏，相当于执行clear命令<br>Ctrl + r 显示:号提示，根据用户输入查找相关历史命令（reverse-i-search）<br>Ctrl + w 删除从光标位置前到当前所处单词（word）的开头<br>Ctrl + t 交换光标位置前的两个字符<br>Ctrl + y 粘贴最后一次被删除的单词<br>Ctrl + Alt + d 显示桌面<br>Alt + b 光标往回（backward）移动到前一个单词<br>Alt + d 删除从光标位置到当前所处单词的末尾<br>Alt + F2 运行<br>Alt + F4 关闭当前窗口<br>Alt + F9 最小化当前窗口<br>Alt + F10 最大化当前窗口<br>Alt + Tab 切换窗口<br>Alt + 左键 移动窗口（或在最下面的任务栏滚动鼠标滑轮）<br>操作小技巧</p><p>鼠标中间键：粘贴突出显示的文本。(使用鼠标左键来选择文本。把光标指向想粘贴文本的地方。点击鼠标中间键来粘贴。)</p><p>Tab：命令行自动补全。使用 shell 提示时可使用这一方式。键入命令或文件名的前几个字符，然后按 [Tab] 键，它会自动补全命令或显示匹配键入字符的所有命令。</p><p>在滚动条的空白处点击鼠标中键：屏幕即滚动到那个地方。</p><p>在桌面或文件管理器中直接按 / 就可以输入位置，打开文件管理器。</p><p>在 vi 或 Firefox 中直接按 / 即可进入快速搜索状态。</p><p>网站链接和图片可直接拖放到桌面或者目录，可以马上下载。</p><p>直接将文件管理器中的文件拖到终端中就可以在终端中得到完整的路径名。</p><p>结束语</p><p>其实要学好Linux的操作并不是很困难的事情，在平常的使用过程中，碰到问题，学会去网上寻找答案不失为一个非常好的手段！谢谢大家！</p><p>转自：<a href="http://blog.csdn.net/o0darknessyy0o/article/details/52072054" target="_blank" rel="noopener">http://blog.csdn.net/o0darknessyy0o/article/details/52072054</a></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>闲置域名</title>
      <link href="/2018/06/25/%E9%97%B2%E7%BD%AE%E5%9F%9F%E5%90%8D/"/>
      <url>/2018/06/25/%E9%97%B2%E7%BD%AE%E5%9F%9F%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>为帮助更多的小伙伴成立自己的网站，节省域名成本，本站决定免费提供二级域名解析，例如：【xxx.youmei.io】。<br>网站内容要合法合规，主要面向技术型网站提供，有需要的同学可以在下面留言。</p><p>阿里云产品优惠券领取地址：<br><a href="https://promotion.aliyun.com/ntms/act/ambassador/sharetouser.html?userCode=od77opdu&amp;utm_source=od77opdu" target="_blank" rel="noopener">https://promotion.aliyun.com/ntms/act/ambassador/sharetouser.html?userCode=od77opdu&amp;utm_source=od77opdu</a></p><p>闲置域名出售，有要的小伙伴留言<br>geegle.cc<br>tianshimao.cc<br>facete.cn 【已售出】<br>ceohd.com 【已售出】<br>fox1024.com 【即将到期】<br>pyboy.me    【即将到期】</p><p>购买方式：阿里云搜索域名直接购买</p>]]></content>
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python学习资料</title>
      <link href="/2018/06/25/Python%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
      <url>/2018/06/25/Python%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
      <content type="html"><![CDATA[<p>电子书下载：</p><p>简明Python教程2.7<br>简明Python教程3.5<br>笨办法学 Python （第三版）<br>python标准库中文版PDF(带章节书签)<br>深入理解Python中文版高清PDF<br>【Python 2.7教程】廖雪峰<br>django_book中文版 简明Python教程<br>Python编程指南<br>以上电子书著作版权归原作者所有！链接后期有空会重新补充</p><p>编辑器下载：<br>Python官网下载<br><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a><br>sublimetext官网下载<br><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">http://www.sublimetext.com/</a><br>Visual Studio Code官网下载 （中文官网）<br><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">https://code.visualstudio.com/Download</a><br>Vim官网下载<br><a href="https://www.vim.org/download.php" target="_blank" rel="noopener">https://www.vim.org/download.php</a><br>Atom官网下载<br><a href="https://atom.io/" target="_blank" rel="noopener">https://atom.io/</a><br>PyCharm官网下载<br><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/</a><br>Eclipse官网下载<br><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">https://www.eclipse.org/downloads/</a><br>Emacs官网下载<br><a href="http://www.gnu.org/software/emacs/" target="_blank" rel="noopener">http://www.gnu.org/software/emacs/</a></p><p>Linux下载：<br>Redhat官网下载<br><a href="https://access.redhat.com/downloads" target="_blank" rel="noopener">https://access.redhat.com/downloads</a><br>CentOS官网下载<br><a href="https://www.centos.org/download/" target="_blank" rel="noopener">https://www.centos.org/download/</a><br>Ubuntu官网下载<br><a href="https://cn.ubuntu.com/download/" target="_blank" rel="noopener">https://cn.ubuntu.com/download/</a><br>Mint官网下载<br><a href="https://www.linuxmint.com/download.php" target="_blank" rel="noopener">https://www.linuxmint.com/download.php</a><br>Debian官网下载<br><a href="https://www.debian.org/distrib/" target="_blank" rel="noopener">https://www.debian.org/distrib/</a><br>Arch官网下载<br><a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">https://www.archlinux.org/download/</a><br>Fedora官网下载<br><a href="https://getfedora.org/zh_CN/" target="_blank" rel="noopener">https://getfedora.org/zh_CN/</a><br>deepin官网下载<br><a href="https://www.deepin.org/download/" target="_blank" rel="noopener">https://www.deepin.org/download/</a></p><p>数据库下载：<br>MYSQL官网下载<br><a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener">https://www.mysql.com/downloads/</a><br>MongoDB官网下载<br><a href="https://www.mongodb.com/" target="_blank" rel="noopener">https://www.mongodb.com/</a><br>Redis官网下载<br><a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p><p>内容有错误的或者有需要补充的，请在评论区留言</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
            <tag> IDE </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装Django时提示pip版本问题解决方法</title>
      <link href="/2018/06/25/%E5%AE%89%E8%A3%85Django%E6%97%B6%E6%8F%90%E7%A4%BApip%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2018/06/25/%E5%AE%89%E8%A3%85Django%E6%97%B6%E6%8F%90%E7%A4%BApip%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>解决问题：<br>You are using pip version 9.0.1, however version 10.0.1 is available.<br>You should consider upgrading via the ‘pip install –upgrade pip’ command.</p><p>解决方法<br>直接运行命令：python -m pip install –upgrade pip 就可以了<br>如果你电脑上安装了两个版本的python，比如Mac上本来自带python2版本，但是你想安装在python3目录内，请把解决方法的运行命令的python改成python3</p>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用 Python 3.6.2 + Django 1.11.13 重新开发 blog</title>
      <link href="/2018/06/25/%E7%94%A8Python3.6.2+Django1.11.13%E9%87%8D%E6%96%B0%E5%BC%80%E5%8F%91blog/"/>
      <url>/2018/06/25/%E7%94%A8Python3.6.2+Django1.11.13%E9%87%8D%E6%96%B0%E5%BC%80%E5%8F%91blog/</url>
      <content type="html"><![CDATA[<p>由于最近事儿比较多，计划最晚在12月前用 Python3.6.2 + Django1.11.13 重写一套blog系统并部署。<br>先定个小目标，特此记录一下</p>]]></content>
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django使用基础常用命令</title>
      <link href="/2018/06/25/Django%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/06/25/Django%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>查看django命令：django-admin 即可显示django的可用命令<br>创建项目命令：django-admin startproject [项目名称] 若没有报错则创建项目成功<br>查看manage.py常用命令：python manage.py 即可显示manage中的可用命令<br>启动项目服务器命令：python manage.py runserver 启动服务器<br>启动项目服务器并修改端口：python manage.py runserver 9999 使用9999端口来启动服务器<br>创建django应用需要进入与manage.py的同级目录进行创建<br>创建命令为：python manage.py startapp [项目名称]<br>创建完成后将应用名称添加到settings.py中的INSTALLED_APPS中完成应用的创建<br>models模型创建完毕后使用manage.py来生成数据表，models模型创建需要在应用目录中的models.py中进行创建<br>创建数据迁移命令：python manage.py makemigrations [应用名称] 进行数据迁移的准备步骤，输入以下命令完成数据迁移操作<br>开始数据迁移命令：python manage.py migrate<br>注：如果不输入应用名称则默认对django中的所有应用进行数据迁移操作<br>数据迁移完成后使用以下命令进行SQL语句查询<br>命令为：python manage.py sqlmigrate [应用名称] [文件id]<br>给django创建一个超级用户<br>命令为：python manage.py createsuperuser<br>浏览器中访问：localhost:8000/admin 进行访问admin页面<br>在应用下admin.py中引入自身的models模块，使用<br>编辑admin.py添加代码：admin.site.register(models.Article)<br>将admin管理后台进行配置升级<br>创建admin配置类<br>    class ArticleAdmin(admin.ModelAdmin)</p><p>注册：admin.site.register(Article,ArticleAdmin )</p>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx django 的配置步骤</title>
      <link href="/2018/06/25/nginxdjango%E7%9A%84%E9%85%8D%E7%BD%AE%E6%AD%A5%E9%AA%A4/"/>
      <url>/2018/06/25/nginxdjango%E7%9A%84%E9%85%8D%E7%BD%AE%E6%AD%A5%E9%AA%A4/</url>
      <content type="html"><![CDATA[<p>升级并安装 pip<br>sudo apt-get update<br>sudo apt-get install python-pip<br>安装虚拟环境<br>sudo pip install virtualenv virtualenvwrapper<br>加入到环境变量中<br>当前用户目录下的 Env为虚拟环境存放的目录</p><p>echo “export WORKON_HOME=~/Env” &gt;&gt; ~/.bashrc<br>echo “source /usr/local/bin/virtualenvwrapper.sh” &gt;&gt; ~/.bashrc<br>激活配置<br>source ~/.bashrc<br>创建虚拟环境<br>环境名为:firstsite</p><p>在用户当前目录下创建 Django工程<br>cd ~<br>django-admin.py startproject firstsite<br>django 的初始化<br>cd ~/firstsite<br>./manage.py migrate<br>./manage.py createsuperuser<br>Django静态文件配置<br>nano firstsite/settings.py<br>STATIC_ROOT = os.path.join(BASE_DIR, “static/“)<br>./manage.py collectstatic<br>安装 uWSGI<br>sudo apt-get install python-dev<br>sudo pip install uwsgi<br>测试是否能够正常访问 django 项目</p><p>http 指定进程端口8080<br>home指定虚拟环境目录<br>chdir指定 项目工程所在目录<br>uwsgi –http :8080 –home /home/pi/Env/firstsite –chdir /home/pi/firstsite -w firstsite.wsgi<br>创建 uwsgi 的配置文件<br>sudo mkdir -p /etc/uwsgi/sites<br>cd /etc/uwsgi/sites<br>uwsgi 的配置相关内容(重点)<br>[uwsgi]<br>project = firstsite<br>base = /home/pi</p><p>chdir = %(base)/%(project)<br>home = %(base)/Env/%(project)<br>module = %(project).wsgi:application</p><p>master = true<br>processes = 5</p><p>socket = %(base)/%(project)/%(project).sock<br>chmod-socket = 666<br>vacuum = true<br>启动守护进程<br>vim /etc/systemd/system/uwsgi.service</p><p>[Unit]<br>Description=uWSGI Emperor service<br>After=syslog.target</p><p>[Service]<br>ExecStart=/usr/local/bin/uwsgi –emperor /etc/uwsgi/sites<br>Restart=always<br>KillSignal=SIGQUIT<br>Type=notify<br>StandardError=syslog<br>NotifyAccess=all</p><p>[Install]<br>WantedBy=multi-user.target<br>重载守护进程的配置信息<br>sudo systemctl daemon-reload<br>保证系统重启后uwsgi守护进程自动重启<br>sudo systemctl enable uwsgi<br>启动uwsgi进程<br>sudo systemctl start uwsgi<br>nginx 的安装<br>sudo apt-get install nginx<br>nginx的配置<br>sudo nano /etc/nginx/sites-available/firstsite<br>server {<br>listen 80;<br>server_name firstsite.com <a href="http://www.firstsite.com" target="_blank" rel="noopener">www.firstsite.com</a>;</p><p>location = /favicon.ico { access_log off; log_not_found off; }<br>location /static/ {<br>root /home/pi/firstsite;<br>}</p><p>location / {<br>include uwsgi_params;<br>uwsgi_pass unix:/home/pi/firstsite/firstsite.sock;<br>}<br>}<br>nginx配置生效<br>sudo ln -s /etc/nginx/sites-available/firstsite /etc/nginx/sites-enabled<br>检查配置<br>sudo service nginx configtest<br>重启nginx<br>sudo service nginx restart<br>非 debug 模式<br>非 debug 模式需要重启uwsgi 服务</p><p>sudo systemctl restart uwsgi</p>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客建设历程</title>
      <link href="/2018/06/24/%E5%8D%9A%E5%AE%A2%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0/"/>
      <url>/2018/06/24/%E5%8D%9A%E5%AE%A2%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>2016.9.3   购入阿里云云主机，与此同时购入域名【ceohd.com】。blog系统从wp到typecho再到wp</p><p>2017.7.20   网站备案，域名【ceohd.com】【pyboy.me】</p><p>2017.7.31   网站备案管局通过，并开通网站，主域名为【ceohd.com】</p><p>2018.4.27   购入新域名【markhoo.com】（百度云），准备更换域名</p><p>2018.5.1   域名【ceohd.com】售出，暂时启用【pyboy.me】作为主域名</p><p>2018.5.2   将域名【ceohd.com】【pyboy.me】注销备案信息</p><p>2018.5.4   提交域名【markhoo.com】以及相关材料备案</p><p>2018.5.15   域名因为设置信息保护，导致备案审核未通过。取消域名信息保护后再次提交</p><p>2018.5.25   再次提交审核通过，备案完成。网站再次开启，正式启用【markhoo.com】，同时将【youmei.io】（Namecheap）重定向<br>2018.5.26 考虑良久，以及做了对比，决定从wp转到typecho</p>]]></content>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Python的面试题</title>
      <link href="/2018/06/24/%E5%85%B3%E4%BA%8EPython%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2018/06/24/%E5%85%B3%E4%BA%8EPython%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>Python语言特性<br>1 Python的函数参数传递<br>看两个例子:<br>    a = 1<br>    def fun(a):<br>    a = 2<br>    fun(a)<br>    print a # 1</p><pre><code>a = []def fun(a):a.append(1)fun(a)print a # [1]</code></pre><p>所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉。<br>通过id来看引用a的内存地址可以比较理解：<br>    a = 1<br>    def fun(a):<br>    print “func_in”,id(a) # func_in 41322472<br>    a = 2<br>    print “re-point”,id(a), id(2) # re-point 41322448 41322448<br>    print “func_out”,id(a), id(1) # func_out 41322472 41322472<br>    fun(a)<br>    print a # 1</p><p>注：具体的值在不同电脑上运行时可能不同。<br>可以看到，在执行完a = 2之后，a引用中保存的值，即内存地址发生变化，由原来1对象的所在的地址变成了2这个实体对象的内存地址。<br>而第2个例子a引用保存的内存值就不会发生变化：<br>    a = []<br>    def fun(a):<br>    print “func_in”,id(a) # func_in 53629256<br>    a.append(1)<br>    print “func_out”,id(a) # func_out 53629256<br>    fun(a)<br>    print a # [1]</p><p>这里记住的是类型是属于对象的，而不是变量。而对象有两种,“可更改”（mutable）与“不可更改”（immutable）对象。在python中，strings, tuples, 和numbers是不可更改的对象，而 list, dict, set 等则是可以修改的对象。(这就是这个问题的重点)<br>当一个引用传递给函数的时候,函数自动复制一份引用,这个函数里的引用和外边的引用没有半毛关系了.所以第一个例子里函数把引用指向了一个不可变对象,当函数返回的时候,外面的引用没半毛感觉.而第二个例子就不一样了,函数内的引用指向的是可变对象,对它的操作就和定位了指针地址一样,在内存里进行修改.<br>如果还不明白的话,这里有更好的解释: <a href="http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference" target="_blank" rel="noopener">http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference</a><br>2 Python中的元类(metaclass)<br>这个非常的不常用,但是像ORM这种复杂的结构还是会需要的,详情请看:<a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python" target="_blank" rel="noopener">http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python</a><br>3 @staticmethod和@classmethod<br>Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:<br>    def foo(x):<br>    print “executing foo(%s)”%(x)</p><pre><code>class A(object):def foo(self,x):print &quot;executing foo(%s,%s)&quot;%(self,x)@classmethoddef class_foo(cls,x):print &quot;executing class_foo(%s,%s)&quot;%(cls,x)@staticmethoddef static_foo(x):print &quot;executing static_foo(%s)&quot;%xa=A()</code></pre><p>这里先理解下函数参数里面的self和cls.这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用foo(x),这个函数就是最常用的,它的工作跟任何东西(类,实例)无关.对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是foo(self, x),为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的a.foo(x)(其实是foo(a, x)).类方法一样,只不过它传递的是类而不是实例,A.class_foo(x).注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好.<br>对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用a.static_foo(x)或者A.static_foo(x)来调用.<br>实例方法 类方法 静态方法<br>a = A() a.foo(x) a.class_foo(x) a.static_foo(x)<br>A 不可用 A.class_foo(x) A.static_foo(x)<br>更多关于这个问题:<br><a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python" target="_blank" rel="noopener">http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python</a><br><a href="https://realpython.com/blog/python/instance-class-and-static-methods-demystified/" target="_blank" rel="noopener">https://realpython.com/blog/python/instance-class-and-static-methods-demystified/</a><br>4 类变量和实例变量<br>类变量：<br>​ 是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。<br>实例变量：<br>实例化之后，每个实例单独拥有的变量。<br>    class Test(object):<br>    num_of_instance = 0<br>    def <strong>init</strong>(self, name):<br>    self.name = name<br>    Test.num_of_instance += 1</p><pre><code>if __name__ == &apos;__main__&apos;:print Test.num_of_instance # 0t1 = Test(&apos;jack&apos;)print Test.num_of_instance # 1t2 = Test(&apos;lucy&apos;)print t1.name , t1.num_of_instance # jack 2print t2.name , t2.num_of_instance # lucy 2</code></pre><p>补充的例子<br>    class Person:<br>    name=”aaa”</p><pre><code>p1=Person()p2=Person()p1.name=&quot;bbb&quot;print p1.name # bbbprint p2.name # aaaprint Person.name # aaa</code></pre><p>这里p1.name=”bbb”是实例调用了类变量,这其实和上面第一个问题一样,就是函数传参的问题,p1.name一开始是指向的类变量name=”aaa”,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.<br>可以看看下面的例子:<br>    class Person:<br>    name=[]</p><pre><code>p1=Person()p2=Person()p1.name.append(1)print p1.name # [1]print p2.name # [1]print Person.name # [1]</code></pre><p>参考:<a href="http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block" target="_blank" rel="noopener">http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block</a><br>5 Python自省<br>这个也是python彪悍的特性.<br>自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().<br>    a = [1,2,3]<br>    b = {‘a’:1,’b’:2,’c’:3}<br>    c = True<br>    print type(a),type(b),type(c) # <type 'list'=""> <type 'dict'=""> <type 'bool'=""><br>    print isinstance(a,list) # True</type></type></type></p><p>6 字典推导式<br>可能你见过列表推导时,却没有见过字典推导式,在2.7中才加入的:<br>    d = {key: value for (key, value) in iterable}</p><p><br>7 Python中单下划线和双下划线<br><br>class MyClass():<br>… def <strong>init</strong>(self):<br><br>… self.<strong>superprivate = “Hello”<br>… self._semiprivate = “, world!”<br>…<br><br>mc = MyClass()<br>print mc.</strong>superprivate<br><br>Traceback (most recent call last):<br><br> File “<stdin>“, line 1, in <module><br><br>AttributeError: myClass instance has no attribute ‘<strong>superprivate’<br><br>print mc._semiprivate<br>, world!<br>print mc.</strong>dict__<br><br>{‘_MyClass__superprivate’: ‘Hello’, ‘_semiprivate’: ‘, world!’}<br><br><strong>foo</strong>:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如<strong>init</strong>(),<strong>del</strong>(),<strong>call</strong>()这些特殊方法<br>_foo:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；<br><strong>foo:这个有真正的意义:解析器用_classname</strong>foo来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,通过对象名._类名__xxx这样的方式可以访问.<br>详情见:<a href="http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python" target="_blank" rel="noopener">http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python</a><br>或者: <a href="http://www.zhihu.com/question/19754941" target="_blank" rel="noopener">http://www.zhihu.com/question/19754941</a><br>8 字符串格式化:%和.format<br>.format在许多方面看起来更便利.对于%最烦人的是它无法同时传递一个变量和元组.你可能会想下面的代码不会有什么问题:<br>    “hi there %s” % name</module></stdin></p><p>但是,如果name恰好是(1,2,3),它将会抛出一个TypeError异常.为了保证它总是正确的,你必须这样做:<br>    “hi there %s” % (name,) # 提供一个单元素的数组而不是一个参数</p><p>但是有点丑..format就没有这些问题.你给的第二个问题也是这样,.format好看多了.<br>你为什么不用它?<br>不知道它(在读这个之前)<br>为了和Python2.5兼容(譬如logging库建议使用%(issue #4)[<a href="https://github.com/taizilongxu/interview_python/issues/4]" target="_blank" rel="noopener">https://github.com/taizilongxu/interview_python/issues/4]</a>)<br><a href="http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format" target="_blank" rel="noopener">http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format</a><br>9 迭代器和生成器<br>这个是stackoverflow里python排名第一的问题,值得一看: <a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python" target="_blank" rel="noopener">http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python</a><br>这是中文版: <a href="http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html" target="_blank" rel="noopener">http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html</a><br>这里有个关于生成器的创建问题面试官有考： 问： 将列表生成式中[]改成() 之后数据结构是否改变？ 答案：是，从列表变为生成器<br>    &gt;&gt;&gt; L = [x<em>x for x in range(10)]<br>    &gt;&gt;&gt; L<br>    [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]<br>    &gt;&gt;&gt; g = (x</em>x for x in range(10))<br>    &gt;&gt;&gt; g<br>    &lt;generator object <genexpr> at 0x0000028F8B774200&gt;</genexpr></p><p>通过列表生成式，可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含百万元素的列表，不仅是占用很大的内存空间，如：我们只需要访问前面的几个元素，后面大部分元素所占的空间都是浪费的。因此，没有必要创建完整的列表（节省大量内存空间）。在Python中，我们可以采用生成器：边循环，边计算的机制—&gt;generator<br>10 args and<em>kwargs<br>用args和</em>kwargs只是为了方便并没有强制使用它们.<br>当你不确定你的函数里将要传递多少参数时你可以用<em>args.例如,它可以传递任意数量的参数:<br>    &gt;&gt;&gt; def print_everything(</em>args):<br>    for count, thing in enumerate(args):<br>    … print ‘{0}. {1}’.format(count, thing)<br>    …<br>    &gt;&gt;&gt; print_everything(‘apple’, ‘banana’, ‘cabbage’)</p><pre><code>0. apple1. banana2. cabbage</code></pre><p>相似的,<strong>kwargs允许你使用没有事先定义的参数名:<br>    &gt;&gt;&gt; def table_things(</strong>kwargs):<br>    … for name, value in kwargs.items():<br>    … print ‘{0} = {1}’.format(name, value)<br>    …<br>    &gt;&gt;&gt; table_things(apple = ‘fruit’, cabbage = ‘vegetable’)<br>    cabbage = vegetable<br>    apple = fruit</p><p>你也可以混着用.命名参数首先获得参数值然后所有的其他参数都传递给args和<em>kwargs.命名参数在列表的最前端.例如:<br>def table_things(titlestring, **kwargs)<br>args和kwargs可以同时在函数的定义中,但是args必须在kwargs前面.<br>当调用函数时你也可以用和</em>语法.例如:<br>    &gt;&gt;&gt; def print_three_things(a, b, c):<br>    … print ‘a = {0}, b = {1}, c = {2}’.format(a,b,c)<br>    …<br>    &gt;&gt;&gt; mylist = [‘aardvark’, ‘baboon’, ‘cat’]<br>    &gt;&gt;&gt; print_three_things(*mylist)</p><pre><code>a = aardvark, b = baboon, c = cat</code></pre><p>就像你看到的一样,它可以传递列表(或者元组)的每一项并把它们解包.注意必须与它们在函数里的参数相吻合.当然,你也可以在函数定义或者函数调用时用*.<br><a href="http://stackoverflow.com/questions/3394835/args-and-kwargs" target="_blank" rel="noopener">http://stackoverflow.com/questions/3394835/args-and-kwargs</a><br>11 面向切面编程AOP和装饰器<br>这个AOP一听起来有点懵,同学面阿里的时候就被问懵了…<br>装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量函数中与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。<br>这个问题比较大,推荐: <a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python" target="_blank" rel="noopener">http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python</a><br>中文: <a href="http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html" target="_blank" rel="noopener">http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html</a><br>12 鸭子类型<br>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”<br>我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。<br>比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。<br>又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.<br>鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的设计模式。<br>13 Python中重载<br>引自知乎:<a href="http://www.zhihu.com/question/20053359" target="_blank" rel="noopener">http://www.zhihu.com/question/20053359</a><br>函数重载主要是为了解决两个问题。<br>可变参数类型。<br>可变参数个数。<br>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。<br>好吧，那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。<br>那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。<br>好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。<br>14 新式类和旧式类<br>这个面试官问了,我说了老半天,不知道他问的真正意图是什么.<br>stackoverflow[<a href="https://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python]" target="_blank" rel="noopener">https://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python]</a><br>这篇文章很好的介绍了新式类的特性: <a href="http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html" target="_blank" rel="noopener">http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html</a><br>新式类很早在2.2就出现了,所以旧式类完全是兼容的问题,Python3里的类全部都是新式类.这里有一个MRO问题可以了解下(新式类是广度优先,旧式类是深度优先),&lt;Python核心编程&gt;里讲的也很多.<br>一个旧式类的深度优先的例子<br>    class A():<br>    def foo1(self):<br>    print “A”<br>    class B(A):<br>    def foo2(self):<br>    pass<br>    class C(A):<br>    def foo1(self):<br>    print “C”<br>    class D(B, C):<br>    pass</p><pre><code>d = D()d.foo1()# A</code></pre><p>按照经典类的查找顺序从左到右深度优先的规则，在访问d.foo1()的时候,D这个类是没有的..那么往上查找,先找到B,里面没有,深度优先,访问A,找到了foo1(),所以这时候调用的是A的foo1()，从而导致C重写的foo1()被绕过<br>15 <strong>new</strong>和<strong>init</strong>的区别<br>这个<strong>new</strong>确实很少见到,先做了解吧.<br><strong>new</strong>是一个静态方法,而<strong>init</strong>是一个实例方法.<br><strong>new</strong>方法会返回一个创建的实例,而<strong>init</strong>什么都不返回.<br>只有在<strong>new</strong>返回一个cls的实例时后面的<strong>init</strong>才能被调用.<br>当创建一个新实例时调用<strong>new</strong>,初始化一个实例时用<strong>init</strong>.<br>stackoverflow[<a href="https://stackoverflow.com/questions/674304/why-is-init-always-called-after-new]" target="_blank" rel="noopener">https://stackoverflow.com/questions/674304/why-is-init-always-called-after-new]</a><br>ps: <strong>metaclass</strong>是创建类时起作用.所以我们可以分别使用<strong>metaclass</strong>,<strong>new</strong>和<strong>init</strong>来分别在类创建,实例创建和实例初始化的时候做一些小手脚.<br>16 单例模式<br>​ 单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。<br><strong>new</strong>()在<strong>init</strong>()之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。单例模式是指创建唯一对象，单例模式设计的类只能实例 这个绝对常考啊.绝对要记住1~2个方法,当时面试官是让手写的.<br>1 使用<strong>new</strong>方法<br>    class Singleton(object):<br>    def <strong>new</strong>(cls, <em>args, **kw):<br>    if not hasattr(cls, ‘_instance’):<br>    orig = super(Singleton, cls)<br>    cls._instance = orig.<strong>new</strong>(cls, </em>args, **kw)<br>    return cls._instance</p><pre><code>class MyClass(Singleton):a = 1</code></pre><p>2 共享属性<br>创建实例时把所有实例的<strong>dict</strong>指向同一个字典,这样它们具有相同的属性和方法.<br>    class Borg(object):<br>    _state = {}<br>    def <strong>new</strong>(cls, <em>args, **kw):<br>    ob = super(Borg, cls).<strong>new</strong>(cls, </em>args, **kw)<br>    ob.<strong>dict</strong> = cls._state<br>    return ob</p><pre><code>class MyClass2(Borg):a = 1</code></pre><p>3 装饰器版本<br>    def singleton(cls):<br>    instances = {}<br>    def getinstance(<em>args, **kw):<br>    if cls not in instances:<br>    instances[cls] = cls(</em>args, **kw)<br>    return instances[cls]<br>    return getinstance</p><pre><code>@singletonclass MyClass:...</code></pre><p>4 import方法<br>作为python的模块是天然的单例模式</p><pre><code># mysingleton.pyclass My_Singleton(object):def foo(self):passmy_singleton = My_Singleton()# to usefrom mysingleton import my_singletonmy_singleton.foo()</code></pre><p>单例模式伯乐在线详细解释[<a href="http://python.jobbole.com/87294/]" target="_blank" rel="noopener">http://python.jobbole.com/87294/]</a><br>17 Python中的作用域<br>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。<br>当 Python 遇到一个变量的话他会按照这样的顺序进行搜索：<br>本地作用域（Local）→当前作用域被嵌入的本地作用域（Enclosing locals）→全局/模块作用域（Global）→内置作用域（Built-in）<br>18 GIL线程全局锁<br>线程全局锁(Global Interpreter Lock),即Python为了保证线程安全而采取的独立线程运行的限制,说白了就是一个核只能在同一时间运行一个线程.对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。<br>见Python 最难的问题[<a href="https://www.oschina.net/translate/pythons-hardest-problem]" target="_blank" rel="noopener">https://www.oschina.net/translate/pythons-hardest-problem]</a><br>解决办法就是多进程和下面的协程(协程也只是单CPU,但是能减小切换代价提升性能).<br>19 协程<br>知乎被问到了,呵呵哒,跪了<br>简单点说协程是进程和线程的升级版,进程和线程都面临着内核态和用户态的切换问题而耗费许多切换时间,而协程就是用户自己控制切换的时机,不再需要陷入系统的内核态.<br>Python里最常见的yield就是协程的思想!可以查看第九个问题.<br>20 闭包<br>闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。<br>当一个内嵌函数引用其外部作作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点:<br>必须有一个内嵌函数<br>内嵌函数必须引用外部函数中的变量<br>外部函数的返回值必须是内嵌函数<br>感觉闭包还是有难度的,几句话是说不明白的,还是查查相关资料.<br>重点是函数运行后并不会被撤销,就像16题的instance字典一样,当函数运行完后,instance并不被销毁,而是继续留在内存空间里.这个功能类似类里的类变量,只不过迁移到了函数上.<br>闭包就像个空心球一样,你知道外面和里面,但你不知道中间是什么样.<br>21 lambda函数<br>其实就是一个匿名函数,为什么叫lambda?因为和后面的函数式编程有关.<br>推荐: 知乎[<a href="https://www.zhihu.com/question/20125256]" target="_blank" rel="noopener">https://www.zhihu.com/question/20125256]</a><br>22 Python函数式编程<br>这个需要适当的了解一下吧,毕竟函数式编程在Python中也做了引用.<br>推荐: 酷壳[<a href="https://coolshell.cn/articles/10822.html]" target="_blank" rel="noopener">https://coolshell.cn/articles/10822.html]</a><br>python中函数式编程支持:<br>filter 函数的功能相当于过滤器。调用一个布尔函数bool_func来迭代遍历每个seq中的元素；返回一个使bool_seq返回值为true的元素的序列。<br>    &gt;&gt;&gt;a = [1,2,3,4,5,6,7]<br>    &gt;&gt;&gt;b = filter(lambda x: x &gt; 5, a)<br>    &gt;&gt;&gt;print b<br>    &gt;&gt;&gt;[6,7]</p><p>map函数是对一个序列的每个项依次执行函数，下面是对一个序列每个项都乘以2：<br>    &gt;&gt;&gt; a = map(lambda x:x*2,[1,2,3])<br>    &gt;&gt;&gt; list(a)<br>    [2, 4, 6]</p><p>reduce函数是对一个序列的每个项迭代调用函数，下面是求3的阶乘：<br>    &gt;&gt;&gt; reduce(lambda x,y:x*y,range(1,4))<br>    6</p><p>23 Python里的拷贝<br>引用和copy(),deepcopy()的区别<br>    import copy<br>    a = [1, 2, 3, 4, [‘a’, ‘b’]] #原始对象</p><pre><code>b = a #赋值，传对象的引用c = copy.copy(a) #对象拷贝，浅拷贝d = copy.deepcopy(a) #对象拷贝，深拷贝a.append(5) #修改对象aa[4].append(&apos;c&apos;) #修改对象a中的[&apos;a&apos;, &apos;b&apos;]数组对象print &apos;a = &apos;, aprint &apos;b = &apos;, bprint &apos;c = &apos;, cprint &apos;d = &apos;, d输出结果：a = [1, 2, 3, 4, [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], 5]b = [1, 2, 3, 4, [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], 5]c = [1, 2, 3, 4, [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]]d = [1, 2, 3, 4, [&apos;a&apos;, &apos;b&apos;]]</code></pre><p>24 Python垃圾回收机制<br>Python GC主要使用引用计数（reference counting）来跟踪和回收垃圾。在引用计数的基础上，通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用问题，通过“分代回收”（generation collection）以空间换时间的方法提高垃圾回收效率。<br>1 引用计数<br>PyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少.引用计数为0时，该对象生命就结束了。<br>优点:<br>简单<br>实时性<br>缺点:<br>维护引用计数消耗资源<br>循环引用<br>2 标记-清除机制<br>基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。<br>3 分代技术<br>分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。<br>Python默认定义了三代对象集合，索引数越大，对象存活时间越长。<br>举例： 当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。<br>25 Python的List<br>推荐: <a href="http://www.jianshu.com/p/J4U6rR" target="_blank" rel="noopener">http://www.jianshu.com/p/J4U6rR</a><br>26 Python的is<br>is是对比地址,==是对比值<br>27 read,readline和readlines<br>read 读取整个文件<br>readline 读取下一行,使用生成器方法<br>readlines 读取整个文件到一个迭代器以供我们遍历<br>28 Python2和3的区别<br>推荐：Python 2.7.x 与 Python 3.x 的主要差异[<a href="http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/]" target="_blank" rel="noopener">http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/]</a><br>29 super init<br>super() lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven’t already.<br>Note that the syntax changed in Python 3.0: you can just say super().<strong>init</strong>() instead of super(ChildB, self).<strong>init</strong>() which IMO is quite a bit nicer.<br><a href="http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods" target="_blank" rel="noopener">http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods</a><br>Python2.7中的super方法浅见[<a href="https://blog.csdn.net/mrlevo520/article/details/51712440]" target="_blank" rel="noopener">https://blog.csdn.net/mrlevo520/article/details/51712440]</a><br>30 range and xrange<br>都在循环时使用，xrange内存性能更好。 for i in range(0, 20): for i in xrange(0, 20): What is the difference between range and xrange functions in Python 2.X? range creates a list, so if you do range(1, 10000000) it creates a list in memory with 9999999 elements. xrange is a sequence object that evaluates lazily.<br><a href="http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x" target="_blank" rel="noopener">http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x</a><br>操作系统<br>1 select,poll和epoll<br>其实所有的I/O都是轮询的方法,只不过实现的层面不同罢了.<br>这个问题可能有点深入了,但相信能回答出这个问题是对I/O多路复用有很好的了解了.其中tornado使用的就是epoll的.<br>selec,poll和epoll区别总结[<a href="http://www.cnblogs.com/Anker/p/3265058.html]" target="_blank" rel="noopener">http://www.cnblogs.com/Anker/p/3265058.html]</a><br>基本上select有3个缺点:<br>连接数受限<br>查找配对速度慢<br>数据由内核拷贝到用户态<br>poll改善了第一个缺点<br>epoll改了三个缺点.<br>关于epoll的: <a href="http://www.cnblogs.com/my_life/articles/3968782.html" target="_blank" rel="noopener">http://www.cnblogs.com/my_life/articles/3968782.html</a><br>2 调度算法<br>先来先服务(FCFS, First Come First Serve)<br>短作业优先(SJF, Shortest Job First)<br>最高优先权调度(Priority Scheduling)<br>时间片轮转(RR, Round Robin)<br>多级反馈队列调度(multilevel feedback queue scheduling)<br>常见的调度算法总结:<a href="http://www.jianshu.com/p/6edf8174c1eb" target="_blank" rel="noopener">http://www.jianshu.com/p/6edf8174c1eb</a><br>实时调度算法:<br>最早截至时间优先 EDF<br>最低松弛度优先 LLF<br>3 死锁<br>原因:<br>竞争资源<br>程序推进顺序不当<br>必要条件:<br>互斥条件<br>请求和保持条件<br>不剥夺条件<br>环路等待条件<br>处理死锁基本方法:<br>预防死锁(摒弃除1以外的条件)<br>避免死锁(银行家算法)<br>检测死锁(资源分配图)<br>解除死锁<br>剥夺资源<br>撤销进程<br>死锁概念处理策略详细介绍:<a href="https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/10.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/10.html</a><br>4 程序编译与链接<br>推荐: <a href="http://www.ruanyifeng.com/blog/2014/11/compiler.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/11/compiler.html</a><br>Bulid过程可以分解为4个步骤:预处理(Prepressing), 编译(Compilation)、汇编(Assembly)、链接(Linking)<br>以c语言为例:<br>1 预处理<br>预编译过程主要处理那些源文件中的以“#”开始的预编译指令，主要处理规则有：<br>将所有的“#define”删除，并展开所用的宏定义<br>处理所有条件预编译指令，比如“#if”、“#ifdef”、 “#elif”、“#endif”<br>处理“#include”预编译指令，将被包含的文件插入到该编译指令的位置，注：此过程是递归进行的<br>删除所有注释<br>添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息以及用于编译时产生编译错误或警告时可显示行号<br>保留所有的#pragma编译器指令。<br>2 编译<br>编译过程就是把预处理完的文件进行一系列的词法分析、语法分析、语义分析及优化后生成相应的汇编代码文件。这个过程是整个程序构建的核心部分。<br>3 汇编<br>汇编器是将汇编代码转化成机器可以执行的指令，每一条汇编语句几乎都是一条机器指令。经过编译、链接、汇编输出的文件成为目标文件(Object File)<br>4 链接<br>链接的主要内容就是把各个模块之间相互引用的部分处理好，使各个模块可以正确的拼接。 链接的主要过程包块 地址和空间的分配（Address and Storage Allocation）、符号决议(Symbol Resolution)和重定位(Relocation)等步骤。<br>5 静态链接和动态链接<br>静态链接方法：静态链接的时候，载入代码就会把程序会用到的动态代码或动态代码的地址确定下来 静态库的链接可以使用静态链接，动态链接库也可以使用这种方法链接导入库<br>动态链接方法：使用这种方式的程序并不在一开始就完成动态链接，而是直到真正调用动态库代码时，载入程序才计算(被调用的那部分)动态代码的逻辑地址，然后等到某个时候，程序又需要调用另外某块动态代码时，载入程序又去计算这部分代码的逻辑地址，所以，这种方式使程序初始化时间较短，但运行期间的性能比不上静态链接的程序<br>6 虚拟内存技术<br>虚拟存储器是指具有请求调入功能和置换功能,能从逻辑上对内存容量加以扩充的一种存储系统.<br>7 分页和分段<br>分页: 用户程序的地址空间被划分成若干固定大小的区域，称为“页”，相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配。<br>分段: 将用户程序地址空间分成若干个大小不等的段，每段可以定义一组相对完整的逻辑信息。存储分配时，以段为单位，段与段在内存中可以不相邻接，也实现了离散分配。<br>分页与分段的主要区别<br>页是信息的物理单位,分页是为了实现非连续分配,以便解决内存碎片问题,或者说分页是由于系统管理的需要.段是信息的逻辑单位,它含有一组意义相对完整的信息,分段的目的是为了更好地实现共享,满足用户的需要.<br>页的大小固定,由系统确定,将逻辑地址划分为页号和页内地址是由机器硬件实现的.而段的长度却不固定,决定于用户所编写的程序,通常由编译程序在对源程序进行编译时根据信息的性质来划分.<br>分页的作业地址空间是一维的.分段的地址空间是二维的.<br>8 页面置换算法<br>最佳置换算法OPT:不可能实现<br>先进先出FIFO<br>最近最久未使用算法LRU:最近一段时间里最久没有使用过的页面予以置换.<br>clock算法<br>9 边沿触发和水平触发<br>边缘触发是指每当状态变化时发生一个 io 事件，条件触发是只要满足条件就发生一个 io 事件<br>数据库<br>1 事务<br>数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。 彻底理解数据库事务: <a href="http://www.hollischuang.com/archives/898" target="_blank" rel="noopener">http://www.hollischuang.com/archives/898</a><br>2 数据库索引<br>推荐: <a href="http://tech.meituan.com/mysql-index.html" target="_blank" rel="noopener">http://tech.meituan.com/mysql-index.html</a><br>MySQL索引背后的数据结构及算法原理[<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html]" target="_blank" rel="noopener">http://blog.codinglabs.org/articles/theory-of-mysql-index.html]</a><br>聚集索引,非聚集索引,B-Tree,B+Tree,最左前缀原理<br>3 Redis原理<br>Redis是什么？<br>是一个完全开源免费的key-value内存数据库<br>通常被认为是一个数据结构服务器，主要是因为其有着丰富的数据结构 strings、map、 list、sets、 sorted sets<br>Redis数据库<br>​ 通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作<br>速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万<br>持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)<br>自动操作：对不同数据类型的操作都是自动的，很安全<br>快速的主–从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。<br>Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。<br>Redis缺点<br>是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。<br>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。<br>4 乐观锁和悲观锁<br>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作<br>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。<br>乐观锁与悲观锁的具体区别: <a href="http://www.cnblogs.com/Bob-FD/p/3352216.html" target="_blank" rel="noopener">http://www.cnblogs.com/Bob-FD/p/3352216.html</a><br>5 MVCC<br>​ 全称是Multi-Version Concurrent Control，即多版本并发控制，在MVCC协议下，每个读操作会看到一个一致性的snapshot，并且可以实现非阻塞的读。MVCC允许数据具有多个版本，这个版本可以是时间戳或者是全局递增的事务ID，在同一个时间点，不同的事务看到的数据是不同的。<br>MySQL的innodb引擎是如何实现MVCC的[<a href="https://so.csdn.net/so/search/s.do?q=MySQL]" target="_blank" rel="noopener">https://so.csdn.net/so/search/s.do?q=MySQL]</a><br>innodb会为每一行添加两个字段，分别表示该行创建的版本和删除的版本，填入的是事务的版本号，这个版本号随着事务的创建不断递增。在repeated read的隔离级别（事务的隔离级别请看这篇文章[<a href="https://blog.csdn.net/chosen0ne/article/details/10036775]）下，具体各种数据库操作的实现：" target="_blank" rel="noopener">https://blog.csdn.net/chosen0ne/article/details/10036775]）下，具体各种数据库操作的实现：</a><br>select：满足以下两个条件innodb会返回该行数据：<br>该行的创建版本号小于等于当前版本号，用于保证在select操作之前所有的操作已经执行落地。<br>该行的删除版本号大于当前版本或者为空。删除版本号大于当前版本意味着有一个并发事务将该行删除了。<br>insert：将新插入的行的创建版本号设置为当前系统的版本号。<br>delete：将要删除的行的删除版本号设置为当前系统的版本号。<br>update：不执行原地update，而是转换成insert + delete。将旧行的删除版本号设置为当前版本号，并将新行insert同时设置创建版本号为当前版本号。<br>其中，写操作（insert、delete和update）执行时，需要将系统版本号递增。<br>​ 由于旧数据并不真正的删除，所以必须对这些数据进行清理，innodb会开启一个后台线程执行清理工作，具体的规则是将删除版本号小于当前系统版本的行删除，这个过程叫做purge。<br>通过MVCC很好的实现了事务的隔离性，可以达到repeated read级别，要实现serializable还必须加锁。<br>参考：MVCC浅析[<a href="https://blog.csdn.net/chosen0ne/article/details/18093187]" target="_blank" rel="noopener">https://blog.csdn.net/chosen0ne/article/details/18093187]</a><br>6 MyISAM和InnoDB<br>MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(<em>) 这类的计算是超快无比的。<br>InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。<br>mysql 数据库引擎: <a href="http://www.cnblogs.com/0201zcr/p/5296843.html" target="_blank" rel="noopener">http://www.cnblogs.com/0201zcr/p/5296843.html</a> MySQL存储引擎－－MyISAM与InnoDB区别: <a href="https://segmentfault.com/a/1190000008227211" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008227211</a><br>网络<br>1 三次握手<br>客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。<br>服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。<br>最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。<br>2 四次挥手<br>注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.<br>客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.<br>服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.<br>服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.<br>客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.<br>图解: <a href="http://blog.csdn.net/whuslei/article/details/6667471" target="_blank" rel="noopener">http://blog.csdn.net/whuslei/article/details/6667471</a><br>3 ARP协议<br>地址解析协议(Address Resolution Protocol)，其基本功能为透过目标设备的IP地址，查询目标的MAC地址，以保证通信的顺利进行。它是IPv4网络层必不可少的协议，不过在IPv6中已不再适用，并被邻居发现协议（NDP）所替代。<br>4 urllib和urllib2的区别<br>这个面试官确实问过,当时答的urllib2可以Post而urllib不可以.<br>urllib提供urlencode方法用来GET查询字符串的产生，而urllib2没有。这是为何urllib常和urllib2一起使用的原因。<br>urllib2可以接受一个Request类的实例来设置URL请求的headers，urllib仅可以接受URL。这意味着，你不可以伪装你的User Agent字符串等。<br>5 Post和Get<br>GET和POST有什么区别？及为什么网上的多数答案都是错的[<a href="http://www.cnblogs.com/nankezhishi/archive/2012/06/09/getandpost.html]" target="_blank" rel="noopener">http://www.cnblogs.com/nankezhishi/archive/2012/06/09/getandpost.html]</a><br>知乎回答[<a href="https://www.zhihu.com/question/31640769?rf=37401322]" target="_blank" rel="noopener">https://www.zhihu.com/question/31640769?rf=37401322]</a><br>get: RFC 2616 - Hypertext Transfer Protocol – HTTP/1.1 [<a href="https://tools.ietf.org/html/rfc2616#section-9.3]" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2616#section-9.3]</a><br>post: RFC 2616 - Hypertext Transfer Protocol – HTTP/1.1 [<a href="https://tools.ietf.org/html/rfc2616#section-9.5]" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2616#section-9.5]</a><br>6 Cookie和Session<br>Cookie Session<br>储存位置 客户端 服务器端<br>目的 跟踪会话，也可以保存用户偏好设置或者保存用户名密码等 跟踪会话<br>安全性 不安全 安全<br>session技术是要使用到cookie的，之所以出现session技术，主要是为了安全。<br>7 apache和nginx的区别<br>nginx 相对 apache 的优点：<br>轻量级，同样起web 服务，比apache 占用更少的内存及资源<br>抗并发，nginx 处理请求是异步非阻塞的，支持更多的并发连接，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能<br>配置简洁<br>高度模块化的设计，编写模块相对简单<br>社区活跃<br>apache 相对nginx 的优点：<br>rewrite ，比nginx 的rewrite 强大<br>模块超多，基本想到的都可以找到<br>少bug ，nginx 的bug 相对较多<br>超稳定<br>8 网站用户密码保存<br>明文保存<br>明文hash后保存,如md5<br>MD5+Salt方式,这个salt可以随机<br>知乎使用了Bcrypy(好像)加密<br>9 HTTP和HTTPS<br>状态码 定义<br>1xx 报告 接收到请求，继续进程<br>2xx 成功 步骤成功接收，被理解，并被接受<br>3xx 重定向 为了完成请求,必须采取进一步措施<br>4xx 客户端出错 请求包括错的顺序或不能完成<br>5xx 服务器出错 服务器无法完成显然有效的请求<br>403: Forbidden 404: Not Found<br>HTTPS握手,对称加密,非对称加密,TLS/SSL,RSA<br>10 XSRF和XSS<br>CSRF(Cross-site request forgery)跨站请求伪造<br>XSS(Cross Site Scripting)跨站脚本攻击<br>CSRF重点在请求,XSS重点在脚本<br>11 幂等 Idempotence<br>HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。(注意是副作用)<br>GET <a href="http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。GET" target="_blank" rel="noopener">http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。GET</a> <a href="http://www.news.com/latest-news这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。" target="_blank" rel="noopener">http://www.news.com/latest-news这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。</a><br>DELETE方法用于删除资源，有副作用，但它应该满足幂等性。比如：DELETE <a href="http://www.forum.com/article/4231，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。" target="_blank" rel="noopener">http://www.forum.com/article/4231，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。</a><br>POST所对应的URI并非创建的资源本身，而是资源的接收者。比如：POST <a href="http://www.forum.com/articles的语义是在http://www.forum.com/articles下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。" target="_blank" rel="noopener">http://www.forum.com/articles的语义是在http://www.forum.com/articles下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。</a><br>PUT所对应的URI是要创建或更新的资源本身。比如：PUT <a href="http://www.forum/articles/4231的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。" target="_blank" rel="noopener">http://www.forum/articles/4231的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。</a><br>12 RESTful架构(SOAP,RPC)<br>推荐: <a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/09/restful.html</a><br>13 SOAP<br>SOAP（原为Simple Object Access Protocol的首字母缩写，即简单对象访问协议）是交换数据的一种协议规范，使用在计算机网络Web服务（web service）中，交换带结构信息。SOAP为了简化网页服务器（Web Server）从XML数据库中提取数据时，节省去格式化页面时间，以及不同应用程序之间按照HTTP通信协议，遵从XML格式执行资料互换，使其抽象于语言实现、平台和硬件。<br>14 RPC<br>RPC（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。<br>总结:服务提供的两大流派.传统意义以方法调用为导向通称RPC。为了企业SOA,若干厂商联合推出webservice,制定了wsdl接口定义,传输soap.当互联网时代,臃肿SOA被简化为http+xml/json.但是简化出现各种混乱。以资源为导向,任何操作无非是对资源的增删改查，于是统一的REST出现了.<br>进化的顺序: RPC -&gt; SOAP -&gt; RESTful<br>15 CGI和WSGI<br>CGI是通用网关接口，是连接web服务器和应用程序的接口，用户通过CGI来获取动态数据或文件等。 CGI程序是一个独立的程序，它可以用几乎所有语言来写，包括perl，c，lua，python等等。<br>WSGI, Web Server Gateway Interface，是Python应用程序或框架和Web服务器之间的一种接口，WSGI的其中一个目的就是让用户可以用统一的语言(Python)编写前后端。<br>官方说明：PEP-3333[<a href="https://www.python.org/dev/peps/pep-3333/]" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-3333/]</a><br>16 中间人攻击<br>在GFW里屡见不鲜的,呵呵.<br>中间人攻击（Man-in-the-middle attack，通常缩写为MITM）是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。<br>17 c10k问题<br>所谓c10k问题，指的是服务器同时支持成千上万个客户端的问题，也就是concurrent 10 000 connection（这也是c10k这个名字的由来）。 推荐: <a href="https://my.oschina.net/xianggao/blog/664275" target="_blank" rel="noopener">https://my.oschina.net/xianggao/blog/664275</a><br>18 socket<br>推荐: <a href="http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml</a><br>Socket=Ip address+ TCP/UDP + port<br>19 浏览器缓存<br>推荐: <a href="http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html" target="_blank" rel="noopener">http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html</a><br>304 Not Modified<br>20 HTTP1.0和HTTP1.1<br>推荐: <a href="http://blog.csdn.net/elifefly/article/details/3964766" target="_blank" rel="noopener">http://blog.csdn.net/elifefly/article/details/3964766</a><br>请求头Host字段,一个服务器多个网站<br>长链接<br>文件断点续传<br>身份认证,状态管理,Cache缓存<br>HTTP请求8种方法介绍 HTTP/1.1协议中共定义了8种HTTP请求方法，HTTP请求方法也被叫做“请求动作”，不同的方法规定了不同的操作指定的资源方式。服务端也会根据不同的请求方法做不同的响应。<br>GET<br>GET请求会显示请求指定的资源。一般来说GET方法应该只用于数据的读取，而不应当用于会产生副作用的非幂等的操作中。<br>GET会方法请求指定的页面信息，并返回响应主体，GET被认为是不安全的方法，因为GET方法会被网络蜘蛛等任意的访问。<br>HEAD<br>HEAD方法与GET方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应HEAD请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD方法常被用于客户端查看服务器的性能。<br>POST<br>POST请求会 向指定资源提交数据，请求服务器进行处理，如：表单数据提交、文件上传等，请求数据会被包含在请求体中。POST方法是非幂等的方法，因为这个请求可能会创建新的资源或/和修改现有资源。<br>PUT<br>PUT请求会身向指定资源位置上传其最新内容，PUT方法是幂等的方法。通过该方法客户端可以将指定资源的最新数据传送给服务器取代指定的资源的内容。<br>DELETE<br>DELETE请求用于请求服务器删除所请求URI（统一资源标识符，Uniform Resource Identifier）所标识的资源。DELETE请求后指定资源会被删除，DELETE方法也是幂等的。<br>CONNECT<br>CONNECT方法是HTTP/1.1协议预留的，能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接与非加密的HTTP代理服务器的通信。<br>OPTIONS<br>OPTIONS请求与HEAD类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用’</em>’来代替资源名称，向服务器发送OPTIONS请求，可以测试服务器功能是否正常。JavaScript的XMLHttpRequest对象进行CORS跨域资源共享时，就是使用OPTIONS方法发送嗅探请求，以判断是否有对指定资源的访问权限。 允许<br>TRACE<br>TRACE请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。<br>HTTP/1.1之后增加的方法<br>在HTTP/1.1标准制定之后，又陆续扩展了一些方法。其中使用中较多的是 PATCH 方法：<br>PATCH<br>PATCH方法出现的较晚，它在2010年的RFC 5789标准中被定义。PATCH请求与PUT请求类似，同样用于资源的更新。二者有以下两点不同：<br>但PATCH一般用于资源的部分更新，而PUT一般用于资源的整体更新。 当资源不存在时，PATCH会创建一个新的资源，而PUT只会对已在资源进行更新。<br>21 Ajax<br>AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术。<br>*NIX<br>unix进程间通信方式(IPC)<br>管道（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。<br>命名管道（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。<br>信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。<br>消息（Message）队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺<br>共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。<br>内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。<br>信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。<br>套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。<br>数据结构<br>1 红黑树<br>红黑树与AVL的比较：<br>AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多；<br>红黑是用非严格的平衡来换取增删节点时候旋转次数的降低；<br>所以简单说，如果你的应用中，搜索的次数远远大于插入和删除，那么选择AVL，如果搜索，插入删除次数几乎差不多，应该选择RB。<br>红黑树详解: <a href="https://xieguanglei.github.io/blog/post/red-black-tree.html" target="_blank" rel="noopener">https://xieguanglei.github.io/blog/post/red-black-tree.html</a><br>教你透彻了解红黑树: <a href="https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md" target="_blank" rel="noopener">https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md</a><br>编程题<br>1 台阶问题/斐波那契<br>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。<br>    fib = lambda n: n if n &lt;= 2 else fib(n - 1) + fib(n - 2)</p><p>第二种记忆方法<br>    def memo(func):<br>    cache = {}<br>    def wrap(<em>args):<br>    if args not in cache:<br>    cache[args] = func(</em>args)<br>    return cache[args]<br>    return wrap</p><pre><code>@memodef fib(i):if i &lt; 2:return 1return fib(i-1) + fib(i-2)</code></pre><p>第三种方法<br>    def fib(n):<br>    a, b = 0, 1<br>    for _ in xrange(n):<br>    a, b = b, a + b<br>    return b</p><p>2 变态台阶问题<br>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。<br>    fib = lambda n: n if n &lt; 2 else 2 * fib(n - 1)</p><p>3 矩形覆盖<br>我们可以用21的小矩形横着或者竖着去覆盖更大的矩形。请问用n个21的小矩形无重叠地覆盖一个2<em>n的大矩形，总共有多少种方法？<br>第2n个矩形的覆盖方法等于第2(n-1)加上第2</em>(n-2)的方法。<br>    f = lambda n: 1 if n &lt; 2 else f(n - 1) + f(n - 2)</p><p>4 杨氏矩阵查找<br>在一个m行n列二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br>使用Step-wise线性搜索。<br>    def get_value(l, r, c):<br>    return l[r][c]</p><pre><code>def find(l, x):m = len(l) - 1n = len(l[0]) - 1r = 0c = nwhile c &gt;= 0 and r &lt;= m:value = get_value(l, r, c)if value == x:return Trueelif value &gt; x:c = c - 1elif value &lt; x:r = r + 1return False</code></pre><p>5 去除列表中的重复元素<br>用集合<br>    list(set(l))</p><p>用字典<br>    l1 = [‘b’,’c’,’d’,’b’,’c’,’a’,’a’]<br>    l2 = {}.fromkeys(l1).keys()<br>    print l2</p><p>用字典并保持顺序<br>    l1 = [‘b’,’c’,’d’,’b’,’c’,’a’,’a’]<br>    l2 = list(set(l1))<br>    l2.sort(key=l1.index)<br>    print l2</p><p>列表推导式<br>    l1 = [‘b’,’c’,’d’,’b’,’c’,’a’,’a’]<br>    l2 = []<br>    [l2.append(i) for i in l1 if not i in l2]</p><p>sorted排序并且用列表推导式.<br>l = [‘b’,’c’,’d’,’b’,’c’,’a’,’a’] [single.append(i) for i in sorted(l) if i not in single] print single<br>6 链表成对调换<br>1-&gt;2-&gt;3-&gt;4转换成2-&gt;1-&gt;4-&gt;3.<br>    class ListNode:<br>    def <strong>init</strong>(self, x):<br>    self.val = x<br>    self.next = None</p><pre><code>class Solution:# @param a ListNode# @return a ListNodedef swapPairs(self, head):if head != None and head.next != None:next = head.nexthead.next = self.swapPairs(next.next)next.next = headreturn nextreturn head</code></pre><p>7 创建字典的方法<br>1 直接创建<br>    dict = {‘name’:’earth’, ‘port’:’80’}</p><p>2 工厂方法<br>    items=[(‘name’,’earth’),(‘port’,’80’)]<br>    dict2=dict(items)<br>    dict1=dict(([‘name’,’earth’],[‘port’,’80’]))</p><p>3 fromkeys()方法<br>    dict1={}.fromkeys((‘x’,’y’),-1)<br>    dict={‘x’:-1,’y’:-1}<br>    dict2={}.fromkeys((‘x’,’y’))<br>    dict2={‘x’:None, ‘y’:None}</p><p>8 合并两个有序列表<br>知乎远程面试要求编程<br>尾递归<br>    def _recursion_merge_sort2(l1, l2, tmp):<br>    if len(l1) == 0 or len(l2) == 0:<br>    tmp.extend(l1)<br>    tmp.extend(l2)<br>    return tmp<br>    else:<br>    if l1[0] &lt; l2[0]:<br>    tmp.append(l1[0])<br>    del l1[0]<br>    else:<br>    tmp.append(l2[0])<br>    del l2[0]<br>    return _recursion_merge_sort2(l1, l2, tmp)</p><pre><code>def recursion_merge_sort2(l1, l2):return _recursion_merge_sort2(l1, l2, [])</code></pre><p>循环算法<br>思路：<br>定义一个新的空列表<br>比较两个列表的首个元素<br>小的就插入到新列表里<br>把已经插入新列表的元素从旧列表删除<br>直到两个旧列表有一个为空<br>再把旧列表加到新列表后面<br>    def loop_merge_sort(l1, l2):<br>    tmp = []<br>    while len(l1) &gt; 0 and len(l2) &gt; 0:<br>    if l1[0] &lt; l2[0]:<br>    tmp.append(l1[0])<br>    del l1[0]<br>    else:<br>    tmp.append(l2[0])<br>    del l2[0]<br>    tmp.extend(l1)<br>    tmp.extend(l2)<br>    return tmp</p><p>pop弹出<br>    a = [1,2,3,7]<br>    b = [3,4,5]</p><pre><code>def merge_sortedlist(a,b):c = []while a and b:if a[0] &gt;= b[0]:c.append(b.pop(0))else:c.append(a.pop(0))while a:c.append(a.pop(0))while b:c.append(b.pop(0))return cprint merge_sortedlist(a,b)</code></pre><p>9 交叉链表求交点<br>其实思想可以按照从尾开始比较两个链表，如果相交，则从尾开始必然一致，只要从尾开始比较，直至不一致的地方即为交叉点，如图所示</p><pre><code># 使用a,b两个list来模拟链表，可以看出交叉点是 7这个节点a = [1,2,3,7,9,1,5]b = [4,5,7,9,1,5]for i in range(1,min(len(a),len(b))):if i==1 and (a[-1] != b[-1]):print &quot;No&quot;breakelse:if a[-i] != b[-i]:print &quot;交叉节点：&quot;,a[-i+1]breakelse:pass</code></pre><p>另外一种比较正规的方法，构造链表类<br>    class ListNode:<br>    def <strong>init</strong>(self, x):<br>    self.val = x<br>    self.next = None<br>    def node(l1, l2):<br>    length1, lenth2 = 0, 0</p><pre><code># 求两个链表长度while l1.next:l1 = l1.nextlength1 += 1while l2.next:l2 = l2.nextlength2 += 1# 长的链表先走if length1 &gt; lenth2:for _ in range(length1 - length2):l1 = l1.nextelse:for _ in range(length2 - length1):l2 = l2.nextwhile l1 and l2:if l1.next == l2.next:return l1.nextelse:l1 = l1.nextl2 = l2.next</code></pre><p>修改了一下:</p><pre><code>#coding:utf-8class ListNode:def __init__(self, x):self.val = xself.next = Nonedef node(l1, l2):length1, length2 = 0, 0# 求两个链表长度while l1.next:l1 = l1.next#尾节点length1 += 1while l2.next:l2 = l2.next#尾节点length2 += 1#如果相交if l1.next == l2.next:# 长的链表先走if length1 &gt; length2:for _ in range(length1 - length2):l1 = l1.nextreturn l1#返回交点else:for _ in range(length2 - length1):l2 = l2.nextreturn l2#返回交点# 如果不相交else:return</code></pre><p>思路: <a href="http://humaoli.blog.163.com/blog/static/13346651820141125102125995/" target="_blank" rel="noopener">http://humaoli.blog.163.com/blog/static/13346651820141125102125995/</a><br>10 二分查找</p><p>#coding:utf-8<br>    def binary_search(list,item):<br>    low = 0<br>    high = len(list)-1<br>    while low&lt;=high:<br>    mid = (low+high)/2<br>    guess = list[mid]<br>    if guess&gt;item:<br>    high = mid-1<br>    elif guess&lt;item:<br>    low = mid+1<br>    else:<br>    return mid<br>    return None<br>    mylist = [1,3,5,7,9]<br>    print binary_search(mylist,3)</p><p>参考: <a href="http://blog.csdn.net/u013205877/article/details/76411718" target="_blank" rel="noopener">http://blog.csdn.net/u013205877/article/details/76411718</a><br><br>11 快排<br><br>coding:utf-8<br><br>def quicksort(list):<br><br><br>    if len(list)&lt;2:<br>    return list<br>    else:<br>    midpivot = list[0]<br>    lessbeforemidpivot = [i for i in list[1:] if i&lt;=midpivot]<br>    biggerafterpivot = [i for i in list[1:] if i &gt; midpivot]<br>    finallylist = quicksort(lessbeforemidpivot)+[midpivot]+quicksort(biggerafterpivot)<br>    return finallylist</p><p><br>print quicksort([2,4,6,7,1,2,5])<br><br>更多排序问题可见：数据结构与算法-排序篇-Python描述[<a href="https://blog.csdn.net/mrlevo520/article/details/77829204]" target="_blank" rel="noopener">https://blog.csdn.net/mrlevo520/article/details/77829204]</a><br>12 找零问题</p><pre><code>#coding:utf-8#values是硬币的面值values = [ 25, 21, 10, 5, 1]#valuesCounts 钱币对应的种类数#money 找出来的总钱数#coinsUsed 对应于目前钱币总数i所使用的硬币数目def coinChange(values,valuesCounts,money,coinsUsed):#遍历出从1到money所有的钱数可能for cents in range(1,money+1):minCoins = cents#把所有的硬币面值遍历出来和钱数做对比for kind in range(0,valuesCounts):if (values[kind] &lt;= cents):temp = coinsUsed[cents - values[kind]] +1if (temp &lt; minCoins):minCoins = tempcoinsUsed[cents] = minCoinsprint (&apos;面值:{0}的最少硬币使用数为:{1}&apos;.format(cents, coinsUsed[cents]))</code></pre><p>思路: <a href="http://blog.csdn.net/wdxin1322/article/details/9501163" target="_blank" rel="noopener">http://blog.csdn.net/wdxin1322/article/details/9501163</a><br>方法: <a href="http://www.cnblogs.com/ChenxofHit/archive/2011/03/18/1988431.html" target="_blank" rel="noopener">http://www.cnblogs.com/ChenxofHit/archive/2011/03/18/1988431.html</a><br>13 广度遍历和深度遍历二叉树<br>给定一个数组，构建二叉树，并且按层次打印这个二叉树<br><br>14 二叉树节点<br><br>class Node(object):<br><br><br>    def <strong>init</strong>(self, data, left=None, right=None):<br>    self.data = data<br>    self.left = left<br>    self.right = right</p><p><br>tree = Node(1, Node(3, Node(7, Node(0)), Node(6)), Node(2, Node(5), Node(4)))<br><br><br>15 层次遍历<br><br>def lookup(root):<br><br><br>    row = [root]<br>    while row:<br>    print(row)<br>    row = [kid for item in row for kid in (item.left, item.right) if kid]</p><p><br><br>16 深度遍历<br><br>def deep(root):<br><br><br>    if not root:<br>    return<br>    print root.data<br>    deep(root.left)<br>    deep(root.right)</p><p><br>if name == ‘<strong>main</strong>‘:<br><br><br>    lookup(tree)<br>    deep(tree)</p><p><br>17 前中后序遍历<br>深度遍历改变顺序就OK了</p><pre><code>#coding:utf-8#二叉树的遍历#简单的二叉树节点类class Node(object):def __init__(self,value,left,right):self.value = valueself.left = leftself.right = right#中序遍历:遍历左子树,访问当前节点,遍历右子树def mid_travelsal(root):if root.left is None:mid_travelsal(root.left)#访问当前节点print(root.value)if root.right is not None:mid_travelsal(root.right)#前序遍历:访问当前节点,遍历左子树,遍历右子树def pre_travelsal(root):print (root.value)if root.left is not None:pre_travelsal(root.left)if root.right is not None:pre_travelsal(root.right)#后续遍历:遍历左子树,遍历右子树,访问当前节点def post_trvelsal(root):if root.left is not None:post_trvelsal(root.left)if root.right is not None:post_trvelsal(root.right)print (root.value)</code></pre><p><br>18 求最大树深<br><br>def maxDepth(root):<br><br><br>    if not root:<br>    return 0<br>    return max(maxDepth(root.left), maxDepth(root.right)) + 1</p><p><br><br>19 求两棵树是否相同<br><br>def isSameTree(p, q):<br><br><br>    if p == None and q == None:<br>    return True<br>    elif p and q :<br>    return p.val == q.val and isSameTree(p.left,q.left) and isSameTree(p.right,q.right)<br>    else :<br>    return False</p><p><br>20 前序中序求后序<br>推荐: <a href="http://blog.csdn.net/hinyunsin/article/details/6315502" target="_blank" rel="noopener">http://blog.csdn.net/hinyunsin/article/details/6315502</a><br>    def rebuild(pre, center):<br>    if not pre:<br>    return<br>    cur = Node(pre[0])<br>    index = center.index(pre[0])<br>    cur.left = rebuild(pre[1:index + 1], center[:index])<br>    cur.right = rebuild(pre[index + 1:], center[index + 1:])<br>    return cur</p><pre><code>def deep(root):if not root:returndeep(root.left)deep(root.right)print root.data</code></pre><p><br>21 单链表逆置<br><br>class Node(object):<br><br><br>    def <strong>init</strong>(self, data=None, next=None):<br>    self.data = data<br>    self.next = next</p><p><br>link = Node(1, Node(2, Node(3, Node(4, Node(5, Node(6, Node(7, Node(8, Node(9)))))))))<br><br>def rev(link):<br><br><br>    pre = link<br>    cur = link.next<br>    pre.next = None<br>    while cur:<br>    tmp = cur.next<br>    cur.next = pre<br>    pre = cur<br>    cur = tmp<br>    return pre</p><p><br>root = rev(link)<br>while root:<br><br><br>    print root.data<br>    root = root.next</p><p><br>思路: <a href="http://blog.csdn.net/feliciafay/article/details/6841115" target="_blank" rel="noopener">http://blog.csdn.net/feliciafay/article/details/6841115</a><br>方法: <a href="http://www.xuebuyuan.com/2066385.html?mobile=1" target="_blank" rel="noopener">http://www.xuebuyuan.com/2066385.html?mobile=1</a><br><br>22 两个字符串是否是变位词<br><br>class Anagram:<br><br><br>    “””<br>    @:param s1: The first string<br>    @:param s2: The second string<br>    @:return true or false<br>    “””<br>    def Solution1(s1,s2):<br>    alist = list(s2)</p><pre><code>pos1 = 0stillOK = Truewhile pos1 &lt; len(s1) and stillOK:pos2 = 0found = Falsewhile pos2 &lt; len(alist) and not found:if s1[pos1] == alist[pos2]:found = Trueelse:pos2 = pos2 + 1if found:alist[pos2] = Noneelse:stillOK = Falsepos1 = pos1 + 1return stillOKprint(Solution1(&apos;abcd&apos;,&apos;dcba&apos;))def Solution2(s1,s2):alist1 = list(s1)alist2 = list(s2)alist1.sort()alist2.sort()</code></pre><p><br><br>    pos = 0<br>    matches = True</p><pre><code>while pos &lt; len(s1) and matches:if alist1[pos] == alist2[pos]:pos = pos + 1else:matches = Falsereturn matchesprint(Solution2(&apos;abcde&apos;,&apos;edcbg&apos;))def Solution3(s1,s2):c1 = [0]*26c2 = [0]*26for i in range(len(s1)):pos = ord(s1[i])-ord(&apos;a&apos;)c1[pos] = c1[pos] + 1for i in range(len(s2)):pos = ord(s2[i])-ord(&apos;a&apos;)c2[pos] = c2[pos] + 1j = 0stillOK = Truewhile j&lt;26 and stillOK:if c1[j] == c2[j]:j = j + 1else:stillOK = Falsereturn stillOKprint(Solution3(&apos;apple&apos;,&apos;pleap&apos;))</code></pre><p><br>23 动态规划问题<br>可参考：动态规划(DP)的整理-Python描述[<a href="https://blog.csdn.net/mrlevo520/article/details/75676160]" target="_blank" rel="noopener">https://blog.csdn.net/mrlevo520/article/details/75676160]</a><br>原文出处interview_python，本文在原文基础上进行进一步整理</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 面试题 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
