<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java安装和环境配置</title>
      <link href="/2018/11/30/java/"/>
      <url>/2018/11/30/java/</url>
      <content type="html"><![CDATA[<p>搭建Java开发环境，第一步我们就需要安装JDK。大家可以在ORACLE官方网站上下载，下载路径：</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p>不同平台和系统的安装文件是不一样的，根据自己电脑的情况选择合适的版本进行安装。查看计算机版本的方法：右击<code>计算机</code>，选择<code>属性</code><br>。查看系统的类型是64位，选择下载的 JDK 版本也得是64位的。</p><h1 id="windows-系统下-Java-环境的配置"><a href="/2018/11/30/java/#windows-系统下-Java-环境的配置" class="headerlink" title="windows 系统下 Java 环境的配置"></a>windows 系统下 Java 环境的配置</h1><h2 id="第一步：安装JDK"><a href="/2018/11/30/java/#第一步：安装JDK" class="headerlink" title="第一步：安装JDK"></a>第一步：安装JDK</h2><p>在 window 系统下，下载好JDK后，点开安装程序，按照指示安装就可以了。</p><p>验证 JDK 是否安装成功：</p><ol><li><p>点击<code>开始</code></p></li><li><p>在<code>搜索</code>中输入 cmd，按<code>回车</code>，打开 dos 命令行</p></li><li><p>输入命令<code>java -version</code>，按回车</p></li></ol><p>如果显示了 Java 的版本，那么表示 JDK 安装成功了。</p><h2 id="第二步：配置环境变量"><a href="/2018/11/30/java/#第二步：配置环境变量" class="headerlink" title="第二步：配置环境变量"></a>第二步：配置环境变量</h2><p>当我们安装好JDK后，就要配置环境变量了。一般来说，我们会配置这三个环境变量：</p><ul><li>JAVA_HOME 配置 JDK 安装路径</li><li>PATH 配置 JDK 命令文件的位置</li><li>CLASSPATH 配置类库文件的位置</li></ul><p>步骤一：右击<code>计算机</code>，选择<code>属性</code></p><p>步骤二：打开<code>高级系统设置</code></p><p>步骤三：选择<code>高级</code></p><p>步骤四：选择<code>环境变量</code></p><p>步骤五：在<code>系统变量</code> 里配置JAVA_HOME</p><ol><li><p>点击<code>系统变量</code>下的<code>新建</code></p></li><li><p><code>变量名</code>填<code>JAVA_HOME</code></p></li><li><p><code>变量值</code>填JDK的安装路径（若是默认安装路径，打开计算机-&gt;C盘-&gt;Program Files-&gt;Java-&gt;jdk1.8.0_191(或者其他版本)，拷贝路径就可以了）</p></li><li><p>点击确定</p></li></ol><p>步骤六：在<code>系统变量</code>里配置PATH变量</p><ol><li><p><code>系统变量</code>默认里有Path变量，找到它，点击 <code>编辑</code></p></li><li><p>在<code>变量值</code>最前面添加指定jdk命令文件的位置（jdk1.8.0_191-&gt;bin目录，拷贝路径）</p></li><li><p>将路径添加到Path<code>变量值</code>前面用<code>;</code>和后面的路径隔开</p></li></ol><p>步骤七:配置CLASSPATH变量</p><ol><li><p>点击<code>系统变量</code>下的<code>新建</code></p></li><li><p><code>变量名</code>填<code>CLASSPATH</code></p></li><li><p><code>变量值</code>填JAVA的class路径与lib库路径（若是默认安装路径，打开计算机-&gt;C盘-&gt;Program Files-&gt;Java-&gt;jdk1.8.0_191(或者其他版本)-&gt;lib目录，拷贝路径就可以了）</p></li><li><p>点击确定</p></li></ol><h2 id="第三步：验证环境配置是否正确"><a href="/2018/11/30/java/#第三步：验证环境配置是否正确" class="headerlink" title="第三步：验证环境配置是否正确"></a>第三步：验证环境配置是否正确</h2><ol><li><p>点击<code>开始</code></p></li><li><p>在<code>搜索</code>中输入 cmd，按<code>回车</code>，打开 dos 命令行</p></li><li><p>输入命令<code>java</code>，按<code>回车</code></p></li><li><p>下面会出现一系列的命令行，这些提示是Java工具的用法和作用</p></li><li><p>再执行一个命令，输入<code>javac</code>，按<code>回车</code></p></li><li><p>如果以上均给出提示，则开发环境配置是没有问题的</p></li></ol>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为什么编程语言以及数据库要从1970年1月1日开始计算时间</title>
      <link href="/2018/11/18/time1970/"/>
      <url>/2018/11/18/time1970/</url>
      <content type="html"><![CDATA[<p>话不多说直接上答案，看完这篇文章你应该就懂了。<br>注：这个答案也是某博主不断产生疑问层层挖掘出来的。<br><a href="https://en.wikipedia.org/wiki/Unix_time" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Unix_time</a></p>]]></content>
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go官网资源</title>
      <link href="/2018/10/30/golang/"/>
      <url>/2018/10/30/golang/</url>
      <content type="html"><![CDATA[<h1 id="Go语言中文官网镜像及资源"><a href="/2018/10/30/golang/#Go语言中文官网镜像及资源" class="headerlink" title="Go语言中文官网镜像及资源"></a>Go语言中文官网镜像及资源</h1><p><a href="https://golang.google.cn" target="_blank" rel="noopener">Go中国官网</a><br><a href="http://www.slowbirdgogogo.com" target="_blank" rel="noopener">笨鸟学GO</a></p><p><a href="https://tour.go-zh.org/" target="_blank" rel="noopener">Go 语言之旅</a><br><a href="https://go-zh.org/" target="_blank" rel="noopener">Go 编程语言</a><br><a href="https://github.com/golang-china" target="_blank" rel="noopener">Go语言文档翻译(QQ群:368836416)</a></p><h1 id="Download-Go"><a href="/2018/10/30/golang/#Download-Go" class="headerlink" title="Download Go"></a>Download Go</h1><h2 id="Microsoft-Windows"><a href="/2018/10/30/golang/#Microsoft-Windows" class="headerlink" title="Microsoft Windows:"></a>Microsoft Windows:</h2><ul><li><a href="http://image.markhoo.com/go1.11.1.windows-amd64.msi" target="_blank" rel="noopener">go1.11.1.windows-amd64.msi</a></li><li><a href="http://image.markhoo.com/go1.10.4.windows-amd64.msi" target="_blank" rel="noopener">go1.10.4.windows-amd64.msi</a></li><li><a href="http://image.markhoo.com/go1.9.7.darwin-amd64.pkg" target="_blank" rel="noopener">go1.9.7.windows-amd64.msi</a></li></ul><h2 id="Apple-macOS"><a href="/2018/10/30/golang/#Apple-macOS" class="headerlink" title="Apple macOS:"></a>Apple macOS:</h2><ul><li><a href="http://image.markhoo.com/go1.11.1.darwin-amd64.pkg" target="_blank" rel="noopener">go1.11.1.darwin-amd64.pkg</a></li><li><a href="http://image.markhoo.com/go1.10.4.darwin-amd64.pkg" target="_blank" rel="noopener">go1.10.4.darwin-amd64.pkg</a></li><li><a href="http://image.markhoo.com/go1.9.7.darwin-amd64.pkg" target="_blank" rel="noopener">go1.9.7.darwin-amd64.pkg</a></li></ul><h2 id="Linux"><a href="/2018/10/30/golang/#Linux" class="headerlink" title="Linux:"></a>Linux:</h2><ul><li><a href="http://image.markhoo.com/go1.11.1.linux-amd64.tar.gz" target="_blank" rel="noopener">go1.11.1.linux-amd64.tar.gz</a></li><li><a href="http://image.markhoo.com/go1.10.4.linux-amd64.tar.gz" target="_blank" rel="noopener">go1.10.4.linux-amd64.tar.gz</a></li><li><a href="http://image.markhoo.com/go1.9.7.linux-amd64.tar.gz" target="_blank" rel="noopener">go1.9.7.linux-amd64.tar.gz</a></li></ul><h2 id="Source"><a href="/2018/10/30/golang/#Source" class="headerlink" title="Source:"></a>Source:</h2><ul><li><a href="http://image.markhoo.com/go1.11.1.src.tar.gz" target="_blank" rel="noopener">go1.11.1.src.tar.gz</a></li><li><a href="http://image.markhoo.com/go1.10.4.src.tar.gz" target="_blank" rel="noopener">go1.10.4.src.tar.gz</a></li><li><a href="http://image.markhoo.com/go1.9.7.src.tar.gz" target="_blank" rel="noopener">go1.9.7.src.tar.gz</a></li></ul>]]></content>
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gin使用方法</title>
      <link href="/2018/10/14/gogin/"/>
      <url>/2018/10/14/gogin/</url>
      <content type="html"><![CDATA[<h1 id="安装gin"><a href="/2018/10/14/gogin/#安装gin" class="headerlink" title="安装gin"></a>安装gin</h1><p>直接使用 go get github.com/gin-gonic/gin 即可。</p><p>官方README中提供了非常多的例子。例如最简单的实例代码:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> r := gin.Default()</span><br><span class="line"> r.GET(<span class="string">"/ping"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">  <span class="string">"message"</span>: <span class="string">"pong"</span>,</span><br><span class="line"> &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"> r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="路由"><a href="/2018/10/14/gogin/#路由" class="headerlink" title="路由"></a>路由</h1><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">router := gin.Default() <span class="comment">// 默认是带有Logger和Recovery中间件的</span></span><br><span class="line">router := gin.New() <span class="comment">// 不带中间件的路由</span></span><br><span class="line">router.<span class="keyword">Use</span>(gin.Logger()) <span class="comment">// 可以使用这种方式来指明中间件</span></span><br><span class="line">router.<span class="built_in">GET</span>(<span class="string">"/test"</span>, MyMiddleware(), testEndpoint) <span class="comment">// 也可以用这种方式给指定路由添加中间件</span></span><br><span class="line">router.<span class="built_in">GET</span>(<span class="string">"/someGet"</span>, getting) <span class="comment">// 支持所有Restful的操作</span></span><br><span class="line"><span class="comment">// 带参数的路由</span></span><br><span class="line">router.<span class="built_in">GET</span>(<span class="string">"/user/:name"</span>, func(c *gin.Context) &#123;</span><br><span class="line"> name := c.Param(<span class="string">"name"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 参数可选/通配符功能</span></span><br><span class="line">router.<span class="built_in">GET</span>(<span class="string">"/user/:name/*action"</span>, ...)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 路由分组</span></span><br><span class="line">v1 := router.<span class="built_in">Group</span>(<span class="string">"/v1"</span>)</span><br><span class="line">&#123;</span><br><span class="line">  v1.<span class="keyword">POST</span>(<span class="string">"/login"</span>, loginEndpoint)</span><br><span class="line">  v1.<span class="keyword">POST</span>(<span class="string">"/submit"</span>, submitEndpoint)</span><br><span class="line">&#125;</span><br><span class="line">v1.<span class="keyword">Use</span>(AuthRequired()) &#123;&#125; <span class="comment">// 路由分组单独指定中间件</span></span><br></pre></td></tr></table></figure><h1 id="请求与响应"><a href="/2018/10/14/gogin/#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h1><p>请求<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取路由参数，假设有路由为"/user/:name"</span></span><br><span class="line"><span class="selector-tag">c</span><span class="selector-class">.Params</span><span class="selector-class">.ByName</span>(<span class="string">"name"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取query参数</span></span><br><span class="line"><span class="selector-tag">c</span><span class="selector-class">.Query</span>(<span class="string">"name"</span>)</span><br><span class="line"><span class="selector-tag">c</span><span class="selector-class">.DefaultQuery</span>(<span class="string">"name"</span>, <span class="string">"Guest"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取表单参数</span></span><br><span class="line"><span class="selector-tag">c</span><span class="selector-class">.PostForm</span>(<span class="string">"name"</span>)</span><br><span class="line"><span class="selector-tag">c</span><span class="selector-class">.DefaultPostForm</span>(<span class="string">"name"</span>)</span><br></pre></td></tr></table></figure></p><h1 id="参数绑定"><a href="/2018/10/14/gogin/#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h1><p>请求验证</p><p>响应</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回简单的字符串</span></span><br><span class="line"><span class="built_in">c</span>.<span class="type">String</span>(<span class="number">200</span>, <span class="string">"pong"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 返回JSON数据</span></span><br><span class="line"><span class="built_in">c</span>.<span class="type">JSON</span>(<span class="number">200</span>, gin.<span class="type">H</span>&#123;</span><br><span class="line">  <span class="string">"message"</span>: <span class="string">"pong"</span>,</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 重定向</span></span><br><span class="line"><span class="built_in">c</span>.<span class="type">Redirect</span>(http.<span class="type">StatusMovedPermanently</span>, <span class="string">"https://google.com"</span>)</span><br></pre></td></tr></table></figure><h1 id="中间件"><a href="/2018/10/14/gogin/#中间件" class="headerlink" title="中间件"></a>中间件</h1><p>自定义中间件</p><p>BasicAuth中间件</p><p>异步协程</p><p>gin可以借助协程来实现异步任务，但是这时候得手动copy上下文，并且只能是可读取的。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.GET(<span class="string">"/async"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span> &#123;</span></span><br><span class="line">  cCp := c.Copy()</span><br><span class="line">  go <span class="function"><span class="keyword">func</span><span class="params">()</span> &#123;</span></span><br><span class="line">    time.<span class="built_in">Sleep</span>(<span class="number">5</span> * time.Second)</span><br><span class="line">    <span class="built_in">log</span>.Println(<span class="string">"Done! in path"</span> + cCp.Request.URL.Path)</span><br><span class="line">  &#125;()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go关键字和预定义标识符</title>
      <link href="/2018/10/14/go/"/>
      <url>/2018/10/14/go/</url>
      <content type="html"><![CDATA[<h1 id="Go-语言中的关键字-25个"><a href="/2018/10/14/go/#Go-语言中的关键字-25个" class="headerlink" title="Go 语言中的关键字(25个)"></a>Go 语言中的关键字(25个)</h1><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>退出循环</td></tr><tr><td>default</td><td>选择结构默认项（switch、select）</td></tr><tr><td>func</td><td>定义函数</td></tr><tr><td>interface</td><td>定义接口</td></tr><tr><td>select</td><td>channel</td></tr><tr><td>case</td><td>选择结构标签</td></tr><tr><td>chan</td><td>定义channel</td></tr><tr><td>const</td><td>常量</td></tr><tr><td>continue</td><td>跳过本次循环</td></tr><tr><td>defer</td><td>延迟执行内容（收尾工作）</td></tr><tr><td>go</td><td>并发执行</td></tr><tr><td>map</td><td>map类型</td></tr><tr><td>struct</td><td>定义结构体</td></tr><tr><td>else</td><td>选择结构</td></tr><tr><td>goto</td><td>跳转语句</td></tr><tr><td>package</td><td>包</td></tr><tr><td>switch</td><td>选择结构</td></tr><tr><td>fallthrough</td><td>流程控制</td></tr><tr><td>if</td><td>选择结构</td></tr><tr><td>range</td><td>从slice、map等结构中取元素</td></tr><tr><td>type</td><td>定义类型</td></tr><tr><td>for</td><td>循环</td></tr><tr><td>import</td><td>导入包</td></tr><tr><td>return</td><td>返回</td></tr><tr><td>var</td><td>定义变量</td></tr></tbody></table><h1 id="预定义标识符-36个"><a href="/2018/10/14/go/#预定义标识符-36个" class="headerlink" title="预定义标识符(36个)"></a>预定义标识符(36个)</h1><table><thead><tr><th>-</th><th>-</th><th>-</th><th>-</th><th>-</th><th>-</th></tr></thead><tbody><tr><td>append</td><td>bool</td><td>byte</td><td>cap</td><td>close</td><td>complex</td></tr><tr><td>complex64</td><td>complex128</td><td>uint16</td><td>copy</td><td>false</td><td>float32</td></tr><tr><td>float64</td><td>imag</td><td>int</td><td>int8</td><td>int16</td><td>uint32</td></tr><tr><td>int32</td><td>int64</td><td>iota</td><td>len</td><td>make</td><td>new    </td></tr><tr><td>nil</td><td>panic</td><td>uint64</td><td>print</td><td>println</td><td>real</td></tr><tr><td>recover</td><td>string</td><td>true</td><td>uint</td><td>uint8</td><td>uintptr</td></tr></tbody></table><p>Go语言的语言符号又称为记法元素，共包括5类，标签符(identifier)、关键字(keyword)、操作符(operator)、分隔符(delimiter)、字面量(literal),它们是组成Go语言代码和程序的最基本单位。</p><p>Go语言的所有源代码都必须由Unicode编码规范的UTF-8编码格式进行编码。</p>]]></content>
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gin Web Framework</title>
      <link href="/2018/10/12/gin/"/>
      <url>/2018/10/12/gin/</url>
      <content type="html"><![CDATA[<p><img align="" width="159px" src="http://image.markhoo.com/color.png"></p><p>Gin is a web framework written in Go (Golang). It features a martini-like API with much better performance, up to 40 times faster thanks to <a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="noopener">httprouter</a>. If you need performance and good productivity, you will love Gin.</p><p><img src="http://image.markhoo.com/console.png" alt="Gin console logger"></p><h2 id="Installation"><a href="/2018/10/12/gin/#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>To install Gin package, you need to install Go and set your Go workspace first.</p><ol><li>Download and install it:</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><ol start="2"><li>Import it in your code:</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"github.com/gin-gonic/gin"</span></span><br></pre></td></tr></table></figure><ol start="3"><li>(Optional) Import <code>net/http</code>. This is required for example if using constants such as <code>http.StatusOK</code>.</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br></pre></td></tr></table></figure><h3 id="Use-a-vendor-tool-like-Govendor"><a href="/2018/10/12/gin/#Use-a-vendor-tool-like-Govendor" class="headerlink" title="Use a vendor tool like Govendor"></a>Use a vendor tool like <a href="https://github.com/kardianos/govendor" target="_blank" rel="noopener">Govendor</a></h3><ol><li><code>go get</code> govendor</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/kardianos/govendor</span><br></pre></td></tr></table></figure><ol start="2"><li>Create your project folder and <code>cd</code> inside</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$GOPATH</span>/src/github.com/myusername/project &amp;&amp; <span class="built_in">cd</span> <span class="string">"<span class="variable">$_</span>"</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Vendor init your project and add gin</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ govendor init</span><br><span class="line">$ govendor fetch github.com/gin-gonic/gin@v1.3</span><br></pre></td></tr></table></figure><ol start="4"><li>Copy a starting template inside your project</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://raw.githubusercontent.com/gin-gonic/gin/master/examples/basic/main.go &gt; main.go</span><br></pre></td></tr></table></figure><ol start="5"><li>Run your project</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br></pre></td></tr></table></figure><h2 id="Prerequisite"><a href="/2018/10/12/gin/#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h2><p>Now Gin requires Go 1.6 or later and Go 1.7 will be required soon.</p><h2 id="Quick-start"><a href="/2018/10/12/gin/#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># assume the following codes in example.go file</span></span><br><span class="line">$ cat example.go</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">"/ping"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"pong"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># run <span class="built_in">example</span>.<span class="built_in">go</span> <span class="keyword">and</span> visit <span class="number">0.0</span>.0.0:<span class="number">8080</span>/ping on browser</span><br><span class="line">$ <span class="built_in">go</span> run <span class="built_in">example</span>.<span class="built_in">go</span></span><br></pre></td></tr></table></figure><h2 id="Benchmarks"><a href="/2018/10/12/gin/#Benchmarks" class="headerlink" title="Benchmarks"></a>Benchmarks</h2><p>Gin uses a custom version of <a href="https://github.com/julienschmidt/httprouter" target="_blank" rel="noopener">HttpRouter</a></p><p><a href="/2018/10/12/gin//BENCHMARKS.md">See all benchmarks</a></p><table><thead><tr><th>Benchmark name</th><th style="text-align:right">(1)</th><th style="text-align:right">(2)</th><th style="text-align:right">(3)</th><th style="text-align:right">(4)</th></tr></thead><tbody><tr><td><strong>BenchmarkGin_GithubAll</strong></td><td style="text-align:right"><strong>30000</strong></td><td style="text-align:right"><strong>48375</strong></td><td style="text-align:right"><strong>0</strong></td><td style="text-align:right"><strong>0</strong></td></tr><tr><td>BenchmarkAce_GithubAll</td><td style="text-align:right">10000</td><td style="text-align:right">134059</td><td style="text-align:right">13792</td><td style="text-align:right">167</td></tr><tr><td>BenchmarkBear_GithubAll</td><td style="text-align:right">5000</td><td style="text-align:right">534445</td><td style="text-align:right">86448</td><td style="text-align:right">943</td></tr><tr><td>BenchmarkBeego_GithubAll</td><td style="text-align:right">3000</td><td style="text-align:right">592444</td><td style="text-align:right">74705</td><td style="text-align:right">812</td></tr><tr><td>BenchmarkBone_GithubAll</td><td style="text-align:right">200</td><td style="text-align:right">6957308</td><td style="text-align:right">698784</td><td style="text-align:right">8453</td></tr><tr><td>BenchmarkDenco_GithubAll</td><td style="text-align:right">10000</td><td style="text-align:right">158819</td><td style="text-align:right">20224</td><td style="text-align:right">167</td></tr><tr><td>BenchmarkEcho_GithubAll</td><td style="text-align:right">10000</td><td style="text-align:right">154700</td><td style="text-align:right">6496</td><td style="text-align:right">203</td></tr><tr><td>BenchmarkGocraftWeb_GithubAll</td><td style="text-align:right">3000</td><td style="text-align:right">570806</td><td style="text-align:right">131656</td><td style="text-align:right">1686</td></tr><tr><td>BenchmarkGoji_GithubAll</td><td style="text-align:right">2000</td><td style="text-align:right">818034</td><td style="text-align:right">56112</td><td style="text-align:right">334</td></tr><tr><td>BenchmarkGojiv2_GithubAll</td><td style="text-align:right">2000</td><td style="text-align:right">1213973</td><td style="text-align:right">274768</td><td style="text-align:right">3712</td></tr><tr><td>BenchmarkGoJsonRest_GithubAll</td><td style="text-align:right">2000</td><td style="text-align:right">785796</td><td style="text-align:right">134371</td><td style="text-align:right">2737</td></tr><tr><td>BenchmarkGoRestful_GithubAll</td><td style="text-align:right">300</td><td style="text-align:right">5238188</td><td style="text-align:right">689672</td><td style="text-align:right">4519</td></tr><tr><td>BenchmarkGorillaMux_GithubAll</td><td style="text-align:right">100</td><td style="text-align:right">10257726</td><td style="text-align:right">211840</td><td style="text-align:right">2272</td></tr><tr><td>BenchmarkHttpRouter_GithubAll</td><td style="text-align:right">20000</td><td style="text-align:right">105414</td><td style="text-align:right">13792</td><td style="text-align:right">167</td></tr><tr><td>BenchmarkHttpTreeMux_GithubAll</td><td style="text-align:right">10000</td><td style="text-align:right">319934</td><td style="text-align:right">65856</td><td style="text-align:right">671</td></tr><tr><td>BenchmarkKocha_GithubAll</td><td style="text-align:right">10000</td><td style="text-align:right">209442</td><td style="text-align:right">23304</td><td style="text-align:right">843</td></tr><tr><td>BenchmarkLARS_GithubAll</td><td style="text-align:right">20000</td><td style="text-align:right">62565</td><td style="text-align:right">0</td><td style="text-align:right">0</td></tr><tr><td>BenchmarkMacaron_GithubAll</td><td style="text-align:right">2000</td><td style="text-align:right">1161270</td><td style="text-align:right">204194</td><td style="text-align:right">2000</td></tr><tr><td>BenchmarkMartini_GithubAll</td><td style="text-align:right">200</td><td style="text-align:right">9991713</td><td style="text-align:right">226549</td><td style="text-align:right">2325</td></tr><tr><td>BenchmarkPat_GithubAll</td><td style="text-align:right">200</td><td style="text-align:right">5590793</td><td style="text-align:right">1499568</td><td style="text-align:right">27435</td></tr><tr><td>BenchmarkPossum_GithubAll</td><td style="text-align:right">10000</td><td style="text-align:right">319768</td><td style="text-align:right">84448</td><td style="text-align:right">609</td></tr><tr><td>BenchmarkR2router_GithubAll</td><td style="text-align:right">10000</td><td style="text-align:right">305134</td><td style="text-align:right">77328</td><td style="text-align:right">979</td></tr><tr><td>BenchmarkRivet_GithubAll</td><td style="text-align:right">10000</td><td style="text-align:right">132134</td><td style="text-align:right">16272</td><td style="text-align:right">167</td></tr><tr><td>BenchmarkTango_GithubAll</td><td style="text-align:right">3000</td><td style="text-align:right">552754</td><td style="text-align:right">63826</td><td style="text-align:right">1618</td></tr><tr><td>BenchmarkTigerTonic_GithubAll</td><td style="text-align:right">1000</td><td style="text-align:right">1439483</td><td style="text-align:right">239104</td><td style="text-align:right">5374</td></tr><tr><td>BenchmarkTraffic_GithubAll</td><td style="text-align:right">100</td><td style="text-align:right">11383067</td><td style="text-align:right">2659329</td><td style="text-align:right">21848</td></tr><tr><td>BenchmarkVulcan_GithubAll</td><td style="text-align:right">5000</td><td style="text-align:right">394253</td><td style="text-align:right">19894</td><td style="text-align:right">609</td></tr></tbody></table><ul><li>(1): Total Repetitions achieved in constant time, higher means more confident result</li><li>(2): Single Repetition Duration (ns/op), lower is better</li><li>(3): Heap Memory (B/op), lower is better</li><li>(4): Average Allocations per Repetition (allocs/op), lower is better</li></ul><h2 id="Gin-v1-stable"><a href="/2018/10/12/gin/#Gin-v1-stable" class="headerlink" title="Gin v1. stable"></a>Gin v1. stable</h2><ul><li style="list-style: none"><input type="checkbox" checked> Zero allocation router.</li><li style="list-style: none"><input type="checkbox" checked> Still the fastest http router and framework. From routing to writing.</li><li style="list-style: none"><input type="checkbox" checked> Complete suite of unit tests</li><li style="list-style: none"><input type="checkbox" checked> Battle tested</li><li style="list-style: none"><input type="checkbox" checked> API frozen, new releases will not break your code.</li></ul><h2 id="Build-with-jsoniter"><a href="/2018/10/12/gin/#Build-with-jsoniter" class="headerlink" title="Build with jsoniter"></a>Build with <a href="https://github.com/json-iterator/go" target="_blank" rel="noopener">jsoniter</a></h2><p>Gin uses <code>encoding/json</code> as default json package but you can change to <a href="https://github.com/json-iterator/go" target="_blank" rel="noopener">jsoniter</a> by build from other tags.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go build -tags=jsoniter .</span><br></pre></td></tr></table></figure><h2 id="API-Examples"><a href="/2018/10/12/gin/#API-Examples" class="headerlink" title="API Examples"></a>API Examples</h2><h3 id="Using-GET-POST-PUT-PATCH-DELETE-and-OPTIONS"><a href="/2018/10/12/gin/#Using-GET-POST-PUT-PATCH-DELETE-and-OPTIONS" class="headerlink" title="Using GET, POST, PUT, PATCH, DELETE and OPTIONS"></a>Using GET, POST, PUT, PATCH, DELETE and OPTIONS</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Disable Console Color</span></span><br><span class="line"><span class="comment">// gin.DisableConsoleColor()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a gin router with default middleware:</span></span><br><span class="line"><span class="comment">// logger and recovery (crash-free) middleware</span></span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.GET(<span class="string">"/someGet"</span>, getting)</span><br><span class="line">router.POST(<span class="string">"/somePost"</span>, posting)</span><br><span class="line">router.PUT(<span class="string">"/somePut"</span>, putting)</span><br><span class="line">router.DELETE(<span class="string">"/someDelete"</span>, deleting)</span><br><span class="line">router.PATCH(<span class="string">"/somePatch"</span>, patching)</span><br><span class="line">router.HEAD(<span class="string">"/someHead"</span>, head)</span><br><span class="line">router.OPTIONS(<span class="string">"/someOptions"</span>, options)</span><br><span class="line"></span><br><span class="line"><span class="comment">// By default it serves on :8080 unless a</span></span><br><span class="line"><span class="comment">// PORT environment variable was defined.</span></span><br><span class="line">router.Run()</span><br><span class="line"><span class="comment">// router.Run(":3000") for a hard coded port</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Parameters-in-path"><a href="/2018/10/12/gin/#Parameters-in-path" class="headerlink" title="Parameters in path"></a>Parameters in path</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// This handler will match /user/john but will not match /user/ or /user</span></span><br><span class="line">router.GET(<span class="string">"/user/:name"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.Param(<span class="string">"name"</span>)</span><br><span class="line">c.String(http.StatusOK, <span class="string">"Hello %s"</span>, name)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// However, this one will match /user/john/ and also /user/john/send</span></span><br><span class="line"><span class="comment">// If no other routers match /user/john, it will redirect to /user/john/</span></span><br><span class="line">router.GET(<span class="string">"/user/:name/*action"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.Param(<span class="string">"name"</span>)</span><br><span class="line">action := c.Param(<span class="string">"action"</span>)</span><br><span class="line">message := name + <span class="string">" is "</span> + action</span><br><span class="line">c.String(http.StatusOK, message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Querystring-parameters"><a href="/2018/10/12/gin/#Querystring-parameters" class="headerlink" title="Querystring parameters"></a>Querystring parameters</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Query string parameters are parsed using the existing underlying request object.</span></span><br><span class="line"><span class="comment">// The request responds to a url matching:  /welcome?firstname=Jane&amp;lastname=Doe</span></span><br><span class="line">router.GET(<span class="string">"/welcome"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">firstname := c.DefaultQuery(<span class="string">"firstname"</span>, <span class="string">"Guest"</span>)</span><br><span class="line">lastname := c.Query(<span class="string">"lastname"</span>) <span class="comment">// shortcut for c.Request.URL.Query().Get("lastname")</span></span><br><span class="line"></span><br><span class="line">c.String(http.StatusOK, <span class="string">"Hello %s %s"</span>, firstname, lastname)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Multipart-Urlencoded-Form"><a href="/2018/10/12/gin/#Multipart-Urlencoded-Form" class="headerlink" title="Multipart/Urlencoded Form"></a>Multipart/Urlencoded Form</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">"/form_post"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">message := c.PostForm(<span class="string">"message"</span>)</span><br><span class="line">nick := c.DefaultPostForm(<span class="string">"nick"</span>, <span class="string">"anonymous"</span>)</span><br><span class="line"></span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"status"</span>:  <span class="string">"posted"</span>,</span><br><span class="line"><span class="string">"message"</span>: message,</span><br><span class="line"><span class="string">"nick"</span>:    nick,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Another-example-query-post-form"><a href="/2018/10/12/gin/#Another-example-query-post-form" class="headerlink" title="Another example: query + post form"></a>Another example: query + post form</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/post?id=1234&amp;page=1</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">name=manu&amp;message=this_is_great</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">"/post"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">id := c.Query(<span class="string">"id"</span>)</span><br><span class="line">page := c.DefaultQuery(<span class="string">"page"</span>, <span class="string">"0"</span>)</span><br><span class="line">name := c.PostForm(<span class="string">"name"</span>)</span><br><span class="line">message := c.PostForm(<span class="string">"message"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"id: %s; page: %s; name: %s; message: %s"</span>, id, page, name, message)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">id:</span> <span class="number">1234</span>; <span class="string">page:</span> <span class="number">1</span>; <span class="string">name:</span> manu; <span class="string">message:</span> this_is_great</span><br></pre></td></tr></table></figure><h3 id="Map-as-querystring-or-postform-parameters"><a href="/2018/10/12/gin/#Map-as-querystring-or-postform-parameters" class="headerlink" title="Map as querystring or postform parameters"></a>Map as querystring or postform parameters</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/post?ids[a]=1234&amp;ids[b]=hello</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">names[first]=thinkerou&amp;names[second]=tianou</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">"/post"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">ids := c.QueryMap(<span class="string">"ids"</span>)</span><br><span class="line">names := c.PostFormMap(<span class="string">"names"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"ids: %v; names: %v"</span>, ids, names)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="variable">s:</span> <span class="keyword">map</span>[<span class="variable">b:hello</span> <span class="variable">a:1234</span>], name<span class="variable">s:</span> <span class="keyword">map</span>[second:tianou firs<span class="variable">t:thinkerou</span>]</span><br></pre></td></tr></table></figure><h3 id="Upload-files"><a href="/2018/10/12/gin/#Upload-files" class="headerlink" title="Upload files"></a>Upload files</h3><h4 id="Single-file"><a href="/2018/10/12/gin/#Single-file" class="headerlink" title="Single file"></a>Single file</h4><p>References issue <a href="https://github.com/gin-gonic/gin/issues/774" target="_blank" rel="noopener">#774</a> and detail <a href="/2018/10/12/gin/examples/upload-file/single">example code</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"><span class="comment">// Set a lower memory limit for multipart forms (default is 32 MiB)</span></span><br><span class="line"><span class="comment">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class="line">router.POST(<span class="string">"/upload"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// single file</span></span><br><span class="line">file, _ := c.FormFile(<span class="string">"file"</span>)</span><br><span class="line">log.Println(file.Filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Upload the file to specific dst.</span></span><br><span class="line"><span class="comment">// c.SaveUploadedFile(file, dst)</span></span><br><span class="line"></span><br><span class="line">c.String(http.StatusOK, fmt.Sprintf(<span class="string">"'%s' uploaded!"</span>, file.Filename))</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>How to <code>curl</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8080/upload \</span><br><span class="line">  -F <span class="string">"file=@/Users/appleboy/test.zip"</span> \</span><br><span class="line">  -H <span class="string">"Content-Type: multipart/form-data"</span></span><br></pre></td></tr></table></figure><h4 id="Multiple-files"><a href="/2018/10/12/gin/#Multiple-files" class="headerlink" title="Multiple files"></a>Multiple files</h4><p>See the detail <a href="/2018/10/12/gin/examples/upload-file/multiple">example code</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"><span class="comment">// Set a lower memory limit for multipart forms (default is 32 MiB)</span></span><br><span class="line"><span class="comment">// router.MaxMultipartMemory = 8 &lt;&lt; 20  // 8 MiB</span></span><br><span class="line">router.POST(<span class="string">"/upload"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// Multipart form</span></span><br><span class="line">form, _ := c.MultipartForm()</span><br><span class="line">files := form.File[<span class="string">"upload[]"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">log.Println(file.Filename)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Upload the file to specific dst.</span></span><br><span class="line"><span class="comment">// c.SaveUploadedFile(file, dst)</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(http.StatusOK, fmt.Sprintf(<span class="string">"%d files uploaded!"</span>, <span class="built_in">len</span>(files)))</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>How to <code>curl</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8080/upload \</span><br><span class="line">  -F <span class="string">"upload[]=@/Users/appleboy/test1.zip"</span> \</span><br><span class="line">  -F <span class="string">"upload[]=@/Users/appleboy/test2.zip"</span> \</span><br><span class="line">  -H <span class="string">"Content-Type: multipart/form-data"</span></span><br></pre></td></tr></table></figure><h3 id="Grouping-routes"><a href="/2018/10/12/gin/#Grouping-routes" class="headerlink" title="Grouping routes"></a>Grouping routes</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple group: v1</span></span><br><span class="line">v1 := router.Group(<span class="string">"/v1"</span>)</span><br><span class="line">&#123;</span><br><span class="line">v1.POST(<span class="string">"/login"</span>, loginEndpoint)</span><br><span class="line">v1.POST(<span class="string">"/submit"</span>, submitEndpoint)</span><br><span class="line">v1.POST(<span class="string">"/read"</span>, readEndpoint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple group: v2</span></span><br><span class="line">v2 := router.Group(<span class="string">"/v2"</span>)</span><br><span class="line">&#123;</span><br><span class="line">v2.POST(<span class="string">"/login"</span>, loginEndpoint)</span><br><span class="line">v2.POST(<span class="string">"/submit"</span>, submitEndpoint)</span><br><span class="line">v2.POST(<span class="string">"/read"</span>, readEndpoint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Blank-Gin-without-middleware-by-default"><a href="/2018/10/12/gin/#Blank-Gin-without-middleware-by-default" class="headerlink" title="Blank Gin without middleware by default"></a>Blank Gin without middleware by default</h3><p>Use</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r := gin.New()</span><br></pre></td></tr></table></figure><p>instead of</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Default With the Logger and Recovery middleware already attached</span></span><br><span class="line">r := gin.Default()</span><br></pre></td></tr></table></figure><h3 id="Using-middleware"><a href="/2018/10/12/gin/#Using-middleware" class="headerlink" title="Using middleware"></a>Using middleware</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Creates a router without any middleware by default</span></span><br><span class="line">r := gin.New()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Global middleware</span></span><br><span class="line"><span class="comment">// Logger middleware will write the logs to gin.DefaultWriter even if you set with GIN_MODE=release.</span></span><br><span class="line"><span class="comment">// By default gin.DefaultWriter = os.Stdout</span></span><br><span class="line">r.Use(gin.Logger())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Recovery middleware recovers from any panics and writes a 500 if there was one.</span></span><br><span class="line">r.Use(gin.Recovery())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Per route middleware, you can add as many as you desire.</span></span><br><span class="line">r.GET(<span class="string">"/benchmark"</span>, MyBenchLogger(), benchEndpoint)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Authorization group</span></span><br><span class="line"><span class="comment">// authorized := r.Group("/", AuthRequired())</span></span><br><span class="line"><span class="comment">// exactly the same as:</span></span><br><span class="line">authorized := r.Group(<span class="string">"/"</span>)</span><br><span class="line"><span class="comment">// per group middleware! in this case we use the custom created</span></span><br><span class="line"><span class="comment">// AuthRequired() middleware just in the "authorized" group.</span></span><br><span class="line">authorized.Use(AuthRequired())</span><br><span class="line">&#123;</span><br><span class="line">authorized.POST(<span class="string">"/login"</span>, loginEndpoint)</span><br><span class="line">authorized.POST(<span class="string">"/submit"</span>, submitEndpoint)</span><br><span class="line">authorized.POST(<span class="string">"/read"</span>, readEndpoint)</span><br><span class="line"></span><br><span class="line"><span class="comment">// nested group</span></span><br><span class="line">testing := authorized.Group(<span class="string">"testing"</span>)</span><br><span class="line">testing.GET(<span class="string">"/analytics"</span>, analyticsEndpoint)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="How-to-write-log-file"><a href="/2018/10/12/gin/#How-to-write-log-file" class="headerlink" title="How to write log file"></a>How to write log file</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Disable Console Color, you don't need console color when writing the logs to file.</span></span><br><span class="line">    gin.DisableConsoleColor()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Logging to a file.</span></span><br><span class="line">    f, _ := os.Create(<span class="string">"gin.log"</span>)</span><br><span class="line">    gin.DefaultWriter = io.MultiWriter(f)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use the following code if you need to write the logs to file and console at the same time.</span></span><br><span class="line">    <span class="comment">// gin.DefaultWriter = io.MultiWriter(f, os.Stdout)</span></span><br><span class="line"></span><br><span class="line">    router := gin.Default()</span><br><span class="line">    router.GET(<span class="string">"/ping"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        c.String(<span class="number">200</span>, <span class="string">"pong"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Model-binding-and-validation"><a href="/2018/10/12/gin/#Model-binding-and-validation" class="headerlink" title="Model binding and validation"></a>Model binding and validation</h3><p>To bind a request body into a type, use model binding. We currently support binding of JSON, XML and standard form values (foo=bar&amp;boo=baz).</p><p>Gin uses <a href="https://github.com/go-playground/validator" target="_blank" rel="noopener"><strong>go-playground/validator.v8</strong></a> for validation. Check the full docs on tags usage <a href="http://godoc.org/gopkg.in/go-playground/validator.v8#hdr-Baked_In_Validators_and_Tags" target="_blank" rel="noopener">here</a>.</p><p>Note that you need to set the corresponding binding tag on all fields you want to bind. For example, when binding from JSON, set <code>json:&quot;fieldname&quot;</code>.</p><p>Also, Gin provides two sets of methods for binding:</p><ul><li><strong>Type</strong> - Must bind<ul><li><strong>Methods</strong> - <code>Bind</code>, <code>BindJSON</code>, <code>BindXML</code>, <code>BindQuery</code></li><li><strong>Behavior</strong> - These methods use <code>MustBindWith</code> under the hood. If there is a binding error, the request is aborted with <code>c.AbortWithError(400, err).SetType(ErrorTypeBind)</code>. This sets the response status code to 400 and the <code>Content-Type</code> header is set to <code>text/plain; charset=utf-8</code>. Note that if you try to set the response code after this, it will result in a warning <code>[GIN-debug] [WARNING] Headers were already written. Wanted to override status code 400 with 422</code>. If you wish to have greater control over the behavior, consider using the <code>ShouldBind</code> equivalent method.</li></ul></li><li><strong>Type</strong> - Should bind<ul><li><strong>Methods</strong> - <code>ShouldBind</code>, <code>ShouldBindJSON</code>, <code>ShouldBindXML</code>, <code>ShouldBindQuery</code></li><li><strong>Behavior</strong> - These methods use <code>ShouldBindWith</code> under the hood. If there is a binding error, the error is returned and it is the developer’s responsibility to handle the request and error appropriately.</li></ul></li></ul><p>When using the Bind-method, Gin tries to infer the binder depending on the Content-Type header. If you are sure what you are binding, you can use <code>MustBindWith</code> or <code>ShouldBindWith</code>.</p><p>You can also specify that specific fields are required. If a field is decorated with <code>binding:&quot;required&quot;</code> and has a empty value when binding, an error will be returned.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Binding from JSON</span></span><br><span class="line"><span class="keyword">type</span> Login <span class="keyword">struct</span> &#123;</span><br><span class="line">User     <span class="keyword">string</span> <span class="string">`form:"user" json:"user" xml:"user"  binding:"required"`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`form:"password" json:"password" xml:"password" binding:"required"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example for binding JSON (&#123;"user": "manu", "password": "123"&#125;)</span></span><br><span class="line">router.POST(<span class="string">"/loginJSON"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> json Login</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;json); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">"error"</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> json.User != <span class="string">"manu"</span> || json.Password != <span class="string">"123"</span> &#123;</span><br><span class="line">c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">"status"</span>: <span class="string">"unauthorized"</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">"status"</span>: <span class="string">"you are logged in"</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example for binding XML (</span></span><br><span class="line"><span class="comment">//&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">//&lt;root&gt;</span></span><br><span class="line"><span class="comment">//&lt;user&gt;user&lt;/user&gt;</span></span><br><span class="line"><span class="comment">//&lt;password&gt;123&lt;/user&gt;</span></span><br><span class="line"><span class="comment">//&lt;/root&gt;)</span></span><br><span class="line">router.POST(<span class="string">"/loginXML"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> xml Login</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindXML(&amp;xml); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">"error"</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> xml.User != <span class="string">"manu"</span> || xml.Password != <span class="string">"123"</span> &#123;</span><br><span class="line">c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">"status"</span>: <span class="string">"unauthorized"</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">"status"</span>: <span class="string">"you are logged in"</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example for binding a HTML form (user=manu&amp;password=123)</span></span><br><span class="line">router.POST(<span class="string">"/loginForm"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> form Login</span><br><span class="line"><span class="comment">// This will infer what binder to use depending on the content-type header.</span></span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBind(&amp;form); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">"error"</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> form.User != <span class="string">"manu"</span> || form.Password != <span class="string">"123"</span> &#123;</span><br><span class="line">c.JSON(http.StatusUnauthorized, gin.H&#123;<span class="string">"status"</span>: <span class="string">"unauthorized"</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">"status"</span>: <span class="string">"you are logged in"</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Sample request</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -v -X POST \</span></span><br><span class="line">  http://localhost:8080/loginJSON \</span><br><span class="line">  -H 'content-type: application/json' \</span><br><span class="line">  -d '&#123; "user": "manu" &#125;'</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> POST /loginJSON HTTP/1.1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Host: localhost:8080</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> User-Agent: curl/7.51.0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Accept: */*</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> content-type: application/json</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Content-Length: 18</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br><span class="line">* upload completely sent off: 18 out of 18 bytes</span><br><span class="line">&lt; HTTP/1.1 400 Bad Request</span><br><span class="line">&lt; Content-Type: application/json; charset=utf-8</span><br><span class="line">&lt; Date: Fri, 04 Aug 2017 03:51:31 GMT</span><br><span class="line">&lt; Content-Length: 100</span><br><span class="line">&lt;</span><br><span class="line">&#123;"error":"Key: 'Login.Password' Error:Field validation for 'Password' failed on the 'required' tag"&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Skip validate</strong></p><p>When running the above example using the above the <code>curl</code> command, it returns error. Because the example use <code>binding:&quot;required&quot;</code> for <code>Password</code>. If use <code>binding:&quot;-&quot;</code> for <code>Password</code>, then it will not return error when running the above example again.</p><h3 id="Custom-Validators"><a href="/2018/10/12/gin/#Custom-Validators" class="headerlink" title="Custom Validators"></a>Custom Validators</h3><p>It is also possible to register custom validators. See the <a href="/2018/10/12/gin/examples/custom-validation/server.go">example code</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin/binding"</span></span><br><span class="line"><span class="string">"gopkg.in/go-playground/validator.v8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Booking contains binded and validated data.</span></span><br><span class="line"><span class="keyword">type</span> Booking <span class="keyword">struct</span> &#123;</span><br><span class="line">CheckIn  time.Time <span class="string">`form:"check_in" binding:"required,bookabledate" time_format:"2006-01-02"`</span></span><br><span class="line">CheckOut time.Time <span class="string">`form:"check_out" binding:"required,gtfield=CheckIn" time_format:"2006-01-02"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bookableDate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">v *validator.Validate, topStruct reflect.Value, currentStructOrField reflect.Value,</span></span></span><br><span class="line"><span class="function"><span class="params">field reflect.Value, fieldType reflect.Type, fieldKind reflect.Kind, param <span class="keyword">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> date, ok := field.Interface().(time.Time); ok &#123;</span><br><span class="line">today := time.Now()</span><br><span class="line"><span class="keyword">if</span> today.Year() &gt; date.Year() || today.YearDay() &gt; date.YearDay() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">route := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v, ok := binding.Validator.Engine().(*validator.Validate); ok &#123;</span><br><span class="line">v.RegisterValidation(<span class="string">"bookabledate"</span>, bookableDate)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">route.GET(<span class="string">"/bookable"</span>, getBookable)</span><br><span class="line">route.Run(<span class="string">":8085"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBookable</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> b Booking</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindWith(&amp;b, binding.Query); err == <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">"message"</span>: <span class="string">"Booking dates are valid!"</span>&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">"error"</span>: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl <span class="string">"localhost:8085/bookable?check_in=2018-04-16&amp;check_out=2018-04-17"</span></span></span><br><span class="line">&#123;"message":"Booking dates are valid!"&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl <span class="string">"localhost:8085/bookable?check_in=2018-03-08&amp;check_out=2018-03-09"</span></span></span><br><span class="line">&#123;"error":"Key: 'Booking.CheckIn' Error:Field validation for 'CheckIn' failed on the 'bookabledate' tag"&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/go-playground/validator/releases/tag/v8.7" target="_blank" rel="noopener">Struct level validations</a> can also be registered this way.<br>See the <a href="/2018/10/12/gin/examples/struct-lvl-validations">struct-lvl-validation example</a> to learn more.</p><h3 id="Only-Bind-Query-String"><a href="/2018/10/12/gin/#Only-Bind-Query-String" class="headerlink" title="Only Bind Query String"></a>Only Bind Query String</h3><p><code>ShouldBindQuery</code> function only binds the query params and not the post data. See the <a href="https://github.com/gin-gonic/gin/issues/742#issuecomment-315953017" target="_blank" rel="noopener">detail information</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="keyword">string</span> <span class="string">`form:"name"`</span></span><br><span class="line">Address <span class="keyword">string</span> <span class="string">`form:"address"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">route := gin.Default()</span><br><span class="line">route.Any(<span class="string">"/testing"</span>, startPage)</span><br><span class="line">route.Run(<span class="string">":8085"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startPage</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> person Person</span><br><span class="line"><span class="keyword">if</span> c.ShouldBindQuery(&amp;person) == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">"====== Only Bind By Query String ======"</span>)</span><br><span class="line">log.Println(person.Name)</span><br><span class="line">log.Println(person.Address)</span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">"Success"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bind-Query-String-or-Post-Data"><a href="/2018/10/12/gin/#Bind-Query-String-or-Post-Data" class="headerlink" title="Bind Query String or Post Data"></a>Bind Query String or Post Data</h3><p>See the <a href="https://github.com/gin-gonic/gin/issues/742#issuecomment-264681292" target="_blank" rel="noopener">detail information</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="keyword">string</span>    <span class="string">`form:"name"`</span></span><br><span class="line">Address  <span class="keyword">string</span>    <span class="string">`form:"address"`</span></span><br><span class="line">Birthday time.Time <span class="string">`form:"birthday" time_format:"2006-01-02" time_utc:"1"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">route := gin.Default()</span><br><span class="line">route.GET(<span class="string">"/testing"</span>, startPage)</span><br><span class="line">route.Run(<span class="string">":8085"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startPage</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> person Person</span><br><span class="line"><span class="comment">// If `GET`, only `Form` binding engine (`query`) used.</span></span><br><span class="line"><span class="comment">// If `POST`, first checks the `content-type` for `JSON` or `XML`, then uses `Form` (`form-data`).</span></span><br><span class="line"><span class="comment">// See more at https://github.com/gin-gonic/gin/blob/master/binding/binding.go#L48</span></span><br><span class="line"><span class="keyword">if</span> c.ShouldBind(&amp;person) == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(person.Name)</span><br><span class="line">log.Println(person.Address)</span><br><span class="line">log.Println(person.Birthday)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">"Success"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test it with:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET <span class="string">"localhost:8085/testing?name=appleboy&amp;address=xyz&amp;birthday=1992-03-15"</span></span><br></pre></td></tr></table></figure></p><h3 id="Bind-HTML-checkboxes"><a href="/2018/10/12/gin/#Bind-HTML-checkboxes" class="headerlink" title="Bind HTML checkboxes"></a>Bind HTML checkboxes</h3><p>See the <a href="https://github.com/gin-gonic/gin/issues/129#issuecomment-124260092" target="_blank" rel="noopener">detail information</a></p><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myForm <span class="keyword">struct</span> &#123;</span><br><span class="line">    Colors []<span class="keyword">string</span> <span class="string">`form:"colors[]"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">formHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> fakeForm myForm</span><br><span class="line">    c.ShouldBind(&amp;fakeForm)</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">"color"</span>: fakeForm.Colors&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>form.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Check some colors<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"red"</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"colors[]"</span> <span class="attr">value</span>=<span class="string">"red"</span> <span class="attr">id</span>=<span class="string">"red"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"green"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"colors[]"</span> <span class="attr">value</span>=<span class="string">"green"</span> <span class="attr">id</span>=<span class="string">"green"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"blue"</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"colors[]"</span> <span class="attr">value</span>=<span class="string">"blue"</span> <span class="attr">id</span>=<span class="string">"blue"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>result:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"color"</span>:[<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="Multipart-Urlencoded-binding"><a href="/2018/10/12/gin/#Multipart-Urlencoded-binding" class="headerlink" title="Multipart/Urlencoded binding"></a>Multipart/Urlencoded binding</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LoginForm <span class="keyword">struct</span> &#123;</span><br><span class="line">User     <span class="keyword">string</span> <span class="string">`form:"user" binding:"required"`</span></span><br><span class="line">Password <span class="keyword">string</span> <span class="string">`form:"password" binding:"required"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.POST(<span class="string">"/login"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// you can bind multipart form with explicit binding declaration:</span></span><br><span class="line"><span class="comment">// c.ShouldBindWith(&amp;form, binding.Form)</span></span><br><span class="line"><span class="comment">// or you can simply use autobinding with ShouldBind method:</span></span><br><span class="line"><span class="keyword">var</span> form LoginForm</span><br><span class="line"><span class="comment">// in this case proper binding will be automatically selected</span></span><br><span class="line"><span class="keyword">if</span> c.ShouldBind(&amp;form) == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> form.User == <span class="string">"user"</span> &amp;&amp; form.Password == <span class="string">"password"</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">"status"</span>: <span class="string">"you are logged in"</span>&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(<span class="number">401</span>, gin.H&#123;<span class="string">"status"</span>: <span class="string">"unauthorized"</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test it with:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v --form user=user --form password=password http://localhost:8080/login</span><br></pre></td></tr></table></figure></p><h3 id="XML-JSON-YAML-and-ProtoBuf-rendering"><a href="/2018/10/12/gin/#XML-JSON-YAML-and-ProtoBuf-rendering" class="headerlink" title="XML, JSON, YAML and ProtoBuf rendering"></a>XML, JSON, YAML and ProtoBuf rendering</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// gin.H is a shortcut for map[string]interface&#123;&#125;</span></span><br><span class="line">r.GET(<span class="string">"/someJSON"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">"message"</span>: <span class="string">"hey"</span>, <span class="string">"status"</span>: http.StatusOK&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/moreJSON"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// You also can use a struct</span></span><br><span class="line"><span class="keyword">var</span> msg <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="keyword">string</span> <span class="string">`json:"user"`</span></span><br><span class="line">Message <span class="keyword">string</span></span><br><span class="line">Number  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line">msg.Name = <span class="string">"Lena"</span></span><br><span class="line">msg.Message = <span class="string">"hey"</span></span><br><span class="line">msg.Number = <span class="number">123</span></span><br><span class="line"><span class="comment">// Note that msg.Name becomes "user" in the JSON</span></span><br><span class="line"><span class="comment">// Will output  :   &#123;"user": "Lena", "Message": "hey", "Number": 123&#125;</span></span><br><span class="line">c.JSON(http.StatusOK, msg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/someXML"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.XML(http.StatusOK, gin.H&#123;<span class="string">"message"</span>: <span class="string">"hey"</span>, <span class="string">"status"</span>: http.StatusOK&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/someYAML"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.YAML(http.StatusOK, gin.H&#123;<span class="string">"message"</span>: <span class="string">"hey"</span>, <span class="string">"status"</span>: http.StatusOK&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/someProtoBuf"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">reps := []<span class="keyword">int64</span>&#123;<span class="keyword">int64</span>(<span class="number">1</span>), <span class="keyword">int64</span>(<span class="number">2</span>)&#125;</span><br><span class="line">label := <span class="string">"test"</span></span><br><span class="line"><span class="comment">// The specific definition of protobuf is written in the testdata/protoexample file.</span></span><br><span class="line">data := &amp;protoexample.Test&#123;</span><br><span class="line">Label: &amp;label,</span><br><span class="line">Reps:  reps,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Note that data becomes binary data in the response</span></span><br><span class="line"><span class="comment">// Will output protoexample.Test protobuf serialized data</span></span><br><span class="line">c.ProtoBuf(http.StatusOK, data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SecureJSON"><a href="/2018/10/12/gin/#SecureJSON" class="headerlink" title="SecureJSON"></a>SecureJSON</h4><p>Using SecureJSON to prevent json hijacking. Default prepends <code>&quot;while(1),&quot;</code> to response body if the given struct is array values.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can also use your own secure json prefix</span></span><br><span class="line"><span class="comment">// r.SecureJsonPrefix(")]&#125;',\n")</span></span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/someJSON"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">names := []<span class="keyword">string</span>&#123;<span class="string">"lena"</span>, <span class="string">"austin"</span>, <span class="string">"foo"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Will output  :   while(1);["lena","austin","foo"]</span></span><br><span class="line">c.SecureJSON(http.StatusOK, names)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JSONP"><a href="/2018/10/12/gin/#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>Using JSONP to request data from a server  in a different domain. Add callback to response body if the query parameter callback exists.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/JSONP?callback=x"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">data := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"foo"</span>: <span class="string">"bar"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//callback is x</span></span><br><span class="line"><span class="comment">// Will output  :   x(&#123;\"foo\":\"bar\"&#125;)</span></span><br><span class="line">c.JSONP(http.StatusOK, data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AsciiJSON"><a href="/2018/10/12/gin/#AsciiJSON" class="headerlink" title="AsciiJSON"></a>AsciiJSON</h4><p>Using AsciiJSON to Generates ASCII-only JSON with escaped non-ASCII chracters.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/someJSON"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">data := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"lang"</span>: <span class="string">"GO语言"</span>,</span><br><span class="line"><span class="string">"tag"</span>:  <span class="string">"&lt;br&gt;"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// will output : &#123;"lang":"GO\u8bed\u8a00","tag":"\u003cbr\u003e"&#125;</span></span><br><span class="line">c.AsciiJSON(http.StatusOK, data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PureJSON"><a href="/2018/10/12/gin/#PureJSON" class="headerlink" title="PureJSON"></a>PureJSON</h4><p>Normally, JSON replaces special HTML characters with their unicode entities, e.g. <code>&lt;</code> becomes  <code>\u003c</code>. If you want to encode such characters literally, you can use PureJSON instead.<br>This feature is unavailable in Go 1.6 and lower.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serves unicode entities</span></span><br><span class="line">r.GET(<span class="string">"/json"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"html"</span>: <span class="string">"&lt;b&gt;Hello, world!&lt;/b&gt;"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serves literal characters</span></span><br><span class="line">r.GET(<span class="string">"/purejson"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.PureJSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"html"</span>: <span class="string">"&lt;b&gt;Hello, world!&lt;/b&gt;"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">":8080)</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Serving-static-files"><a href="/2018/10/12/gin/#Serving-static-files" class="headerlink" title="Serving static files"></a>Serving static files</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.Static(<span class="string">"/assets"</span>, <span class="string">"./assets"</span>)</span><br><span class="line">router.StaticFS(<span class="string">"/more_static"</span>, http.Dir(<span class="string">"my_file_system"</span>))</span><br><span class="line">router.StaticFile(<span class="string">"/favicon.ico"</span>, <span class="string">"./resources/favicon.ico"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Serving-data-from-reader"><a href="/2018/10/12/gin/#Serving-data-from-reader" class="headerlink" title="Serving data from reader"></a>Serving data from reader</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">"/someDataFromReader"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">response, err := http.Get(<span class="string">"https://raw.githubusercontent.com/gin-gonic/logo/master/color.png"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> || response.StatusCode != http.StatusOK &#123;</span><br><span class="line">c.Status(http.StatusServiceUnavailable)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reader := response.Body</span><br><span class="line">contentLength := response.ContentLength</span><br><span class="line">contentType := response.Header.Get(<span class="string">"Content-Type"</span>)</span><br><span class="line"></span><br><span class="line">extraHeaders := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"Content-Disposition"</span>: <span class="string">`attachment; filename="gopher.png"`</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.DataFromReader(http.StatusOK, contentLength, contentType, reader, extraHeaders)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTML-rendering"><a href="/2018/10/12/gin/#HTML-rendering" class="headerlink" title="HTML rendering"></a>HTML rendering</h3><p>Using LoadHTMLGlob() or LoadHTMLFiles()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.LoadHTMLGlob(<span class="string">"templates/*"</span>)</span><br><span class="line"><span class="comment">//router.LoadHTMLFiles("templates/template1.html", "templates/template2.html")</span></span><br><span class="line">router.GET(<span class="string">"/index"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">"index.tmpl"</span>, gin.H&#123;</span><br><span class="line"><span class="string">"title"</span>: <span class="string">"Main website"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>templates/index.tmpl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; .title &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Using templates with same name in different directories</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.LoadHTMLGlob(<span class="string">"templates/**/*"</span>)</span><br><span class="line">router.GET(<span class="string">"/posts/index"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">"posts/index.tmpl"</span>, gin.H&#123;</span><br><span class="line"><span class="string">"title"</span>: <span class="string">"Posts"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.GET(<span class="string">"/users/index"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">"users/index.tmpl"</span>, gin.H&#123;</span><br><span class="line"><span class="string">"title"</span>: <span class="string">"Users"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>templates/posts/index.tmpl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; define "posts/index.tmpl" &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; .title &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using posts/index.tmpl<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure><p>templates/users/index.tmpl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; define "users/index.tmpl" &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; .title &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using users/index.tmpl<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="Custom-Template-renderer"><a href="/2018/10/12/gin/#Custom-Template-renderer" class="headerlink" title="Custom Template renderer"></a>Custom Template renderer</h4><p>You can also use your own html template render</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"html/template"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">html := template.Must(template.ParseFiles(<span class="string">"file1"</span>, <span class="string">"file2"</span>))</span><br><span class="line">router.SetHTMLTemplate(html)</span><br><span class="line">router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Custom-Delimiters"><a href="/2018/10/12/gin/#Custom-Delimiters" class="headerlink" title="Custom Delimiters"></a>Custom Delimiters</h4><p>You may use custom delims</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r := gin.Default()</span><br><span class="line">r.Delims(<span class="string">"&#123;[&#123;"</span>, <span class="string">"&#125;]&#125;"</span>)</span><br><span class="line">r.LoadHTMLGlob(<span class="string">"/path/to/templates"</span>))</span><br></pre></td></tr></table></figure><h4 id="Custom-Template-Funcs"><a href="/2018/10/12/gin/#Custom-Template-Funcs" class="headerlink" title="Custom Template Funcs"></a>Custom Template Funcs</h4><p>See the detail <a href="/2018/10/12/gin/examples/template">example code</a>.</p><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"html/template"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">formatAsDate</span><span class="params">(t time.Time)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    year, month, day := t.Date()</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%d%02d/%02d"</span>, year, month, day)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := gin.Default()</span><br><span class="line">    router.Delims(<span class="string">"&#123;[&#123;"</span>, <span class="string">"&#125;]&#125;"</span>)</span><br><span class="line">    router.SetFuncMap(template.FuncMap&#123;</span><br><span class="line">        <span class="string">"formatAsDate"</span>: formatAsDate,</span><br><span class="line">    &#125;)</span><br><span class="line">    router.LoadHTMLFiles(<span class="string">"./testdata/template/raw.tmpl"</span>)</span><br><span class="line"></span><br><span class="line">    router.GET(<span class="string">"/raw"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        c.HTML(http.StatusOK, <span class="string">"raw.tmpl"</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">            <span class="string">"now"</span>: time.Date(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">01</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, time.UTC),</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    router.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>raw.tmpl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date: &#123;[&#123;.now | formatAsDate&#125;]&#125;</span><br></pre></td></tr></table></figure><p>Result:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Date:</span> <span class="number">2017</span><span class="regexp">/07/</span><span class="number">01</span></span><br></pre></td></tr></table></figure></p><h3 id="Multitemplate"><a href="/2018/10/12/gin/#Multitemplate" class="headerlink" title="Multitemplate"></a>Multitemplate</h3><p>Gin allow by default use only one html.Template. Check <a href="https://github.com/gin-contrib/multitemplate" target="_blank" rel="noopener">a multitemplate render</a> for using features like go 1.6 <code>block template</code>.</p><h3 id="Redirects"><a href="/2018/10/12/gin/#Redirects" class="headerlink" title="Redirects"></a>Redirects</h3><p>Issuing a HTTP redirect is easy. Both internal and external locations are supported.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">"/test"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.Redirect(http.StatusMovedPermanently, <span class="string">"http://www.google.com/"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Issuing a Router redirect, use <code>HandleContext</code> like below.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">"/test"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.Request.URL.Path = <span class="string">"/test2"</span></span><br><span class="line">    r.HandleContext(c)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">"/test2"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;<span class="string">"hello"</span>: <span class="string">"world"</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Custom-Middleware"><a href="/2018/10/12/gin/#Custom-Middleware" class="headerlink" title="Custom Middleware"></a>Custom Middleware</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Logger</span><span class="params">()</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">t := time.Now()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set example variable</span></span><br><span class="line">c.Set(<span class="string">"example"</span>, <span class="string">"12345"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// before request</span></span><br><span class="line"></span><br><span class="line">c.Next()</span><br><span class="line"></span><br><span class="line"><span class="comment">// after request</span></span><br><span class="line">latency := time.Since(t)</span><br><span class="line">log.Print(latency)</span><br><span class="line"></span><br><span class="line"><span class="comment">// access the status we are sending</span></span><br><span class="line">status := c.Writer.Status()</span><br><span class="line">log.Println(status)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.New()</span><br><span class="line">r.Use(Logger())</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/test"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">example := c.MustGet(<span class="string">"example"</span>).(<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// it would print: "12345"</span></span><br><span class="line">log.Println(example)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Using-BasicAuth-middleware"><a href="/2018/10/12/gin/#Using-BasicAuth-middleware" class="headerlink" title="Using BasicAuth() middleware"></a>Using BasicAuth() middleware</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simulate some private data</span></span><br><span class="line"><span class="keyword">var</span> secrets = gin.H&#123;</span><br><span class="line"><span class="string">"foo"</span>:    gin.H&#123;<span class="string">"email"</span>: <span class="string">"foo@bar.com"</span>, <span class="string">"phone"</span>: <span class="string">"123433"</span>&#125;,</span><br><span class="line"><span class="string">"austin"</span>: gin.H&#123;<span class="string">"email"</span>: <span class="string">"austin@example.com"</span>, <span class="string">"phone"</span>: <span class="string">"666"</span>&#125;,</span><br><span class="line"><span class="string">"lena"</span>:   gin.H&#123;<span class="string">"email"</span>: <span class="string">"lena@guapa.com"</span>, <span class="string">"phone"</span>: <span class="string">"523443"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Group using gin.BasicAuth() middleware</span></span><br><span class="line"><span class="comment">// gin.Accounts is a shortcut for map[string]string</span></span><br><span class="line">authorized := r.Group(<span class="string">"/admin"</span>, gin.BasicAuth(gin.Accounts&#123;</span><br><span class="line"><span class="string">"foo"</span>:    <span class="string">"bar"</span>,</span><br><span class="line"><span class="string">"austin"</span>: <span class="string">"1234"</span>,</span><br><span class="line"><span class="string">"lena"</span>:   <span class="string">"hello2"</span>,</span><br><span class="line"><span class="string">"manu"</span>:   <span class="string">"4321"</span>,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// /admin/secrets endpoint</span></span><br><span class="line"><span class="comment">// hit "localhost:8080/admin/secrets</span></span><br><span class="line">authorized.GET(<span class="string">"/secrets"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// get user, it was set by the BasicAuth middleware</span></span><br><span class="line">user := c.MustGet(gin.AuthUserKey).(<span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">if</span> secret, ok := secrets[user]; ok &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">"user"</span>: user, <span class="string">"secret"</span>: secret&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">"user"</span>: user, <span class="string">"secret"</span>: <span class="string">"NO SECRET :("</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Goroutines-inside-a-middleware"><a href="/2018/10/12/gin/#Goroutines-inside-a-middleware" class="headerlink" title="Goroutines inside a middleware"></a>Goroutines inside a middleware</h3><p>When starting new Goroutines inside a middleware or handler, you <strong>SHOULD NOT</strong> use the original context inside it, you have to use a read-only copy.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/long_async"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// create copy to be used inside the goroutine</span></span><br><span class="line">cCp := c.Copy()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// simulate a long task with time.Sleep(). 5 seconds</span></span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line"></span><br><span class="line"><span class="comment">// note that you are using the copied context "cCp", IMPORTANT</span></span><br><span class="line">log.Println(<span class="string">"Done! in path "</span> + cCp.Request.URL.Path)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/long_sync"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// simulate a long task with time.Sleep(). 5 seconds</span></span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line"></span><br><span class="line"><span class="comment">// since we are NOT using a goroutine, we do not have to copy the context</span></span><br><span class="line">log.Println(<span class="string">"Done! in path "</span> + c.Request.URL.Path)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and serve on 0.0.0.0:8080</span></span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Custom-HTTP-configuration"><a href="/2018/10/12/gin/#Custom-HTTP-configuration" class="headerlink" title="Custom HTTP configuration"></a>Custom HTTP configuration</h3><p>Use <code>http.ListenAndServe()</code> directly, like this:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>, router)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">s := &amp;http.Server&#123;</span><br><span class="line">Addr:           <span class="string">":8080"</span>,</span><br><span class="line">Handler:        router,</span><br><span class="line">ReadTimeout:    <span class="number">10</span> * time.Second,</span><br><span class="line">WriteTimeout:   <span class="number">10</span> * time.Second,</span><br><span class="line">MaxHeaderBytes: <span class="number">1</span> &lt;&lt; <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line">s.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Support-Let’s-Encrypt"><a href="/2018/10/12/gin/#Support-Let’s-Encrypt" class="headerlink" title="Support Let’s Encrypt"></a>Support Let’s Encrypt</h3><p>example for 1-line LetsEncrypt HTTPS servers.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gin-gonic/autotls"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ping handler</span></span><br><span class="line">r.GET(<span class="string">"/ping"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">"pong"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">log.Fatal(autotls.Run(r, <span class="string">"example1.com"</span>, <span class="string">"example2.com"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example for custom autocert manager.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gin-gonic/autotls"</span></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"golang.org/x/crypto/acme/autocert"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ping handler</span></span><br><span class="line">r.GET(<span class="string">"/ping"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">"pong"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">m := autocert.Manager&#123;</span><br><span class="line">Prompt:     autocert.AcceptTOS,</span><br><span class="line">HostPolicy: autocert.HostWhitelist(<span class="string">"example1.com"</span>, <span class="string">"example2.com"</span>),</span><br><span class="line">Cache:      autocert.DirCache(<span class="string">"/var/www/.cache"</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Fatal(autotls.RunWithManager(r, &amp;m))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Run-multiple-service-using-Gin"><a href="/2018/10/12/gin/#Run-multiple-service-using-Gin" class="headerlink" title="Run multiple service using Gin"></a>Run multiple service using Gin</h3><p>See the <a href="https://github.com/gin-gonic/gin/issues/346" target="_blank" rel="noopener">question</a> and try the following example:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"golang.org/x/sync/errgroup"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">g errgroup.Group</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">router01</span><span class="params">()</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">e := gin.New()</span><br><span class="line">e.Use(gin.Recovery())</span><br><span class="line">e.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(</span><br><span class="line">http.StatusOK,</span><br><span class="line">gin.H&#123;</span><br><span class="line"><span class="string">"code"</span>:  http.StatusOK,</span><br><span class="line"><span class="string">"error"</span>: <span class="string">"Welcome server 01"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">router02</span><span class="params">()</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">e := gin.New()</span><br><span class="line">e.Use(gin.Recovery())</span><br><span class="line">e.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(</span><br><span class="line">http.StatusOK,</span><br><span class="line">gin.H&#123;</span><br><span class="line"><span class="string">"code"</span>:  http.StatusOK,</span><br><span class="line"><span class="string">"error"</span>: <span class="string">"Welcome server 02"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server01 := &amp;http.Server&#123;</span><br><span class="line">Addr:         <span class="string">":8080"</span>,</span><br><span class="line">Handler:      router01(),</span><br><span class="line">ReadTimeout:  <span class="number">5</span> * time.Second,</span><br><span class="line">WriteTimeout: <span class="number">10</span> * time.Second,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server02 := &amp;http.Server&#123;</span><br><span class="line">Addr:         <span class="string">":8081"</span>,</span><br><span class="line">Handler:      router02(),</span><br><span class="line">ReadTimeout:  <span class="number">5</span> * time.Second,</span><br><span class="line">WriteTimeout: <span class="number">10</span> * time.Second,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> server01.ListenAndServe()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">g.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> server02.ListenAndServe()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := g.Wait(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Graceful-restart-or-stop"><a href="/2018/10/12/gin/#Graceful-restart-or-stop" class="headerlink" title="Graceful restart or stop"></a>Graceful restart or stop</h3><p>Do you want to graceful restart or stop your web server?<br>There are some ways this can be done.</p><p>We can use <a href="https://github.com/fvbock/endless" target="_blank" rel="noopener">fvbock/endless</a> to replace the default <code>ListenAndServe</code>. Refer issue <a href="https://github.com/gin-gonic/gin/issues/296" target="_blank" rel="noopener">#296</a> for more details.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">"/"</span>, handler)</span><br><span class="line"><span class="comment">// [...]</span></span><br><span class="line">endless.ListenAndServe(<span class="string">":4242"</span>, router)</span><br></pre></td></tr></table></figure><p>An alternative to endless:</p><ul><li><a href="https://github.com/braintree/manners" target="_blank" rel="noopener">manners</a>: A polite Go HTTP server that shuts down gracefully.</li><li><a href="https://github.com/tylerb/graceful" target="_blank" rel="noopener">graceful</a>: Graceful is a Go package enabling graceful shutdown of an http.Handler server.</li><li><a href="https://github.com/facebookgo/grace" target="_blank" rel="noopener">grace</a>: Graceful restart &amp; zero downtime deploy for Go servers.</li></ul><p>If you are using Go 1.8, you may not need to use this library! Consider using http.Server’s built-in <a href="https://golang.org/pkg/net/http/#Server.Shutdown" target="_blank" rel="noopener">Shutdown()</a> method for graceful shutdowns. See the full <a href="/2018/10/12/gin/./examples/graceful-shutdown">graceful-shutdown</a> example with gin.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build go1.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"os/signal"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">c.String(http.StatusOK, <span class="string">"Welcome Gin Server"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">srv := &amp;http.Server&#123;</span><br><span class="line">Addr:    <span class="string">":8080"</span>,</span><br><span class="line">Handler: router,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// service connections</span></span><br><span class="line"><span class="keyword">if</span> err := srv.ListenAndServe(); err != <span class="literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;</span><br><span class="line">log.Fatalf(<span class="string">"listen: %s\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait for interrupt signal to gracefully shutdown the server with</span></span><br><span class="line"><span class="comment">// a timeout of 5 seconds.</span></span><br><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line">signal.Notify(quit, os.Interrupt)</span><br><span class="line">&lt;-quit</span><br><span class="line">log.Println(<span class="string">"Shutdown Server ..."</span>)</span><br><span class="line"></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">5</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"><span class="keyword">if</span> err := srv.Shutdown(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"Server Shutdown:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">"Server exiting"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Build-a-single-binary-with-templates"><a href="/2018/10/12/gin/#Build-a-single-binary-with-templates" class="headerlink" title="Build a single binary with templates"></a>Build a single binary with templates</h3><p>You can build a server into a single binary containing templates by using <a href="https://github.com/jessevdk/go-assets" target="_blank" rel="noopener">go-assets</a>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.New()</span><br><span class="line"></span><br><span class="line">t, err := loadTemplate()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">r.SetHTMLTemplate(t)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">"/html/index.tmpl"</span>,<span class="literal">nil</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loadTemplate loads templates embedded by go-assets-builder</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadTemplate</span><span class="params">()</span> <span class="params">(*template.Template, error)</span></span> &#123;</span><br><span class="line">t := template.New(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">for</span> name, file := <span class="keyword">range</span> Assets.Files &#123;</span><br><span class="line"><span class="keyword">if</span> file.IsDir() || !strings.HasSuffix(name, <span class="string">".tmpl"</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">h, err := ioutil.ReadAll(file)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">t, err = t.New(name).Parse(<span class="keyword">string</span>(h))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>See a complete example in the <code>examples/assets-in-binary</code> directory.</p><h3 id="Bind-form-data-request-with-custom-struct"><a href="/2018/10/12/gin/#Bind-form-data-request-with-custom-struct" class="headerlink" title="Bind form-data request with custom struct"></a>Bind form-data request with custom struct</h3><p>The follow example using custom struct:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StructA <span class="keyword">struct</span> &#123;</span><br><span class="line">    FieldA <span class="keyword">string</span> <span class="string">`form:"field_a"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StructB <span class="keyword">struct</span> &#123;</span><br><span class="line">    NestedStruct StructA</span><br><span class="line">    FieldB <span class="keyword">string</span> <span class="string">`form:"field_b"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StructC <span class="keyword">struct</span> &#123;</span><br><span class="line">    NestedStructPointer *StructA</span><br><span class="line">    FieldC <span class="keyword">string</span> <span class="string">`form:"field_c"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StructD <span class="keyword">struct</span> &#123;</span><br><span class="line">    NestedAnonyStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">        FieldX <span class="keyword">string</span> <span class="string">`form:"field_x"`</span></span><br><span class="line">    &#125;</span><br><span class="line">    FieldD <span class="keyword">string</span> <span class="string">`form:"field_d"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDataB</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b StructB</span><br><span class="line">    c.Bind(&amp;b)</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">        <span class="string">"a"</span>: b.NestedStruct,</span><br><span class="line">        <span class="string">"b"</span>: b.FieldB,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDataC</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b StructC</span><br><span class="line">    c.Bind(&amp;b)</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">        <span class="string">"a"</span>: b.NestedStructPointer,</span><br><span class="line">        <span class="string">"c"</span>: b.FieldC,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDataD</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b StructD</span><br><span class="line">    c.Bind(&amp;b)</span><br><span class="line">    c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line">        <span class="string">"x"</span>: b.NestedAnonyStruct,</span><br><span class="line">        <span class="string">"d"</span>: b.FieldD,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.GET(<span class="string">"/getb"</span>, GetDataB)</span><br><span class="line">    r.GET(<span class="string">"/getc"</span>, GetDataC)</span><br><span class="line">    r.GET(<span class="string">"/getd"</span>, GetDataD)</span><br><span class="line"></span><br><span class="line">    r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using the command <code>curl</code> command result:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">"http://localhost:8080/getb?field_a=hello&amp;field_b=world"</span></span><br><span class="line">&#123;<span class="string">"a"</span>:&#123;<span class="string">"FieldA"</span>:<span class="string">"hello"</span>&#125;,<span class="string">"b"</span>:<span class="string">"world"</span>&#125;</span><br><span class="line">$ curl <span class="string">"http://localhost:8080/getc?field_a=hello&amp;field_c=world"</span></span><br><span class="line">&#123;<span class="string">"a"</span>:&#123;<span class="string">"FieldA"</span>:<span class="string">"hello"</span>&#125;,<span class="string">"c"</span>:<span class="string">"world"</span>&#125;</span><br><span class="line">$ curl <span class="string">"http://localhost:8080/getd?field_x=hello&amp;field_d=world"</span></span><br><span class="line">&#123;<span class="string">"d"</span>:<span class="string">"world"</span>,<span class="string">"x"</span>:&#123;<span class="string">"FieldX"</span>:<span class="string">"hello"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>NOTE</strong>: NOT support the follow style struct:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StructX <span class="keyword">struct</span> &#123;</span><br><span class="line">    X <span class="keyword">struct</span> &#123;&#125; <span class="string">`form:"name_x"`</span> <span class="comment">// HERE have form</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StructY <span class="keyword">struct</span> &#123;</span><br><span class="line">    Y StructX <span class="string">`form:"name_y"`</span> <span class="comment">// HERE have form</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StructZ <span class="keyword">struct</span> &#123;</span><br><span class="line">    Z *StructZ <span class="string">`form:"name_z"`</span> <span class="comment">// HERE have form</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In a word, only support nested custom struct which have no <code>form</code> now.</p><h3 id="Try-to-bind-body-into-different-structs"><a href="/2018/10/12/gin/#Try-to-bind-body-into-different-structs" class="headerlink" title="Try to bind body into different structs"></a>Try to bind body into different structs</h3><p>The normal methods for binding request body consumes <code>c.Request.Body</code> and they<br>cannot be called multiple times.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> formA <span class="keyword">struct</span> &#123;</span><br><span class="line">  Foo <span class="keyword">string</span> <span class="string">`json:"foo" xml:"foo" binding:"required"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> formB <span class="keyword">struct</span> &#123;</span><br><span class="line">  Bar <span class="keyword">string</span> <span class="string">`json:"bar" xml:"bar" binding:"required"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SomeHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">  objA := formA&#123;&#125;</span><br><span class="line">  objB := formB&#123;&#125;</span><br><span class="line">  <span class="comment">// This c.ShouldBind consumes c.Request.Body and it cannot be reused.</span></span><br><span class="line">  <span class="keyword">if</span> errA := c.ShouldBind(&amp;objA); errA == <span class="literal">nil</span> &#123;</span><br><span class="line">    c.String(http.StatusOK, <span class="string">`the body should be formA`</span>)</span><br><span class="line">  <span class="comment">// Always an error is occurred by this because c.Request.Body is EOF now.</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> errB := c.ShouldBind(&amp;objB); errB == <span class="literal">nil</span> &#123;</span><br><span class="line">    c.String(http.StatusOK, <span class="string">`the body should be formB`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For this, you can use <code>c.ShouldBindBodyWith</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SomeHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">  objA := formA&#123;&#125;</span><br><span class="line">  objB := formB&#123;&#125;</span><br><span class="line">  <span class="comment">// This reads c.Request.Body and stores the result into the context.</span></span><br><span class="line">  <span class="keyword">if</span> errA := c.ShouldBindBodyWith(&amp;objA, binding.JSON); errA == <span class="literal">nil</span> &#123;</span><br><span class="line">    c.String(http.StatusOK, <span class="string">`the body should be formA`</span>)</span><br><span class="line">  <span class="comment">// At this time, it reuses body stored in the context.</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> errB := c.ShouldBindBodyWith(&amp;objB, binding.JSON); errB == <span class="literal">nil</span> &#123;</span><br><span class="line">    c.String(http.StatusOK, <span class="string">`the body should be formB JSON`</span>)</span><br><span class="line">  <span class="comment">// And it can accepts other formats</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> errB2 := c.ShouldBindBodyWith(&amp;objB, binding.XML); errB2 == <span class="literal">nil</span> &#123;</span><br><span class="line">    c.String(http.StatusOK, <span class="string">`the body should be formB XML`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>c.ShouldBindBodyWith</code> stores body into the context before binding. This has<br>a slight impact to performance, so you should not use this method if you are<br>enough to call binding at once.</li><li>This feature is only needed for some formats – <code>JSON</code>, <code>XML</code>, <code>MsgPack</code>,<br><code>ProtoBuf</code>. For other formats, <code>Query</code>, <code>Form</code>, <code>FormPost</code>, <code>FormMultipart</code>,<br>can be called by <code>c.ShouldBind()</code> multiple times without any damage to<br>performance (See <a href="https://github.com/gin-gonic/gin/pull/1341" target="_blank" rel="noopener">#1341</a>).</li></ul><h3 id="http2-server-push"><a href="/2018/10/12/gin/#http2-server-push" class="headerlink" title="http2 server push"></a>http2 server push</h3><p>http.Pusher is supported only <strong>go1.8+</strong>. See the <a href="https://blog.golang.org/h2push" target="_blank" rel="noopener">golang blog</a> for detail information.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"html/template"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = template.Must(template.New(<span class="string">"https"</span>).Parse(<span class="string">`</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">  &lt;title&gt;Https Test&lt;/title&gt;</span></span><br><span class="line"><span class="string">  &lt;script src="/assets/app.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;h1 style="color:red;"&gt;Welcome, Ginner!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.Static(<span class="string">"/assets"</span>, <span class="string">"./assets"</span>)</span><br><span class="line">r.SetHTMLTemplate(html)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> pusher := c.Writer.Pusher(); pusher != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// use pusher.Push() to do server push</span></span><br><span class="line"><span class="keyword">if</span> err := pusher.Push(<span class="string">"/assets/app.js"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"Failed to push: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">"https"</span>, gin.H&#123;</span><br><span class="line"><span class="string">"status"</span>: <span class="string">"success"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and Server in https://127.0.0.1:8080</span></span><br><span class="line">r.RunTLS(<span class="string">":8080"</span>, <span class="string">"./testdata/server.pem"</span>, <span class="string">"./testdata/server.key"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Define-format-for-the-log-of-routes"><a href="/2018/10/12/gin/#Define-format-for-the-log-of-routes" class="headerlink" title="Define format for the log of routes"></a>Define format for the log of routes</h3><p>The default log of routes is:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[GIN-<span class="builtin-name">debug</span>] POST   /foo                      --&gt; main.main.func1 (3 handlers)</span><br><span class="line">[GIN-<span class="builtin-name">debug</span>] <span class="builtin-name">GET</span>    /bar                      --&gt; main.main.func2 (3 handlers)</span><br><span class="line">[GIN-<span class="builtin-name">debug</span>] <span class="builtin-name">GET</span>    /status                   --&gt; main.main.func3 (3 handlers)</span><br></pre></td></tr></table></figure></p><p>If you want to log this information in given format (e.g. JSON, key values or something else), then you can define this format with <code>gin.DebugPrintRouteFunc</code>.<br>In the example below, we log all routes with standard log package but you can use another log tools that suits of your needs.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">gin.DebugPrintRouteFunc = <span class="function"><span class="keyword">func</span><span class="params">(httpMethod, absolutePath, handlerName <span class="keyword">string</span>, nuHandlers <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">"endpoint %v %v %v %v\n"</span>, httpMethod, absolutePath, handlerName, nuHandlers)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r.POST(<span class="string">"/foo"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, <span class="string">"foo"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/bar"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, <span class="string">"bar"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/status"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, <span class="string">"ok"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen and Server in http://0.0.0.0:8080</span></span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Testing"><a href="/2018/10/12/gin/#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>The <code>net/http/httptest</code> package is preferable way for HTTP testing.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupRouter</span><span class="params">()</span> *<span class="title">gin</span>.<span class="title">Engine</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">"/ping"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">"pong"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := setupRouter()</span><br><span class="line">r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test for code example above:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/stretchr/testify/assert"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPingRoute</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">router := setupRouter()</span><br><span class="line"></span><br><span class="line">w := httptest.NewRecorder()</span><br><span class="line">req, _ := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"/ping"</span>, <span class="literal">nil</span>)</span><br><span class="line">router.ServeHTTP(w, req)</span><br><span class="line"></span><br><span class="line">assert.Equal(t, <span class="number">200</span>, w.Code)</span><br><span class="line">assert.Equal(t, <span class="string">"pong"</span>, w.Body.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Users"><a href="/2018/10/12/gin/#Users" class="headerlink" title="Users"></a>Users</h2><p>Awesome project lists using <a href="https://github.com/gin-gonic/gin" target="_blank" rel="noopener">Gin</a> web framework.</p><ul><li><a href="https://github.com/drone/drone" target="_blank" rel="noopener">drone</a>: Drone is a Continuous Delivery platform built on Docker, written in Go.</li><li><a href="https://github.com/appleboy/gorush" target="_blank" rel="noopener">gorush</a>: A push notification server written in Go.</li><li><a href="https://github.com/fnproject/fn" target="_blank" rel="noopener">fnproject</a>: The container native, cloud agnostic serverless platform.</li></ul>]]></content>
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>免费的编程中文书籍索引</title>
      <link href="/2018/10/07/cnbook/"/>
      <url>/2018/10/07/cnbook/</url>
      <content type="html"><![CDATA[<h2 id="语言无关类"><a href="/2018/10/07/cnbook/#语言无关类" class="headerlink" title="语言无关类"></a>语言无关类</h2><h3 id="操作系统"><a href="/2018/10/07/cnbook/#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li><a href="http://i.linuxtoy.org/docs/guide/index.html" target="_blank" rel="noopener">开源世界旅行手册</a></li><li><a href="http://vbird.dic.ksu.edu.tw/" target="_blank" rel="noopener">鸟哥的Linux私房菜</a></li><li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="noopener">The Linux Command Line</a> (中英文版)</li><li><a href="http://oss.org.cn/kernel-book/ldd3/index.html" target="_blank" rel="noopener">Linux 设备驱动</a> (第三版)</li><li><a href="http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html" target="_blank" rel="noopener">深入分析Linux内核源码</a></li><li><a href="http://cb.vu/unixtoolbox_zh_CN.xhtml" target="_blank" rel="noopener">UNIX TOOLBOX</a></li><li><a href="https://github.com/widuu/chinese_docker" target="_blank" rel="noopener">Docker中文指南</a></li><li><a href="https://github.com/yeasy/docker_practice" target="_blank" rel="noopener">Docker —— 从入门到实践</a></li><li><a href="http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1" target="_blank" rel="noopener">Docker入门实战</a></li><li><a href="https://github.com/wsargent/docker-cheat-sheet/tree/master/zh-cn#docker-cheat-sheet" target="_blank" rel="noopener">Docker Cheat Sheet</a></li><li><a href="http://freeradius.akagi201.org" target="_blank" rel="noopener">FreeRADIUS新手入门</a></li><li><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="noopener">Mac 开发配置手册</a></li><li><a href="https://www.freebsd.org/doc/zh_CN/books/handbook/index.html" target="_blank" rel="noopener">FreeBSD 使用手册</a></li><li><a href="http://billie66.github.io/TLCL/book/" target="_blank" rel="noopener">Linux 命令行(中文版)</a></li><li><a href="http://works.jinbuguo.com/lfs/lfs62/index.html" target="_blank" rel="noopener">Linux 构建指南</a></li><li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="noopener">Linux工具快速教程</a></li><li><a href="https://www.gitbook.com/book/tinylab/linux-doc/details" target="_blank" rel="noopener">Linux Documentation (中文版)</a></li><li><a href="https://www.gitbook.com/book/tinylab/elinux/details" target="_blank" rel="noopener">嵌入式 Linux 知识库 (eLinux.org 中文版)</a></li><li><a href="https://github.com/tobegit3hub/understand_linux_process" target="_blank" rel="noopener">理解Linux进程</a></li><li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="noopener">命令行的艺术</a></li><li><a href="https://spacewander.gitbooks.io/systemtapbeginnersguide_zh/content/index.html" target="_blank" rel="noopener">SystemTap新手指南</a></li><li><a href="https://github.com/wizardforcel/think-os-zh" target="_blank" rel="noopener">操作系统思考</a></li></ul><h4 id="智能系统"><a href="/2018/10/07/cnbook/#智能系统" class="headerlink" title="智能系统"></a>智能系统</h4><ul><li><a href="https://github.com/phodal/designiot" target="_blank" rel="noopener">一步步搭建物联网系统</a></li></ul><h3 id="分布式系统"><a href="/2018/10/07/cnbook/#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h3><ul><li><a href="http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf" target="_blank" rel="noopener">走向分布式</a></li></ul><h3 id="编译原理"><a href="/2018/10/07/cnbook/#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><ul><li><a href="https://github.com/DeathKing/Learning-SICP" target="_blank" rel="noopener">《计算机程序的结构和解释》公开课 翻译项目</a></li></ul><h3 id="函数式概念"><a href="/2018/10/07/cnbook/#函数式概念" class="headerlink" title="函数式概念"></a>函数式概念</h3><ul><li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="noopener">傻瓜函数编程</a></li></ul><h3 id="计算机图形学"><a href="/2018/10/07/cnbook/#计算机图形学" class="headerlink" title="计算机图形学"></a>计算机图形学</h3><ul><li><a href="https://github.com/zilongshanren/opengl-tutorials" target="_blank" rel="noopener">OpenGL 教程</a></li><li><a href="http://html5.iii.org.tw/course/webgl/" target="_blank" rel="noopener">WebGL自学网</a></li></ul><h3 id="WEB服务器"><a href="/2018/10/07/cnbook/#WEB服务器" class="headerlink" title="WEB服务器"></a>WEB服务器</h3><ul><li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="noopener">Nginx开发从入门到精通</a> (淘宝团队出品)</li><li><a href="http://www.ttlsa.com/nginx/nginx-stu-pdf/" target="_blank" rel="noopener">Nginx教程从入门到精通</a>(PDF版本，运维生存时间出品)</li><li><a href="https://www.gitbook.com/book/moonbingbing/openresty-best-practices/details" target="_blank" rel="noopener">OpenResty最佳实践</a></li><li><a href="http://works.jinbuguo.com/apache/menu22/index.html" target="_blank" rel="noopener">Apache 中文手册</a></li></ul><h3 id="版本控制"><a href="/2018/10/07/cnbook/#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul><li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a> （本文由 <a href="http://www.liaoxuefeng.com" target="_blank" rel="noopener">廖雪峰</a> 创作，如果觉得本教程对您有帮助，可以去 <a href="https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437" target="_blank" rel="noopener">iTunes</a> 购买）</li><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">git - 简易指南</a></li><li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="noopener">猴子都能懂的GIT入门</a></li><li><a href="http://gitref.justjavac.com" target="_blank" rel="noopener">Git 参考手册</a></li><li><a href="http://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git</a></li><li><a href="https://www.gitbook.com/book/0532/progit/details" target="_blank" rel="noopener">Pro Git 中文版</a> (整理在gitbook上)</li><li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="noopener">Git Magic</a></li><li><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="noopener">GotGitHub</a></li><li><a href="http://www.worldhello.net/gotgit/" target="_blank" rel="noopener">Git权威指南</a></li><li><a href="http://gitbook.liuhui998.com/index.html" target="_blank" rel="noopener">Git Community Book 中文版</a></li><li><a href="https://www.mercurial-scm.org/wiki/ChineseTutorial" target="_blank" rel="noopener">Mercurial 使用教程</a></li><li><a href="http://bucunzai.net/hginit/" target="_blank" rel="noopener">HgInit (中文版)</a></li><li><a href="http://igit.linuxtoy.org" target="_blank" rel="noopener">沉浸式学 Git</a></li><li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="noopener">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li><li><a href="https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/index.html" target="_blank" rel="noopener">GitHub秘籍</a></li><li><a href="https://github.com/waylau/github-help" target="_blank" rel="noopener">GitHub帮助文档</a></li><li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="noopener">git-flow 备忘清单</a></li><li><a href="http://svnbook.red-bean.com/nightly/zh/index.html" target="_blank" rel="noopener">svn 手册</a></li><li><a href="https://github.com/phodal/github-roam" target="_blank" rel="noopener">GitHub漫游指南</a></li></ul><h3 id="编辑器"><a href="/2018/10/07/cnbook/#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ul><li><a href="http://exvim.github.io/docs-zh/intro/" target="_blank" rel="noopener">exvim–vim 改良成IDE项目</a></li><li><a href="http://learnvimscriptthehardway.onefloweroneworld.com/" target="_blank" rel="noopener">笨方法学Vimscript 中译本</a></li><li><a href="https://github.com/vimcn/vimcdoc" target="_blank" rel="noopener">Vim中文文档</a></li><li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="noopener">所需即所获：像 IDE 一样使用 vim</a></li><li><a href="https://github.com/wizardforcel/atom-flight-manual-zh-cn" target="_blank" rel="noopener">Atom飞行手册中文版</a></li><li><a href="https://github.com/wizardforcel/markdown-simple-world" target="_blank" rel="noopener">Markdown·简单的世界</a></li><li><a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org" target="_blank" rel="noopener">一年成为 Emacs 高手</a></li><li><a href="http://lifegoo.pluskid.org/upload/blog/152/Survive.in.Emacs.pdf" target="_blank" rel="noopener">Emacs 生存指南</a></li><li><a href="https://atom-china.org/t/atom/62" target="_blank" rel="noopener">Atom官方手册</a></li></ul><h3 id="NoSQL"><a href="/2018/10/07/cnbook/#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><ul><li><a href="http://old.sebug.net/paper/databases/nosql/Nosql.html" target="_blank" rel="noopener">NoSQL数据库笔谈</a></li><li><a href="http://redisbook.com/" target="_blank" rel="noopener">Redis 设计与实现</a></li><li><a href="http://redisdoc.com/" target="_blank" rel="noopener">Redis 命令参考</a></li><li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="noopener">带有详细注释的 Redis 3.0 代码</a></li><li><a href="https://github.com/huangz1990/annotated_redis_source" target="_blank" rel="noopener">带有详细注释的 Redis 2.6 代码</a></li><li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md" target="_blank" rel="noopener">The Little MongoDB Book</a></li><li><a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md" target="_blank" rel="noopener">The Little Redis Book</a></li><li><a href="http://docs.neo4j.org.cn/" target="_blank" rel="noopener">Neo4j 简体中文手册 v1.8</a></li><li><a href="http://neo4j.tw/" target="_blank" rel="noopener">Neo4j .rb 中文資源</a></li><li><a href="http://disquebook.com" target="_blank" rel="noopener">Disque 使用教程</a></li><li><a href="https://github.com/JerryLead/SparkInternals/tree/master/markdown" target="_blank" rel="noopener">Apache Spark 设计与实现</a></li></ul><h3 id="PostgreSQL"><a href="/2018/10/07/cnbook/#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><ul><li><a href="http://works.jinbuguo.com/postgresql/menu823/index.html" target="_blank" rel="noopener">PostgreSQL 8.2.3 中文文档</a></li><li><a href="http://www.postgres.cn/docs/9.3/index.html" target="_blank" rel="noopener">PostgreSQL 9.3.1 中文文档</a></li><li><a href="http://www.postgres.cn/docs/9.5/index.html" target="_blank" rel="noopener">PostgreSQL 9.5.3 中文文档</a></li></ul><h3 id="MySQL"><a href="/2018/10/07/cnbook/#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></li><li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="noopener">21分钟MySQL入门教程</a></li></ul><h3 id="管理和监控"><a href="/2018/10/07/cnbook/#管理和监控" class="headerlink" title="管理和监控"></a>管理和监控</h3><ul><li><a href="http://kibana.logstash.es" target="_blank" rel="noopener">ELKstack 中文指南</a></li><li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="noopener">Mastering Elasticsearch(中文版)</a></li><li><a href="https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details" target="_blank" rel="noopener">ElasticSearch 权威指南</a></li><li><a href="http://es.xiaoleilu.com" target="_blank" rel="noopener">Elasticsearch 权威指南（中文版）</a></li><li><a href="https://github.com/chenryn/logstash-best-practice-cn" target="_blank" rel="noopener">Logstash 最佳实践</a></li><li><a href="http://bbs.konotes.org/workdoc/puppet-27/" target="_blank" rel="noopener">Puppet 2.7 Cookbook 中文版</a></li></ul><h3 id="项目相关"><a href="/2018/10/07/cnbook/#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><ul><li><a href="http://article.yeeyan.org/view/2251/94882" target="_blank" rel="noopener">持续集成（第二版）</a> (译言网)</li><li><a href="http://www.ibm.com/developerworks/cn/java/j-ap/" target="_blank" rel="noopener">让开发自动化系列专栏</a></li><li><a href="http://www.ibm.com/developerworks/cn/java/j-cq/" target="_blank" rel="noopener">追求代码质量</a></li><li><a href="https://github.com/fool2fish/selenium-doc" target="_blank" rel="noopener">selenium 中文文档</a></li><li><a href="http://it-ebooks.flygon.net/selenium-simple-tutorial/" target="_blank" rel="noopener">Selenium Webdriver 简易教程</a></li><li><a href="http://local.joelonsoftware.com/wiki/Chinese_\(Simplified\" target="_blank" rel="noopener">Joel谈软件</a>)</li><li><a href="http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81" target="_blank" rel="noopener">約耳談軟體(Joel on Software)</a></li><li><a href="https://github.com/waylau/Gradle-2-User-Guide" target="_blank" rel="noopener">Gradle 2 用户指南</a></li><li><a href="http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2" target="_blank" rel="noopener">Gradle 中文使用文档</a></li><li><a href="https://github.com/ecomfe/spec" target="_blank" rel="noopener">编码规范</a></li><li><a href="http://www.ituring.com.cn/book/1143" target="_blank" rel="noopener">开源软件架构</a></li><li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="noopener">GNU make 指南</a></li><li><a href="http://www.yayu.org/book/gnu_make/" target="_blank" rel="noopener">GNU make 中文手册</a></li><li><a href="http://12factor.net/zh_cn/" target="_blank" rel="noopener">The Twelve-Factor App</a></li></ul><h3 id="设计模式"><a href="/2018/10/07/cnbook/#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li><a href="https://github.com/me115/design_patterns" target="_blank" rel="noopener">图说设计模式</a></li><li><a href="http://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="noopener">史上最全设计模式导学目录</a></li><li><a href="https://github.com/AlfredTheBest/Design-Pattern" target="_blank" rel="noopener">design pattern 包教不包会</a></li><li><a href="https://quanke.gitbooks.io/design-pattern-java/content/" target="_blank" rel="noopener">设计模式 Java 版</a></li></ul><h3 id="Web"><a href="/2018/10/07/cnbook/#Web" class="headerlink" title="Web"></a>Web</h3><ul><li><a href="http://www.20thingsilearned.com/zh-CN/home" target="_blank" rel="noopener">关于浏览器和网络的 20 项须知</a></li><li><a href="http://jinlong.github.io/2013/08/29/devtoolsecrets/" target="_blank" rel="noopener">浏览器开发工具的秘密</a></li><li><a href="https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools" target="_blank" rel="noopener">Chrome 开发者工具中文手册</a></li><li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="noopener">Chrome扩展开发文档</a></li><li><a href="http://www.gruntjs.net/" target="_blank" rel="noopener">Grunt中文文档</a></li><li><a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="noopener">gulp中文文档</a></li><li><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="noopener">Gulp 入门指南</a></li><li><a href="https://github.com/AlloyTeam/Mars" target="_blank" rel="noopener">移动Web前端知识库</a></li><li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程</a></li><li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="noopener">前端开发体系建设日记</a></li><li><a href="https://github.com/hoosin/mobile-web-favorites" target="_blank" rel="noopener">移动前端开发收藏夹</a></li><li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="noopener">JSON风格指南</a></li><li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="noopener">HTTP 接口设计指北</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/1" target="_blank" rel="noopener">前端资源分享（一）</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/3" target="_blank" rel="noopener">前端资源分享（二）</a></li><li><a href="http://coderlmn.github.io/code-standards/" target="_blank" rel="noopener">前端代码规范 及 最佳实践</a></li><li><a href="https://www.gitbook.com/book/dwqs/frontenddevhandbook/details" target="_blank" rel="noopener">前端开发者手册</a></li><li><a href="https://www.gitbook.com/book/leohxj/front-end-database/details" target="_blank" rel="noopener">前端工程师手册</a></li><li><a href="https://github.com/wizardforcel/w3school" target="_blank" rel="noopener">w3school教程整理</a></li><li><a href="http://man.lupaworld.com/content/network/wireshark/index.html" target="_blank" rel="noopener">Wireshark用户手册</a></li><li><a href="https://community.emc.com/thread/194901" target="_blank" rel="noopener">一站式学习Wireshark</a></li><li><a href="http://happypeter.github.io/tealeaf-http/" target="_blank" rel="noopener">HTTP 下午茶</a></li><li><a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1" target="_blank" rel="noopener">HTTP/2.0 中文翻译</a></li><li><a href="https://github.com/abbshr/rfc7540-translation-zh_cn" target="_blank" rel="noopener">RFC 7540 - HTTP/2 中文翻译版</a></li><li><a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="noopener">http2讲解</a></li><li><a href="https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details" target="_blank" rel="noopener">3 Web Designs in 3 Weeks</a></li><li><a href="https://github.com/hellorocky/Site-Reliability-Engineering" target="_blank" rel="noopener">站点可靠性工程</a></li></ul><h3 id="大数据"><a href="/2018/10/07/cnbook/#大数据" class="headerlink" title="大数据"></a>大数据</h3><ul><li><a href="https://github.com/Flowerowl/Big-Data-Resources" target="_blank" rel="noopener">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li><li><a href="https://github.com/egrcc/guidetodatamining" target="_blank" rel="noopener">面向程序员的数据挖掘指南</a></li><li><a href="https://code.csdn.net/CODE_Translation/spark_matei_phd" target="_blank" rel="noopener">大型集群上的快速和通用数据处理架构</a></li><li><a href="https://github.com/linyiqun/DataMiningAlgorithm" target="_blank" rel="noopener">数据挖掘中经典的算法实现和详细的注释</a></li><li><a href="https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/" target="_blank" rel="noopener">Spark 编程指南简体中文版</a></li></ul><h2 id="编程艺术"><a href="/2018/10/07/cnbook/#编程艺术" class="headerlink" title="编程艺术"></a>编程艺术</h2><ul><li><a href="https://github.com/julycoding/The-Art-Of-Programming-by-July" target="_blank" rel="noopener">程序员编程艺术</a></li><li><a href="http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print" target="_blank" rel="noopener">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li><li><a href="http://read.douban.com/ebook/4972883/" target="_blank" rel="noopener">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)</li></ul><h2 id="其它"><a href="/2018/10/07/cnbook/#其它" class="headerlink" title="其它"></a>其它</h2><ul><li><a href="https://www.gitbook.com/book/softwaredownload/openwrt-fanqiang/details" target="_blank" rel="noopener">OpenWrt智能、自动、透明翻墙路由器教程</a></li><li><a href="https://community.emc.com/docs/DOC-16067" target="_blank" rel="noopener">SAN 管理入门系列</a></li><li><a href="http://sketchcn.com/sketch-chinese-user-manual.html#introduce" target="_blank" rel="noopener">Sketch 中文手册</a></li><li><a href="http://ifeve.com/perfbook/" target="_blank" rel="noopener">深入理解并行编程</a></li><li><a href="http://www.kancloud.cn/kancloud/a-programmer-prepares" target="_blank" rel="noopener">程序员的自我修养</a></li><li><a href="https://github.com/phodal/growth-ebook" target="_blank" rel="noopener">Growth: 全栈增长工程师指南</a></li></ul><h2 id="语言相关类"><a href="/2018/10/07/cnbook/#语言相关类" class="headerlink" title="语言相关类"></a>语言相关类</h2><h3 id="Android"><a href="/2018/10/07/cnbook/#Android" class="headerlink" title="Android"></a>Android</h3><ul><li><a href="http://www.apkbus.com/design/index.html" target="_blank" rel="noopener">Android Design(中文版)</a></li><li>Google Material Design 正體中文版 (<a href="https://wcc723.gitbooks.io/google_design_translate/content/style-icons.html" target="_blank" rel="noopener">译本一</a> <a href="https://github.com/1sters/material_design_zh" target="_blank" rel="noopener">译本二</a>)</li><li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="noopener">Material Design 中文版</a></li><li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="noopener">Google Android官方培训课程中文版</a></li><li><a href="http://www.stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="noopener">Android学习之路</a></li><li><a href="https://github.com/bboyfeiyu/android-tech-frontier" target="_blank" rel="noopener">Android开发技术前线(android-tech-frontier)</a></li><li><a href="https://github.com/FX-Max/Point-of-Android" target="_blank" rel="noopener">Point-of-Android</a> Android 一些重要知识点解析整理</li><li><a href="http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">Android6.0新特性详解</a></li></ul><h3 id="APP"><a href="/2018/10/07/cnbook/#APP" class="headerlink" title="APP"></a>APP</h3><ul><li><a href="https://github.com/waylau/cordova-dev-guide" target="_blank" rel="noopener">Apache Cordova 开发指南</a></li></ul><h3 id="AWK"><a href="/2018/10/07/cnbook/#AWK" class="headerlink" title="AWK"></a>AWK</h3><ul><li><a href="https://github.com/wuzhouhui/awk" target="_blank" rel="noopener">awk程序设计语言</a></li><li><a href="http://awk.readthedocs.org/en/latest/index.html" target="_blank" rel="noopener">awk中文指南</a></li></ul><h3 id="C-C"><a href="/2018/10/07/cnbook/#C-C" class="headerlink" title="C/C++"></a>C/C++</h3><ul><li><a href="http://zh.cppreference.com/" target="_blank" rel="noopener">C/C++ 中文参考手册</a> (欢迎大家参与在线翻译和校对)</li><li><a href="https://www.gitbook.com/book/tinylab/cbook/details" target="_blank" rel="noopener">C 语言编程透视</a></li><li><a href="https://github.com/forhappy/Cplusplus-Concurrency-In-Practice" target="_blank" rel="noopener">C++ 并发编程指南</a></li><li><a href="http://akaedu.github.io/book/" target="_blank" rel="noopener">Linux C编程一站式学习</a> (宋劲杉, 北京亚嵌教育研究中心)</li><li><a href="https://github.com/leeyiw/cgdb-manual-in-chinese" target="_blank" rel="noopener">CGDB中文手册</a></li><li><a href="https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md" target="_blank" rel="noopener">100个gdb小技巧</a></li><li><a href="https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md" target="_blank" rel="noopener">100个gcc小技巧</a></li><li><a href="https://github.com/anjuke/zguide-cn" target="_blank" rel="noopener">ZMQ 指南</a></li><li><a href="http://www.ituring.com.cn/book/1203" target="_blank" rel="noopener">How to Think Like a Computer Scientist</a> (中英文版)</li><li><a href="http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf" target="_blank" rel="noopener">跟我一起写Makefile(PDF)</a></li><li><a href="http://www.yayu.org/book/gnu_make/" target="_blank" rel="noopener">GNU make中文手册</a></li><li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="noopener">GNU make 指南</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="noopener">Google C++ 风格指南</a></li><li><a href="https://github.com/andycai/cprimer" target="_blank" rel="noopener">C/C++ Primer</a> (by @andycai)</li><li><a href="http://www.nowamagic.net/librarys/books/contents/c" target="_blank" rel="noopener">简单易懂的C魔法</a></li><li><a href="http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf" target="_blank" rel="noopener">Cmake 实践</a> (PDF版)</li><li><a href="http://www.sunistudio.com/cppfaq/" target="_blank" rel="noopener">C++ FAQ LITE(中文版)</a></li><li><a href="https://github.com/Mooophy/Cpp-Primer" target="_blank" rel="noopener">C++ Primer 5th Answers</a></li><li><a href="https://www.gitbook.com/book/chenxiaowei/cpp_concurrency_in_action/details" target="_blank" rel="noopener">C++ 并发编程(基于C++11)</a></li><li><a href="http://www.kuqin.com/qtdocument/tutorial.html" target="_blank" rel="noopener">QT 教程</a></li><li><a href="http://www.devbean.net/category/qt-study-road-2/" target="_blank" rel="noopener">DevBean的《Qt学习之路2》(Qt5)</a></li><li><a href="https://github.com/wuye9036/CppTemplateTutorial" target="_blank" rel="noopener">C++ Template 进阶指南</a></li><li><a href="https://github.com/luohaha/Chinese-uvbook" target="_blank" rel="noopener">libuv中文教程</a></li><li><a href="http://zh.highscore.de/cpp/boost/" target="_blank" rel="noopener">Boost 库中文教程</a></li><li><a href="https://github.com/wizardforcel/lcthw-zh" target="_blank" rel="noopener">笨办法学C</a></li></ul><h3 id="C-35"><a href="/2018/10/07/cnbook/#C-35" class="headerlink" title="C&#35;"></a>C&#35;</h3><ul><li><a href="https://msdn.microsoft.com/zh-cn/library/kx37x362.aspx" target="_blank" rel="noopener">MSDN C# 中文文档</a></li><li><a href="https://msdn.microsoft.com/zh-cn/library/gg145045.aspx" target="_blank" rel="noopener">.NET 类库参考</a></li><li><a href="http://www.cnblogs.com/powertoolsteam/p/aspnetmvc5-tutorials-grapecity.html" target="_blank" rel="noopener">ASP.NET MVC 5 入门指南</a></li><li><a href="http://www.cnblogs.com/LonelyShadow/p/4162318.html" target="_blank" rel="noopener">超全面的 .NET GDI+ 图形图像编程教程</a></li><li><a href="https://github.com/JackWangCUMT/customcontrol" target="_blank" rel="noopener">.NET控件开发基础</a></li><li><a href="https://github.com/sherlockchou86/-free-ebook-.NET-" target="_blank" rel="noopener">.NET开发要点精讲（初稿）</a></li></ul><h3 id="Clojure"><a href="/2018/10/07/cnbook/#Clojure" class="headerlink" title="Clojure"></a>Clojure</h3><ul><li><a href="http://xumingming.sinaapp.com/302/clojure-functional-programming-for-the-jvm-clojure-tutorial/" target="_blank" rel="noopener">Clojure入门教程</a></li></ul><h3 id="csshtml">CSS/HTML</h3><ul><li><a href="http://zh.learnlayout.com/" target="_blank" rel="noopener">学习CSS布局</a></li><li><a href="https://github.com/chadluo/CSS-Guidelines/blob/master/README.md" target="_blank" rel="noopener">通用 CSS 笔记、建议与指导</a></li><li><a href="http://css.doyoe.com/" target="_blank" rel="noopener">CSS参考手册</a></li><li><a href="http://yanxyz.github.io/emmet-docs/" target="_blank" rel="noopener">Emmet 文档</a></li><li><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="noopener">前端代码规范</a> (腾讯 AlloyTeam 团队)</li><li><a href="http://codeguide.bootcss.com/" target="_blank" rel="noopener">HTML和CSS编码规范</a></li><li><a href="http://sass-guidelin.es/zh/" target="_blank" rel="noopener">Sass Guidelines 中文</a></li><li><a href="https://github.com/waylau/css3-tutorial" target="_blank" rel="noopener">CSS3 Tutorial 《CSS3 教程》</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML" target="_blank" rel="noopener">MDN HTML 中文文档</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS" target="_blank" rel="noopener">MDN CSS 中文文档</a></li></ul><h3 id="Dart"><a href="/2018/10/07/cnbook/#Dart" class="headerlink" title="Dart"></a>Dart</h3><ul><li><a href="http://dart.lidian.info/wiki/Language_Tour" target="_blank" rel="noopener">Dart 语言导览</a></li></ul><h3 id="Elixir"><a href="/2018/10/07/cnbook/#Elixir" class="headerlink" title="Elixir"></a>Elixir</h3><ul><li><a href="https://github.com/straightdave/programming_elixir" target="_blank" rel="noopener">Elixir编程入门</a></li></ul><h3 id="Erlang"><a href="/2018/10/07/cnbook/#Erlang" class="headerlink" title="Erlang"></a>Erlang</h3><ul><li><a href="http://xn--21erlang-p00o82pmp3o.github.io/" target="_blank" rel="noopener">21天学通Erlang</a></li></ul><h3 id="Fortran"><a href="/2018/10/07/cnbook/#Fortran" class="headerlink" title="Fortran"></a>Fortran</h3><ul><li><a href="http://micro.ustc.edu.cn/Fortran/ZJDing/" target="_blank" rel="noopener">Fortran77和90/95编程入门</a></li></ul><h3 id="Go"><a href="/2018/10/07/cnbook/#Go" class="headerlink" title="Go"></a>Go</h3><ul><li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="noopener">Go编程基础</a></li><li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="noopener">Go入门指南</a></li><li><a href="http://mikespook.com/learning-go/" target="_blank" rel="noopener">学习Go语言</a></li><li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="noopener">Go Web 编程</a> (此书已经出版，希望开发者们去购买，支持作者的创作)</li><li><a href="https://github.com/astaxie/Go-in-Action" target="_blank" rel="noopener">Go实战开发</a> (当我收录此项目时，作者已经写完第三章，如果读完前面章节觉得有帮助，可以给作者<a href="https://me.alipay.com/astaxie" target="_blank" rel="noopener">捐赠</a>，以鼓励作者的继续创作)</li><li><a href="https://github.com/astaxie/NPWG_zh" target="_blank" rel="noopener">Network programming with Go 中文翻译版本</a></li><li><a href="http://www.hellogcc.org/effective_go.html" target="_blank" rel="noopener">Effective Go</a></li><li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example" target="_blank" rel="noopener">Go 语言标准库</a></li><li><a href="http://godoc.ml/" target="_blank" rel="noopener">Golang标准库文档</a></li><li><a href="http://gorevel.cn/docs/manual/index.html" target="_blank" rel="noopener">Revel 框架手册</a></li><li><a href="http://blog.csdn.net/dc_726/article/details/46565241" target="_blank" rel="noopener">Java程序员的Golang入门指南</a></li><li><a href="https://github.com/hyper-carrot/go_command_tutorial" target="_blank" rel="noopener">Go命令教程</a></li><li><a href="https://github.com/achun/Go-Blog-In-Action" target="_blank" rel="noopener">Go语言博客实践</a></li><li><a href="https://github.com/golang-china/golangdoc.translations" target="_blank" rel="noopener">Go 官方文档翻译</a></li><li><a href="https://github.com/tiancaiamao/go-internals" target="_blank" rel="noopener">深入解析Go</a></li><li><a href="https://bitbucket.org/golang-china/gopl-zh/wiki/Home" target="_blank" rel="noopener">Go语言圣经(中文版)</a> (<a href="https://www.gitbook.com/book/wizardforcel/gopl-zh/details" target="_blank" rel="noopener">GitBook</a>)</li></ul><h3 id="Groovy"><a href="/2018/10/07/cnbook/#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><ul><li><a href="http://www.ibm.com/developerworks/cn/java/j-pg/" target="_blank" rel="noopener">实战 Groovy 系列</a></li></ul><h3 id="Haskell"><a href="/2018/10/07/cnbook/#Haskell" class="headerlink" title="Haskell"></a>Haskell</h3><ul><li><a href="http://rwh.readthedocs.org/en/latest/" target="_blank" rel="noopener">Real World Haskell 中文版</a></li><li><a href="http://fleurer-lee.com/lyah/" target="_blank" rel="noopener">Haskell趣学指南</a></li></ul><h3 id="iOS"><a href="/2018/10/07/cnbook/#iOS" class="headerlink" title="iOS"></a>iOS</h3><ul><li><a href="https://github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="noopener">iOS开发60分钟入门</a></li><li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html" target="_blank" rel="noopener">iOS7人机界面指南</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/" target="_blank" rel="noopener">Google Objective-C Style Guide 中文版</a></li><li><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="noopener">iPhone 6 屏幕揭秘</a></li><li><a href="http://nilsun.github.io/apple-watch/" target="_blank" rel="noopener">Apple Watch开发初探</a></li><li><a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/index.html" target="_blank" rel="noopener">马上着手开发 iOS 应用程序</a></li><li><a href="https://github.com/jkyin/Subtitle" target="_blank" rel="noopener">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li></ul><h3 id="Java"><a href="/2018/10/07/cnbook/#Java" class="headerlink" title="Java"></a>Java</h3><ul><li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="noopener">Apache Shiro 用户指南</a></li><li><a href="https://github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="noopener">Jersey 2.x 用户指南</a></li><li><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="noopener">Spring Framework 4.x参考文档</a></li><li><a href="https://github.com/qibaoguang/Spring-Boot-Reference-Guide" target="_blank" rel="noopener">Spring Boot参考指南</a> (翻译中)</li><li><a href="http://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">MyBatis中文文档</a></li><li><a href="http://mbg.cndocs.tk/" target="_blank" rel="noopener">MyBatis Generator 中文文档</a></li><li><a href="https://github.com/waylau/RestDemo" target="_blank" rel="noopener">用jersey构建REST服务</a></li><li><a href="https://github.com/waylau/activiti-5.x-user-guide" target="_blank" rel="noopener">Activiti 5.x 用户指南</a></li><li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="noopener">Google Java编程风格指南</a></li><li><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="noopener">Netty 4.x 用户指南</a></li><li><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="noopener">Netty 实战(精髓)</a></li><li><a href="https://github.com/waylau/rest-in-action" target="_blank" rel="noopener">REST 实战</a></li><li><a href="https://github.com/waylau/java-code-conventions" target="_blank" rel="noopener">Java 编码规范</a></li><li><a href="https://github.com/waylau/apache-mina-2.x-user-guide" target="_blank" rel="noopener">Apache MINA 2 用户指南</a></li><li><a href="https://github.com/waylau/h2-database-doc" target="_blank" rel="noopener">H2 Database 教程</a></li><li><a href="https://github.com/waylau/servlet-3.1-specification" target="_blank" rel="noopener">Java Servlet 3.1 规范</a></li><li><a href="https://github.com/waylau/jsse-reference-guide" target="_blank" rel="noopener">JSSE 参考指南</a></li><li><a href="https://github.com/biezhi/jb" target="_blank" rel="noopener">Java开源实现及最佳实践</a></li><li><a href="https://github.com/waylau/essential-java" target="_blank" rel="noopener">Java 编程要点</a></li><li><a href="http://www.ituring.com.cn/minibook/69" target="_blank" rel="noopener">Think Java</a></li><li><a href="https://github.com/wizardforcel/modern-java-zh" target="_blank" rel="noopener">Java 8 简明教程</a></li></ul><h3 id="JavaScript"><a href="/2018/10/07/cnbook/#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li><a href="http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html" target="_blank" rel="noopener">Google JavaScript 代码风格指南</a></li><li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="noopener">Google JSON 风格指南</a></li><li><a href="https://github.com/adamlu/javascript-style-guide" target="_blank" rel="noopener">Airbnb JavaScript 规范</a></li><li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">JavaScript 标准参考教程（alpha）</a></li><li><a href="http://pij.robinqu.me/" target="_blank" rel="noopener">Javascript编程指南</a> (<a href="https://github.com/RobinQu/Programing-In-Javascript" target="_blank" rel="noopener">源码</a>)</li><li><a href="https://github.com/justjavac/12-javascript-quirks" target="_blank" rel="noopener">javascript 的 12 个怪癖</a></li><li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">JavaScript 秘密花园</a></li><li><a href="http://icodeit.org/jsccp/" target="_blank" rel="noopener">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</li><li><a href="https://github.com/jayli/javascript-patterns" target="_blank" rel="noopener">《JavaScript 模式》</a> “JavaScript patterns”中译本</li><li><a href="http://justjavac.com/named-function-expressions-demystified.html" target="_blank" rel="noopener">命名函数表达式探秘</a>  (注:原文由<a href="http://www.cn-cuckoo.com" target="_blank" rel="noopener">为之漫笔</a>翻译，原始地址无法打开，所以此处地址为我博客上的备份)</li><li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="noopener">学用 JavaScript 设计模式</a> (开源中国)</li><li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="noopener">深入理解JavaScript系列</a>   </li><li><a href="http://yanhaijing.com/es5" target="_blank" rel="noopener">ECMAScript 5.1 中文版</a>   </li><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a> (作者：阮一峰)</li><li><a href="http://liubin.github.io/promises-book/" target="_blank" rel="noopener">JavaScript Promise迷你书</a></li><li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="noopener">You-Dont-Know-JS</a> (深入JavaScript语言核心机制的系列图书)</li><li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="noopener">JavaScript 教程</a> 廖雪峰</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN JavaScript 中文文档</a></li><li>jQuery<ul><li><a href="http://www.cn-cuckoo.com/deconstructed/jquery.html" target="_blank" rel="noopener">jQuery 解构</a></li><li><a href="http://www.nowamagic.net/librarys/books/contents/jquery" target="_blank" rel="noopener">简单易懂的JQuery魔法</a></li><li><a href="http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="noopener">How to write jQuery plugin</a></li><li><a href="https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.zh-CN.md" target="_blank" rel="noopener">You Don’t Need jQuery</a></li><li><a href="https://github.com/MeCKodo/forchange" target="_blank" rel="noopener">如何实现一个类jQuery？</a></li></ul></li><li>Node.js<ul><li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener">Node入门</a></li><li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="noopener">七天学会NodeJS</a></li><li><a href="https://github.com/nodejs-tw/nodejs-wiki-book" target="_blank" rel="noopener">Nodejs Wiki Book</a> (繁体中文)</li><li><a href="http://expressjs.jser.us/" target="_blank" rel="noopener">express.js 中文文档</a></li><li><a href="https://github.com/guo-yu/koa-guide" target="_blank" rel="noopener">koa 中文文档</a></li><li><a href="http://base-n.github.io/koa-generator-examples/" target="_blank" rel="noopener">一起学koa</a></li><li><a href="https://github.com/nswbmw/N-blog" target="_blank" rel="noopener">使用 Express + MongoDB 搭建多人博客</a></li><li><a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="noopener">Express框架</a></li><li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="noopener">Node.js 包教不包会</a></li><li><a href="https://www.npmjs.com/package/learnyounode-zh-cn" target="_blank" rel="noopener">Learn You The Node.js For Much Win! (中文版)</a></li><li><a href="http://i5ting.github.io/node-debug-tutorial/" target="_blank" rel="noopener">Node debug 三法三例</a></li><li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="noopener">nodejs中文文档</a></li><li><a href="https://github.com/wizardforcel/orm2-doc-zh-cn" target="_blank" rel="noopener">orm2 中文文档</a></li></ul></li><li>underscore.js<ul><li><a href="http://learningcn.com/underscore/" target="_blank" rel="noopener">Underscore.js中文文档</a></li></ul></li><li>backbone.js<ul><li><a href="http://www.css88.com/doc/backbone/" target="_blank" rel="noopener">backbone.js中文文档</a></li><li><a href="http://www.the5fire.com/backbone-js-tutorials-pdf-download.html" target="_blank" rel="noopener">backbone.js入门教程</a> (PDF)</li><li><a href="https://github.com/the5fire/backbonejs-learning-note" target="_blank" rel="noopener">Backbone.js入门教程第二版</a></li><li><a href="http://feliving.github.io/developing-backbone-applications/" target="_blank" rel="noopener">Developing Backbone.js Applications(中文版)</a></li></ul></li><li>AngularJS<ul><li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="noopener">AngularJS最佳实践和风格指南</a></li><li><a href="https://github.com/peiransun/angularjs-cn" target="_blank" rel="noopener">AngularJS中译本</a></li><li><a href="https://github.com/zensh/AngularjsTutorial_cn" target="_blank" rel="noopener">AngularJS入门教程</a></li><li><a href="https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="noopener">构建自己的AngularJS</a></li><li><a href="http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/" target="_blank" rel="noopener">在Windows环境下用Yeoman构建AngularJS项目</a></li></ul></li><li>Zepto.js<ul><li><a href="http://mweb.baidu.com/zeptoapi/" target="_blank" rel="noopener">Zepto.js 中文文档</a></li></ul></li><li>Sea.js<ul><li><a href="http://island205.com/HelloSea.js/" target="_blank" rel="noopener">Hello Sea.js</a></li></ul></li><li>React.js<ul><li><a href="http://reactjs.cn/" target="_blank" rel="noopener">React.js 中文文档</a></li><li><a href="https://github.com/fakefish/react-webpack-cookbook" target="_blank" rel="noopener">React webpack-cookbook</a></li><li><a href="http://fraserxu.me/intro-to-react/" target="_blank" rel="noopener">React 入门教程</a></li><li><a href="http://wiki.jikexueyuan.com/project/react-native/" target="_blank" rel="noopener">React Native 中文文档(含最新Android内容)</a></li><li><a href="https://github.com/theJian/build-a-hn-front-page" target="_blank" rel="noopener">Learn React &amp; Webpack by building the Hacker News front page</a></li></ul></li><li>impress.js<ul><li><a href="https://github.com/kokdemo/impress.js-tutorial-in-Chinese" target="_blank" rel="noopener">impress.js的中文教程</a></li></ul></li><li>CoffeeScript<ul><li><a href="http://island205.com/coffeescript-cookbook.github.com/" target="_blank" rel="noopener">CoffeeScript Cookbook</a></li><li><a href="http://island205.com/tlboc/" target="_blank" rel="noopener">The Little Book on CoffeeScript中文版</a></li><li><a href="https://github.com/geekplux/coffeescript-style-guide" target="_blank" rel="noopener">CoffeeScript 编码风格指南</a></li></ul></li><li>TypeScipt<ul><li><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/" target="_blank" rel="noopener">TypeScript Handbook</a></li></ul></li><li>ExtJS<ul><li><a href="http://extjs-doc-cn.github.io/ext4api/" target="_blank" rel="noopener">Ext4.1.0 中文文档</a></li></ul></li><li>Meteor<ul><li><a href="http://zh.discovermeteor.com/" target="_blank" rel="noopener">Discover Meteor</a></li><li><a href="http://docs.meteorhub.org/#/basic/" target="_blank" rel="noopener">Meteor 中文文档</a></li><li><a href="http://angular.meteorhub.org/" target="_blank" rel="noopener">Angular-Meteor 中文教程</a></li></ul></li><li><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="noopener">Chrome扩展及应用开发</a></li></ul><h3 id="LaTeX"><a href="/2018/10/07/cnbook/#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><ul><li><a href="http://liam0205.me/2014/09/08/latex-introduction/" target="_blank" rel="noopener">一份其实很短的 LaTeX 入门文档</a></li><li><a href="http://www.mohu.org/info/lshort-cn.pdf" target="_blank" rel="noopener">一份不太简短的 LATEX 2ε 介绍</a> （PDF版）</li></ul><h3 id="LISP"><a href="/2018/10/07/cnbook/#LISP" class="headerlink" title="LISP"></a>LISP</h3><ul><li>Common Lisp<ul><li><a href="http://acl.readthedocs.org/en/latest/" target="_blank" rel="noopener">ANSI Common Lisp 中文翻譯版</a></li><li><a href="http://www.ituring.com.cn/minibook/862" target="_blank" rel="noopener">On Lisp 中文翻译版本</a></li></ul></li><li>Scheme<ul><li><a href="http://deathking.github.io/yast-cn/" target="_blank" rel="noopener">Yet Another Scheme Tutorial Scheme入门教程</a></li><li><a href="http://songjinghe.github.io/TYS-zh-translation/" target="_blank" rel="noopener">Scheme语言简明教程</a></li><li>Racket<ul><li><a href="https://github.com/tyrchen/racket-book" target="_blank" rel="noopener">Racket book</a></li></ul></li></ul></li></ul><h3 id="Lua"><a href="/2018/10/07/cnbook/#Lua" class="headerlink" title="Lua"></a>Lua</h3><ul><li><a href="https://github.com/andycai/luaprimer" target="_blank" rel="noopener">Lua编程入门</a></li><li><a href="http://www.codingnow.com/2000/download/lua_manual.html" target="_blank" rel="noopener">Lua 5.1 参考手册 中文翻译</a></li><li><a href="http://cloudwu.github.io/lua53doc/" target="_blank" rel="noopener">Lua 5.3 参考手册 中文翻译</a></li><li><a href="http://www.codingnow.com/temp/readinglua.pdf" target="_blank" rel="noopener">Lua源码欣赏</a></li></ul><h3 id="OCaml"><a href="/2018/10/07/cnbook/#OCaml" class="headerlink" title="OCaml"></a>OCaml</h3><ul><li><a href="https://github.com/zforget/translation/tree/master/real_world_ocaml" target="_blank" rel="noopener">Real World OCaml</a></li></ul><h3 id="Perl"><a href="/2018/10/07/cnbook/#Perl" class="headerlink" title="Perl"></a>Perl</h3><ul><li><a href="https://github.com/horus/modern_perl_book" target="_blank" rel="noopener">Modern Perl 中文版</a></li><li><a href="http://perl.linuxtoy.org/" target="_blank" rel="noopener">Perl 程序员应该知道的事</a></li></ul><h3 id="PHP"><a href="/2018/10/07/cnbook/#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul><li><a href="http://php.net/manual/zh/" target="_blank" rel="noopener">PHP 官方手册</a></li><li><a href="http://www.laruence.com/2010/06/21/1608.html" target="_blank" rel="noopener">PHP调试技术手册</a>(PDF)</li><li>PHP之道：php-the-right-way (<a href="http://wulijun.github.io/php-the-right-way/" target="_blank" rel="noopener">@wulijun版</a> <a href="http://laravel-china.github.io/php-the-right-way/" target="_blank" rel="noopener">PHPHub版</a>)</li><li><a href="https://github.com/justjavac/PHP-Best-Practices-zh_CN" target="_blank" rel="noopener">PHP 最佳实践</a></li><li><a href="https://ryancao.gitbooks.io/php-developer-prepares/content/" target="_blank" rel="noopener">PHP 开发者实践</a></li><li><a href="https://github.com/reeze/tipi" target="_blank" rel="noopener">深入理解PHP内核</a></li><li><a href="http://www.walu.cc/phpbook/" target="_blank" rel="noopener">PHP扩展开发及内核应用</a></li><li><a href="http://laravel-china.org/docs/5.1" target="_blank" rel="noopener">Laravel5.1 中文文档</a></li><li><a href="https://cs.phphub.org/" target="_blank" rel="noopener">Laravel 5.1 LTS 速查表</a></li><li><a href="http://wiki.jikexueyuan.com/project/symfony-cookbook/" target="_blank" rel="noopener">Symfony2 Cookbook 中文版</a>(版本 2.7.0 LTS)</li><li><a href="http://symfony-docs-chs.readthedocs.org/en/latest/" target="_blank" rel="noopener">Symfony2中文文档</a> (未译完)</li><li><a href="http://yiibook.com//doc" target="_blank" rel="noopener">YiiBook几本Yii框架的在线教程</a></li><li><a href="http://www.digpage.com/" target="_blank" rel="noopener">深入理解 Yii 2.0</a></li><li><a href="http://www.yiichina.com/" target="_blank" rel="noopener">Yii 框架中文文檔</a></li><li><a href="http://www.nowamagic.net/librarys/books/contents/php" target="_blank" rel="noopener">简单易懂的PHP魔法</a></li><li><a href="https://github.com/LinkedDestiny/swoole-doc" target="_blank" rel="noopener">swoole文档及入门教程</a></li><li><a href="http://www.phpcomposer.com" target="_blank" rel="noopener">Composer 中文网</a></li><li><a href="http://ww1.minimee.org/php/slim" target="_blank" rel="noopener">Slim 中文文档</a></li><li><a href="http://lumen.laravel-china.org/" target="_blank" rel="noopener">Lumen 中文文档</a></li><li><a href="https://phpunit.de/manual/current/zh_cn/installation.html" target="_blank" rel="noopener">PHPUnit 中文文档</a></li></ul><h3 id="Prolog"><a href="/2018/10/07/cnbook/#Prolog" class="headerlink" title="Prolog"></a>Prolog</h3><ul><li><a href="http://fengdidi.github.io/blog/2011/11/15/qian-yan/" target="_blank" rel="noopener">笨办法学Prolog</a></li></ul><h3 id="Python"><a href="/2018/10/07/cnbook/#Python" class="headerlink" title="Python"></a>Python</h3><ul><li><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000" target="_blank" rel="noopener">廖雪峰 Python 2.7 中文教程</a></li><li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰 Python 3 中文教程</a></li><li><a href="http://www.kuqin.com/abyteofpython_cn/" target="_blank" rel="noopener">简明Python教程</a></li><li><a href="http://www.kancloud.cn/kancloud/python-basic" target="_blank" rel="noopener">零基础学 Python 第一版</a></li><li><a href="http://www.kancloud.cn/kancloud/starter-learning-python" target="_blank" rel="noopener">零基础学 Python 第二版</a></li><li><a href="http://lovelypython.readthedocs.org/en/latest/" target="_blank" rel="noopener">可爱的 Python</a></li><li><a href="http://www.pythondoc.com/pythontutorial27/index.html" target="_blank" rel="noopener">Python 2.7 官方教程中文版</a></li><li><a href="http://www.pythondoc.com/pythontutorial3/index.html" target="_blank" rel="noopener">Python 3.3 官方教程中文版</a></li><li><a href="http://www.kancloud.cn/thinkphp/python-cookbook" target="_blank" rel="noopener">Python Cookbook 中文版</a></li><li><a href="https://github.com/yidao620c/python3-cookbook" target="_blank" rel="noopener">Python3 Cookbook 中文版</a></li><li><a href="http://www.kuqin.com/docs/diveintopythonzh-cn-5.4b/html/toc/" target="_blank" rel="noopener">深入 Python</a></li><li><a href="http://old.sebug.net/paper/books/dive-into-python3/" target="_blank" rel="noopener">深入 Python 3</a></li><li><a href="https://code.google.com/p/zhong-wiki/wiki/PEP8" target="_blank" rel="noopener">PEP8 Python代码风格规范</a></li><li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-python-styleguide/" target="_blank" rel="noopener">Google Python 风格指南 中文版</a></li><li><a href="http://liam0205.me/2013/11/02/Python-tutorial-zh_cn/" target="_blank" rel="noopener">Python入门教程</a> (<a href="http://liam0205.me/attachment/Python/The_Python_Tutorial_zh-cn.pdf" target="_blank" rel="noopener">PDF</a>)</li><li><a href="http://old.sebug.net/paper/books/LearnPythonTheHardWay/" target="_blank" rel="noopener">笨办法学 Python</a> (<a href="http://liam0205.me/attachment/Python/PyHardWay/Learn_Python_The_Hard_Way_zh-cn.pdf" target="_blank" rel="noopener">PDF</a> <a href="https://www.gitbook.com/download/epub/book/wizardforcel/lpthw" target="_blank" rel="noopener">EPUB</a>)</li><li><a href="http://pan.baidu.com/s/1qW4pvnY" target="_blank" rel="noopener">Python自然语言处理中文版</a> （感谢陈涛同学的翻译，也谢谢 <a href="https://github.com/shwley" target="_blank" rel="noopener">@shwley</a> 联系了作者）</li><li><a href="http://liam0205.me/2014/09/11/matplotlib-tutorial-zh-cn/" target="_blank" rel="noopener">Python 绘图库 matplotlib 官方指南中文翻译</a></li><li><a href="http://scrapy-chs.readthedocs.org/zh_CN/latest/" target="_blank" rel="noopener">Scrapy 0.25 文档</a></li><li><a href="https://github.com/carfly/thinkpython-cn" target="_blank" rel="noopener">ThinkPython</a></li><li><a href="https://github.com/bingjin/ThinkPython2-CN" target="_blank" rel="noopener">ThinkPython 2ed</a></li><li><a href="http://www.cnblogs.com/vamei/archive/2012/09/13/2682778.html" target="_blank" rel="noopener">Python快速教程</a></li><li><a href="http://wiki.ubuntu.org.cn/Python正则表达式操作指南" target="_blank" rel="noopener">Python 正则表达式操作指南</a></li><li><a href="http://www.crifan.com/files/doc/docbook/python_beginner_tutorial/release/html/python_beginner_tutorial.html" target="_blank" rel="noopener">python初级教程：入门详解</a></li><li><a href="https://www.gitbook.com/book/likebeta/twisted-intro-cn/details" target="_blank" rel="noopener">Twisted 与异步编程入门</a></li><li><a href="http://textgrocery.readthedocs.org/zh/latest/index.html" target="_blank" rel="noopener">TextGrocery 中文 API</a> ( 基于svm算法的一个短文本分类 Python 库 )</li><li><a href="http://requests-docs-cn.readthedocs.org/zh_CN/latest/" target="_blank" rel="noopener">Requests: HTTP for Humans</a></li><li><a href="http://pillow-cn.readthedocs.org/en/latest/#" target="_blank" rel="noopener">Pillow 中文文档</a></li><li><a href="http://pymotwcn.readthedocs.org/en/latest/index.html" target="_blank" rel="noopener">PyMOTW 中文版</a></li><li><a href="http://data.digitser.net/zh-CN/python_index.html" target="_blank" rel="noopener">Python 官方文档中文版</a></li><li><a href="http://fabric-chs.readthedocs.org" target="_blank" rel="noopener">Fabric 中文文档</a></li><li><a href="http://beautifulsoup.readthedocs.org/zh_CN/latest/" target="_blank" rel="noopener">Beautiful Soup 4.2.0 中文文档</a></li><li><a href="http://old.sebug.net/paper/books/scipydoc" target="_blank" rel="noopener">用Python做科学计算</a></li><li><a href="http://www.pythondoc.com/sphinx/index.html" target="_blank" rel="noopener">Sphinx 中文文档</a></li><li><a href="https://github.com/cundi/Mastering.Python.Design.Patterns" target="_blank" rel="noopener">精通 Python 设计模式</a></li><li><a href="https://github.com/smartFlash/pySecurity" target="_blank" rel="noopener">python 安全编程教程</a></li><li><a href="https://www.gitbook.com/book/wizardforcel/sjtu-cs902-courseware/details" target="_blank" rel="noopener">程序设计思想与方法</a></li><li><a href="https://read.douban.com/ebook/16691849/" target="_blank" rel="noopener">知乎周刊·编程小白学Python</a></li><li><a href="https://github.com/cloga/scipy-lecture-notes_cn" target="_blank" rel="noopener">Scipy 讲义</a></li><li><a href="http://www.kuqin.com/docs/pythonbasic.html" target="_blank" rel="noopener">Python 学习笔记 基础篇</a></li><li><a href="http://www.kuqin.com/docs/pythonmodule.html" target="_blank" rel="noopener">Python 学习笔记 模块篇</a></li><li><a href="http://old.sebug.net/paper/books/python/%E3%80%8APython%E6%A0%87%E5%87%86%E5%BA%93%E3%80%8B%E4%B8%AD%E6%96%87%E7%89%88.pdf" target="_blank" rel="noopener">Python 标准库 中文版</a></li><li><a href="https://www.gitbook.com/book/eastlakeside/interpy-zh/details" target="_blank" rel="noopener">Python进阶</a></li><li><a href="https://wizardforcel.gitbooks.io/core-python-2e/content/" target="_blank" rel="noopener">Python 核心编程 第二版</a> CPyUG译</li><li><a href="http://pythonguidecn.readthedocs.io/zh/latest/" target="_blank" rel="noopener">Python最佳实践指南</a></li><li><a href="https://www.gitbook.com/book/wizardforcel/python-essential-tutorial/details" target="_blank" rel="noopener">Python 精要教程</a></li><li><a href="https://www.gitbook.com/book/wizardforcel/python-quant-uqer/details" target="_blank" rel="noopener">Python 量化交易教程</a></li><li>Django<ul><li><a href="http://django-chinese-docs.readthedocs.org/en/latest/" target="_blank" rel="noopener">Django 1.5 文档中文版</a> 正在翻译中</li><li><a href="http://django-1-7-doc.coding.io/" target="_blank" rel="noopener">Diango 1.7 文档中文版</a>  正在翻译中，目前只翻译了目录</li><li><a href="http://python.usyiyi.cn/django/index.html" target="_blank" rel="noopener">Django 1.8.2 文档中文版</a><br>正在翻译中</li><li><a href="https://github.com/yangyubo/zh-django-best-practices" target="_blank" rel="noopener">Django 最佳实践</a></li><li><a href="https://www.gitbook.com/book/andrew-liu/django-blog/details" target="_blank" rel="noopener">Django搭建简易博客教程</a></li><li><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="noopener">The Django Book 中文版</a></li><li><a href="https://github.com/cundi/Django-Design-Patterns-and-Best-Practices" target="_blank" rel="noopener">Django 设计模式与最佳实践</a></li><li><a href="https://github.com/cundi/Web.Development.with.Django.Cookbook" target="_blank" rel="noopener">Django 网站开发 Cookbook</a></li><li><a href="https://www.gitbook.com/book/djangogirlstaipei/django-girls-taipei-tutorial/details" target="_blank" rel="noopener">Django Girls 學習指南</a></li></ul></li><li>Flask<ul><li><a href="http://docs.jinkan.org/docs/flask/" target="_blank" rel="noopener">Flask 文档中文版</a></li><li><a href="http://docs.jinkan.org/docs/jinja2/" target="_blank" rel="noopener">Jinja2 文档中文版</a></li><li><a href="http://werkzeug-docs-cn.readthedocs.org/zh_CN/latest/" target="_blank" rel="noopener">Werkzeug 文档中文版</a></li><li><a href="http://spacewander.github.io/explore-flask-zh/" target="_blank" rel="noopener">Flask之旅</a></li><li><a href="https://www.gitbook.com/book/wizardforcel/flask-extension-docs/details" target="_blank" rel="noopener">Flask 扩展文档汇总</a></li><li><a href="http://www.pythondoc.com/flask-mega-tutorial/index.html" target="_blank" rel="noopener">Flask 大型教程</a></li><li><a href="https://github.com/sixu05202004/sqlalchemy-docs-cn" target="_blank" rel="noopener">SQLAlchemy 中文文档</a></li></ul></li><li>web.py<ul><li><a href="http://webpy.org/tutorial3.zh-cn" target="_blank" rel="noopener">web.py 0.3 新手指南</a></li><li><a href="http://webpy.org/cookbook/index.zh-cn" target="_blank" rel="noopener">Web.py Cookbook 简体中文版</a></li></ul></li><li>Tornado<ul><li><a href="http://demo.pythoner.com/itt2zh/index.html" target="_blank" rel="noopener">Introduction to Tornado 中文翻译</a></li><li><a href="http://www.nowamagic.net/academy/detail/13321002" target="_blank" rel="noopener">Tornado源码解析</a></li><li><a href="https://tornado-zh.readthedocs.org/zh/latest/" target="_blank" rel="noopener">Tornado 4.3 文档中文版</a></li></ul></li></ul><h3 id="R"><a href="/2018/10/07/cnbook/#R" class="headerlink" title="R"></a>R</h3><ul><li><a href="https://github.com/yihui/r-ninja" target="_blank" rel="noopener">R语言忍者秘笈</a></li></ul><h3 id="Ruby"><a href="/2018/10/07/cnbook/#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><ul><li><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md" target="_blank" rel="noopener">Ruby 风格指南</a></li><li><a href="https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md" target="_blank" rel="noopener">Rails 风格指南</a></li><li><a href="http://lrthw.github.io/" target="_blank" rel="noopener">笨方法學 Ruby</a></li><li><a href="http://guides.ruby-china.org/" target="_blank" rel="noopener">Ruby on Rails 指南</a></li><li><a href="https://ihower.tw/rails4/index.html" target="_blank" rel="noopener">Ruby on Rails 實戰聖經</a></li><li><a href="http://railstutorial-china.org/" target="_blank" rel="noopener">Ruby on Rails Tutorial 原书第 3 版</a> (本书网页版免费提供，电子版以 PDF、EPub 和 Mobi 格式提供购买，仅售 9.9 美元)</li><li><a href="http://rails-practice.com/content/index.html" target="_blank" rel="noopener">Rails 实践</a></li><li><a href="https://www.gitbook.com/book/kelby/rails-beginner-s-guide/details" target="_blank" rel="noopener">Rails 5 开发进阶(Beta)</a></li><li><a href="https://www.gitbook.com/book/rocodev/rails-102/details" target="_blank" rel="noopener">Rails 102</a></li><li><a href="https://wusuopu.gitbooks.io/write-ruby-extension-with-c/content/" target="_blank" rel="noopener">编写Ruby的C拓展</a></li><li><a href="https://ruby-china.org/topics/22386" target="_blank" rel="noopener">Ruby 源码解读</a></li><li><a href="http://deathking.github.io/metaprogramming-in-ruby/" target="_blank" rel="noopener">Ruby中的元编程</a></li></ul><h3 id="Rust"><a href="/2018/10/07/cnbook/#Rust" class="headerlink" title="Rust"></a>Rust</h3><ul><li><a href="https://www.gitbook.com/book/kaisery/rust-book-chinese/details" target="_blank" rel="noopener">rust book 中文翻译</a></li><li><a href="https://github.com/rustcc/RustPrimer" target="_blank" rel="noopener">rust primer</a></li></ul><h3 id="Scala"><a href="/2018/10/07/cnbook/#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul><li><a href="http://twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="noopener">Scala课堂</a> (Twitter的Scala中文教程)</li><li><a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="noopener">Effective Scala</a>(Twitter的Scala最佳实践的中文翻译)</li><li><a href="http://zh.scala-tour.com/" target="_blank" rel="noopener">Scala指南</a></li></ul><h3 id="Shell"><a href="/2018/10/07/cnbook/#Shell" class="headerlink" title="Shell"></a>Shell</h3><ul><li><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="noopener">Shell脚本编程30分钟入门</a></li><li><a href="http://blog.sae.sina.com.cn/archives/3606" target="_blank" rel="noopener">Bash脚本15分钟进阶教程</a></li><li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="noopener">Linux工具快速教程</a></li><li><a href="https://github.com/wzb56/13_questions_of_shell" target="_blank" rel="noopener">shell十三问</a></li><li><a href="https://www.gitbook.com/book/tinylab/shellbook/details" target="_blank" rel="noopener">Shell编程范例</a></li></ul><h3 id="Swift"><a href="/2018/10/07/cnbook/#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul><li><a href="http://numbbbbb.github.io/the-swift-programming-language-in-chinese/" target="_blank" rel="noopener">The Swift Programming Language 中文版</a></li><li><a href="http://dev.swiftguide.cn" target="_blank" rel="noopener">Swift 语言指南</a></li><li><a href="https://github.com/x140yu/Developing_iOS_8_Apps_With_Swift" target="_blank" rel="noopener">Stanford 公开课，Developing iOS 8 Apps with Swift 字幕翻译文件</a>   </li><li><a href="http://c4ios.swift.gg" target="_blank" rel="noopener">C4iOS - COSMOS</a>   </li></ul><h3 id="读书笔记及其它"><a href="/2018/10/07/cnbook/#读书笔记及其它" class="headerlink" title="读书笔记及其它"></a>读书笔记及其它</h3><ul><li><a href="https://github.com/fool2fish/dragon-book-exercise-answers" target="_blank" rel="noopener">编译原理（紫龙书）中文第2版习题答案</a></li><li><a href="http://www.hawstein.com/posts/make-thiner-programming-pearls.html" target="_blank" rel="noopener">把《编程珠玑》读薄</a></li><li><a href="https://github.com/XiaolongJason/ReadingNote/blob/master/Effective%20C%2B%2B/Effective%20C%2B%2B.md" target="_blank" rel="noopener">Effective C++读书笔记</a></li><li><a href="https://github.com/qyuhen/book" target="_blank" rel="noopener">Golang 学习笔记、Python 学习笔记、C 学习笔记</a> (PDF)</li><li><a href="https://github.com/code4craft/jsoup-learning" target="_blank" rel="noopener">Jsoup 学习笔记</a></li><li><a href="https://github.com/lzjun567/note" target="_blank" rel="noopener">学习笔记: Vim、Python、memcached</a></li><li><a href="http://www.ituring.com.cn/activity/details/2004" target="_blank" rel="noopener">图灵开放书翻译计划–C++、Python、Java等</a></li><li><a href="http://g.yeeyan.org/books/2095" target="_blank" rel="noopener">蒂姆·奥莱利随笔</a> （由译言网翻译，电子版免费）</li><li><a href="http://sicp.readthedocs.org/en/latest/" target="_blank" rel="noopener">SICP 解题集</a></li><li><a href="https://github.com/hacke2/hacke2.github.io/issues/2" target="_blank" rel="noopener">精彩博客集合</a></li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="noopener">中文文案排版指北</a></li><li><a href="http://ganquan.info/standard-c/" target="_blank" rel="noopener">Standard C 语言标准函数库速查 (Cheat Sheet)</a></li><li><a href="http://gh.amio.us/git-cheatsheet-chs/" target="_blank" rel="noopener">Git Cheatsheet Chs</a></li><li><a href="http://www.chengweiyang.cn/gitbook/index.html" target="_blank" rel="noopener">GitBook简明教程</a></li><li><a href="https://github.com/qibaoguang/Study-Step-by-Step/blob/master/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/javascript_the_good_parts.md" target="_blank" rel="noopener">JavaScript语言精粹</a></li><li><a href="http://producingoss.com/zh/" target="_blank" rel="noopener">制造开源软件</a></li><li><a href="http://www.dianbo.org/9238/stone/tiwendezhihui.htm" target="_blank" rel="noopener">提问的智慧</a></li><li><a href="https://github.com/LearnShare/Learning-Markdown" target="_blank" rel="noopener">Markdown 入门参考</a></li><li><a href="https://github.com/stanzgy/wiki/blob/master/markup/asciidoc-guide.asciidoc" target="_blank" rel="noopener">AsciiDoc简明指南</a></li><li><a href="http://love-oriented.com/pack/" target="_blank" rel="noopener">背包问题九讲</a></li><li><a href="https://github.com/qiwsir/ITArticles" target="_blank" rel="noopener">老齐的技术资料</a></li><li><a href="https://github.com/JacksonTian/fks" target="_blank" rel="noopener">前端技能汇总</a></li><li><a href="https://github.com/zhuangbiaowei/learn-with-open-source" target="_blank" rel="noopener">借助开源项目，学习软件开发</a></li><li><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese" target="_blank" rel="noopener">前端工作面试问题</a></li><li><a href="https://www.gitbook.com/book/yuanbin/algorithm/details" target="_blank" rel="noopener">leetcode/lintcode题解/算法学习笔记</a></li><li><a href="https://github.com/li-xinyang/FEND_Note" target="_blank" rel="noopener">前端开发笔记本</a></li></ul><h3 id="测试相关"><a href="/2018/10/07/cnbook/#测试相关" class="headerlink" title="测试相关"></a>测试相关</h3><ul><li><a href="http://appium.io/slate/cn/v1.2.0/" target="_blank" rel="noopener">移动APP自动化测试优秀框架Appium API Reference V1.2.0 CN</a></li></ul><p>转载自：<a href="https://github.com/Jialin28/free-programming-books-zh_CN" target="_blank" rel="noopener">https://github.com/Jialin28/free-programming-books-zh_CN</a></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 资源大全中文版</title>
      <link href="/2018/09/18/cnPython/"/>
      <url>/2018/09/18/cnPython/</url>
      <content type="html"><![CDATA[<h3 id="环境管理"><a href="/2018/09/18/cnPython/#环境管理" class="headerlink" title="环境管理"></a>环境管理</h3><p>管理 Python 版本和环境的工具</p><ul><li><p>p：非常简单的交互式 python 版本管理工具。<a href="https://github.com/qw3rtman/p" target="_blank" rel="noopener">官网</a></p></li><li><p>pyenv：简单的 Python 版本管理工具。<a href="https://github.com/yyuu/pyenv" target="_blank" rel="noopener">官网</a></p></li><li><p>Vex：可以在虚拟环境中执行命令。<a href="https://github.com/sashahart/vex" target="_blank" rel="noopener">官网</a></p></li><li><p>virtualenv：创建独立 Python 环境的工具。<a href="https://pypi.python.org/pypi/virtualenv" target="_blank" rel="noopener">官网</a></p></li><li><p>virtualenvwrapper：virtualenv 的一组扩展。<a href="https://pypi.python.org/pypi/virtualenvwrapper" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="包管理"><a href="/2018/09/18/cnPython/#包管理" class="headerlink" title="包管理"></a>包管理</h3><p>管理包和依赖的工具。</p><ul><li><p>pip：Python 包和依赖关系管理工具。<a href="https://pip.pypa.io/" target="_blank" rel="noopener">官网</a></p></li><li><p>pip-tools：保证 Python 包依赖关系更新的一组工具。<a href="https://github.com/nvie/pip-tools" target="_blank" rel="noopener">官网</a></p></li><li><p>pipenv：Pyhton 官方推荐的新一代包管理工具。<a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">官网</a></p></li><li><p>conda：跨平台，Python 二进制包管理工具。<a href="https://github.com/conda/conda/" target="_blank" rel="noopener">官网</a></p></li><li><p>Curdling：管理 Python 包的命令行工具。<a href="http://clarete.li/curdling/" target="_blank" rel="noopener">官网</a></p></li><li><p>wheel：Python 分发的新标准，意在取代 eggs。<a href="http://pythonwheels.com/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="包仓库"><a href="/2018/09/18/cnPython/#包仓库" class="headerlink" title="包仓库"></a>包仓库</h3><p>本地 PyPI 仓库服务和代理。</p><ul><li><p><a href="https://pypi.org/" target="_blank" rel="noopener">warehouse</a>：下一代 PyPI。<a href="https://github.com/pypa/warehouse" target="_blank" rel="noopener">官网</a></p></li><li><p>bandersnatch：PyPA 提供的 PyPI 镜像工具。<a href="https://bitbucket.org/pypa/bandersnatch" target="_blank" rel="noopener">官网</a></p></li><li><p>devpi：PyPI 服务和打包/测试/分发工具。<a href="http://doc.devpi.net/" target="_blank" rel="noopener">官网</a></p></li><li><p>localshop：本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。<a href="https://github.com/mvantellingen/localshop" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="分发"><a href="/2018/09/18/cnPython/#分发" class="headerlink" title="分发"></a>分发</h3><p>打包为可执行文件以便分发。</p><ul><li><p>PyInstaller：将 Python 程序转换成独立的执行文件（跨平台）。<a href="https://github.com/pyinstaller/pyinstaller" target="_blank" rel="noopener">官网</a></p></li><li><p>dh-virtualenv：构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。<a href="http://dh-virtualenv.readthedocs.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Nuitka：将脚本、模块、包编译成可执行文件或扩展模块。<a href="http://nuitka.net/" target="_blank" rel="noopener">官网</a></p></li><li><p>py2app：将 Python 脚本变为独立软件包（Mac OS X）。<a href="http://pythonhosted.org/py2app/" target="_blank" rel="noopener">官网</a></p></li><li><p>py2exe：将 Python 脚本变为独立软件包（Windows）。<a href="http://www.py2exe.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>pynsist：一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python 本身。<a href="http://pynsist.readthedocs.org/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="构建工具"><a href="/2018/09/18/cnPython/#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p>将源码编译成软件。</p><ul><li><p>buildout：一个构建系统，从多个组件来创建，组装和部署应用。<a href="http://www.buildout.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>BitBake：针对嵌入式 Linux 的类似 make 的构建工具。<a href="http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html" target="_blank" rel="noopener">官网</a></p></li><li><p>fabricate：对任何语言自动找到依赖关系的构建工具。<a href="https://code.google.com/archive/p/fabricate" target="_blank" rel="noopener">官网</a></p></li><li><p>PlatformIO：多平台命令行构建工具。<a href="https://github.com/platformio/platformio" target="_blank" rel="noopener">官网</a></p></li><li><p>PyBuilder：纯 Python 实现的持续化构建工具。<a href="https://github.com/pybuilder/pybuilder" target="_blank" rel="noopener">官网</a></p></li><li><p>SCons：软件构建工具。<a href="http://www.scons.org/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="交互式解析器"><a href="/2018/09/18/cnPython/#交互式解析器" class="headerlink" title="交互式解析器"></a>交互式解析器</h3><p>交互式 Python 解析器。</p><ul><li><p>IPython：功能丰富的工具，非常有效的使用交互式 Python。<a href="https://github.com/ipython/ipython" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/bpython/" target="_blank" rel="noopener">bpython</a>：界面丰富的 Python 解析器。<a href="http://bpython-interpreter.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>ptpython：高级交互式 Python 解析器， 构建于 <a href="https://github.com/jonathanslenders/python-prompt-toolkit" target="_blank" rel="noopener">python-prompt-toolkit</a> 之上。<a href="https://github.com/jonathanslenders/ptpython" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="文件"><a href="/2018/09/18/cnPython/#文件" class="headerlink" title="文件"></a>文件</h3><p>文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。</p><ul><li><p>aiofiles：基于 asyncio，提供文件异步操作。<a href="https://github.com/Tinche/aiofiles" target="_blank" rel="noopener">官网</a></p></li><li><p>imghdr：（Python 标准库）检测图片类型。<a href="https://docs.python.org/2/library/imghdr.html" target="_blank" rel="noopener">官网</a></p></li><li><p>mimetypes：（Python 标准库）将文件名映射为 MIME 类型。<a href="https://docs.python.org/2/library/mimetypes.html" target="_blank" rel="noopener">官网</a></p></li><li><p>path.py：对 os.path 进行封装的模块。<a href="https://github.com/jaraco/path.py" target="_blank" rel="noopener">官网</a></p></li><li><p>pathlib：（Python3.4+ 标准库）跨平台的、面向对象的路径操作库。<a href="https://pathlib.readthedocs.org/en/pep428/" target="_blank" rel="noopener">官网</a></p></li><li><p>python-magic：文件类型检测的第三方库 libmagic 的 Python 接口。<a href="https://github.com/ahupp/python-magic" target="_blank" rel="noopener">官网</a></p></li><li><p>Unipath：用面向对象的方式操作文件和目录。<a href="https://github.com/mikeorr/Unipath" target="_blank" rel="noopener">官网</a></p></li><li><p>watchdog：管理文件系统事件的 API 和 shell 工具。<a href="https://github.com/gorakhargosh/watchdog" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="日期和时间"><a href="/2018/09/18/cnPython/#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p>操作日期和时间的类库。</p><ul><li><p>arrow：更好的 Python 日期时间操作类库。<a href="https://github.com/crsmithdev/arrow" target="_blank" rel="noopener">官网</a></p></li><li><p>Chronyk：Python 3 的类库，用于解析手写格式的时间和日期。<a href="https://github.com/KoffeinFlummi/Chronyk" target="_blank" rel="noopener">官网</a></p></li><li><p>dateutil：Python datetime 模块的扩展。<a href="https://pypi.python.org/pypi/python-dateutil" target="_blank" rel="noopener">官网</a></p></li><li><p>delorean：解决 Python 中有关日期处理的棘手问题的库。<a href="https://github.com/myusuf3/delorean/" target="_blank" rel="noopener">官网</a></p></li><li><p>maya：人性化的时间处理库。<a href="https://github.com/kennethreitz/maya" target="_blank" rel="noopener">官网</a></p></li><li><p>moment：一个用来处理时间和日期的 Python 库。灵感来自于 Moment.js。<a href="https://github.com/zachwill/moment" target="_blank" rel="noopener">官网</a></p></li><li><p>pendulum：一个比 arrow 更具有明确的，可预测的行为的时间操作库。<a href="https://github.com/sdispater/pendulum" target="_blank" rel="noopener">官网</a></p></li><li><p>PyTime：一个简单易用的 Python 模块，用于通过字符串来操作日期/时间。<a href="https://github.com/shinux/PyTime" target="_blank" rel="noopener">官网</a></p></li><li><p>pytz：现代以及历史版本的世界时区定义。将时区数据库引入 Python。<a href="https://launchpad.net/pytz" target="_blank" rel="noopener">官网</a></p></li><li><p>when.py：提供用户友好的函数来帮助用户进行常用的日期和时间操作。<a href="https://github.com/dirn/When.py" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="文本处理"><a href="/2018/09/18/cnPython/#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><p>用于解析和操作文本的库。</p><ul><li>通用</li></ul><ul><li><p><a href="http://hao.jobbole.com/chardet/" target="_blank" rel="noopener">chardet</a>：字符编码检测器，兼容 Python2 和 Python3。<a href="https://github.com/chardet/chardet" target="_blank" rel="noopener">官网</a></p></li><li><p>difflib：(Python 标准库)帮助我们进行差异化比较。<a href="https://docs.python.org/2/library/difflib.html" target="_blank" rel="noopener">官网</a></p></li><li><p>ftfy：让 Unicode 文本更完整更连贯。<a href="https://github.com/LuminosoInsight/python-ftfy" target="_blank" rel="noopener">官网</a></p></li><li><p>fuzzywuzzy：模糊字符串匹配。<a href="https://github.com/seatgeek/fuzzywuzzy" target="_blank" rel="noopener">官网</a></p></li><li><p>Levenshtein：快速计算编辑距离以及字符串的相似度。<a href="https://github.com/ztane/python-Levenshtein/" target="_blank" rel="noopener">官网</a></p></li><li><p>pangu.py：在中日韩语字符和数字字母之间添加空格。<a href="https://github.com/vinta/pangu.py" target="_blank" rel="noopener">官网</a></p></li><li><p>pypinyin：汉字拼音转换工具 Python 版。<a href="https://github.com/mozillazg/python-pinyin" target="_blank" rel="noopener">官网</a></p></li><li><p>shortuuid：一个生成器库，用以生成简洁的，明白的，URL 安全的 UUID。<a href="https://github.com/stochastic-technologies/shortuuid" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="https://github.com/simplejson/simplejson" target="_blank" rel="noopener">simplejson</a>：Python 的 JSON 编码、解码器。<a href="https://simplejson.readthedocs.io/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>unidecode：Unicode 文本的 ASCII 转换形式 。<a href="https://pypi.python.org/pypi/Unidecode" target="_blank" rel="noopener">官网</a></p></li><li><p>uniout：打印可读的字符，而不是转义的字符串。<a href="https://github.com/moskytw/uniout" target="_blank" rel="noopener">官网</a></p></li><li><p>xpinyin：一个用于把汉字转换为拼音的库。<a href="https://github.com/lxneng/xpinyin" target="_blank" rel="noopener">官网</a></p></li><li><p>yfiglet-figlet：<a href="https://github.com/pwaller/pyfiglet" target="_blank" rel="noopener">pyfiglet -figlet</a> 的 Python 实现。</p></li></ul><ul><li>Slug 化</li></ul><ul><li><p>awesome-slugify：一个 Python slug 化库，可以保持 Unicode。<a href="https://github.com/dimka665/awesome-slugify" target="_blank" rel="noopener">官网</a></p></li><li><p>python-slugify：Python slug 化库，可以把 unicode 转化为 ASCII。<a href="https://github.com/un33k/python-slugify" target="_blank" rel="noopener">官网</a></p></li><li><p>unicode-slugify：一个 slug 工具，可以生成 unicode slugs ,需要依赖 Django 。<a href="https://github.com/mozilla/unicode-slugify" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>解析器</li></ul><ul><li><p>phonenumbers：解析，格式化，储存，验证电话号码。<a href="https://github.com/daviddrysdale/python-phonenumbers" target="_blank" rel="noopener">官网</a></p></li><li><p>PLY：lex 和 yacc 解析工具的 Python 实现。<a href="http://www.dabeaz.com/ply/" target="_blank" rel="noopener">官网</a></p></li><li><p>Pygments：通用语法高亮工具。<a href="http://pygments.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>pyparsing：生成通用解析器的框架。<a href="http://pyparsing.wikispaces.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>python-nameparser：把一个人名分解为几个独立的部分。<a href="https://github.com/derek73/python-nameparser" target="_blank" rel="noopener">官网</a></p></li><li><p>python-user-agents：浏览器 user agent 解析器。<a href="https://github.com/selwin/python-user-agents" target="_blank" rel="noopener">官网</a></p></li><li><p>sqlparse：一个无验证的 SQL 解析器。<a href="https://sqlparse.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="特殊文本格式处理"><a href="/2018/09/18/cnPython/#特殊文本格式处理" class="headerlink" title="特殊文本格式处理"></a>特殊文本格式处理</h3><p>一些用来解析和操作特殊文本格式的库。</p><ul><li>通用</li></ul><ul><li>tablib：一个用来处理中表格数据的模块。<a href="https://github.com/kennethreitz/tablib" target="_blank" rel="noopener">官网</a></li></ul><ul><li>Office</li></ul><ul><li><p>Marmir：把输入的 Python 数据结构转换为电子表单。<a href="https://github.com/brianray/mm" target="_blank" rel="noopener">官网</a></p></li><li><p>openpyxl：一个用来读写 Excel 2010 xlsx/xlsm/xltx/xltm 文件的库。<a href="https://openpyxl.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>pyexcel：一个提供统一 API，用来读写，操作 Excel 文件的库。<a href="https://github.com/pyexcel/pyexcel" target="_blank" rel="noopener">官网</a></p></li><li><p>python-docx：读取，查询以及修改 Microsoft Word 2007/2008 docx 文件。<a href="https://github.com/python-openxml/python-docx" target="_blank" rel="noopener">官网</a></p></li><li><p>relatorio：模板化 OpenDocument 文件。<a href="http://relatorio.tryton.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>unoconv：在 LibreOffice/OpenOffice 支持的任意文件格式之间进行转换。<a href="https://github.com/dagwieers/unoconv" target="_blank" rel="noopener">官网</a></p></li><li><p>XlsxWriter：一个用于创建 Excel .xlsx 文件的 Python 模块。<a href="https://xlsxwriter.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>xlwings：一个使得在 Excel 中方便调用 Python 的库（反之亦然），基于 BSD 协议。<a href="http://xlwings.org/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/xlwt/" target="_blank" rel="noopener">xlwt</a>：读写 Excel 文件的数据和格式信息。<a href="https://github.com/python-excel/xlwt" target="_blank" rel="noopener">官网</a> / <a href="https://github.com/python-excel/xlrd" target="_blank" rel="noopener">xlrd</a></p></li></ul><ul><li>PDF</li></ul><ul><li><p>PDFMiner：一个用于从 PDF 文档中抽取信息的工具。<a href="https://github.com/euske/pdfminer" target="_blank" rel="noopener">官网</a></p></li><li><p>PyPDF2：一个可以分割，合并和转换 PDF 页面的库。<a href="https://github.com/mstamy2/PyPDF2" target="_blank" rel="noopener">官网</a></p></li><li><p>ReportLab：快速创建富文本 PDF 文档。<a href="http://www.reportlab.com/opensource/" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>Markdown</li></ul><ul><li><p>Mistune：快速并且功能齐全的纯 Python 实现的 Markdown 解析器。<a href="https://github.com/lepture/mistune" target="_blank" rel="noopener">官网</a></p></li><li><p>Python-Markdown：John Gruber’s Markdown 的 Python 版实现。<a href="https://github.com/waylan/Python-Markdown" target="_blank" rel="noopener">官网</a></p></li><li><p>Python-Markdown2：纯 Python 实现的 Markdown 解析器，比 Python-Markdown 更快，更准确，可扩展。<a href="https://github.com/trentm/python-markdown2" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>YAML</li></ul><ul><li>PyYAML：Python 版本的 YAML 解析器。<a href="http://pyyaml.org/" target="_blank" rel="noopener">官网</a></li></ul><ul><li>CSV</li></ul><ul><li>csvkit：用于转换和操作 CSV 的工具。<a href="https://github.com/wireservice/csvkit" target="_blank" rel="noopener">官网</a></li></ul><ul><li>Archive</li></ul><ul><li>unp：一个用来方便解包归档文件的命令行工具。<a href="https://github.com/mitsuhiko/unp" target="_blank" rel="noopener">官网</a></li></ul><h3 id="自然语言处理"><a href="/2018/09/18/cnPython/#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><p>用来处理人类语言的库。</p><ul><li><p><a href="http://hao.jobbole.com/nltk/" target="_blank" rel="noopener">NLTK</a>：一个先进的平台，用以构建处理人类语言数据的 Python 程序。<a href="http://www.nltk.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>jieba：中文分词工具。<a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">官网</a></p></li><li><p>langid.py：独立的语言识别系统。<a href="https://github.com/saffsd/langid.py" target="_blank" rel="noopener">官网</a></p></li><li><p>Pattern：Python 网络信息挖掘模块。<a href="http://www.clips.ua.ac.be/pattern" target="_blank" rel="noopener">官网</a></p></li><li><p>SnowNLP：一个用来处理中文文本的库。<a href="https://github.com/isnowfy/snownlp" target="_blank" rel="noopener">官网</a></p></li><li><p>TextBlob：为进行普通自然语言处理任务提供一致的 API。<a href="http://textblob.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>TextGrocery：一简单高效的短文本分类工具，基于 LibLinear 和 Jieba。<a href="https://github.com/2shou/TextGrocery" target="_blank" rel="noopener">官网</a></p></li><li><p>thulac:清华大学自然语言处理与社会人文计算实验室研制推出的一套中文词法分析工具包<a href="https://github.com/thunlp/THULAC-Python" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="文档"><a href="/2018/09/18/cnPython/#文档" class="headerlink" title="文档"></a>文档</h3><p>用以生成项目文档的库。</p><ul><li><p><a href="http://hao.jobbole.com/sphinx/" target="_blank" rel="noopener">Sphinx</a>：Python 文档生成器。<a href="http://www.sphinx-doc.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>awesome-sphinxdoc：<a href="https://github.com/yoloseem/awesome-sphinxdoc" target="_blank" rel="noopener">官网</a></p></li><li><p>MkDocs：对 Markdown 友好的文档生成器。<a href="http://www.mkdocs.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>pdoc：一个可以替换 Epydoc 的库，可以自动生成 Python 库的 API 文档。<a href="https://github.com/BurntSushi/pdoc" target="_blank" rel="noopener">官网</a></p></li><li><p>Pycco：文学编程（literate-programming）风格的文档生成器。<a href="https://github.com/pycco-docs/pycco" target="_blank" rel="noopener">官网</a></p></li><li><p>readthedocs：一个基于 Sphinx/MkDocs 的在线文档托管系统，对开源项目免费开放使用。<a href="https://github.com/rtfd/readthedocs.org/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="配置"><a href="/2018/09/18/cnPython/#配置" class="headerlink" title="配置"></a>配置</h3><p>用来保存和解析配置的库。</p><ul><li><p>config：<a href="https://docs.python.org/2/library/logging.html" target="_blank" rel="noopener">logging</a> 模块作者写的分级配置模块。<a href="https://www.red-dove.com/config-doc/" target="_blank" rel="noopener">官网</a></p></li><li><p>ConfigObj：INI 文件解析器，带验证功能。<a href="http://www.voidspace.org.uk/python/configobj.html" target="_blank" rel="noopener">官网</a></p></li><li><p>ConfigParser：(Python 标准库) INI 文件解析器。<a href="https://docs.python.org/2/library/configparser.html" target="_blank" rel="noopener">官网</a></p></li><li><p>profig：通过多种格式进行配置，具有数值转换功能。<a href="http://profig.readthedocs.org/en/default/" target="_blank" rel="noopener">官网</a></p></li><li><p>python-decouple：将设置和代码完全隔离。<a href="https://github.com/henriquebastos/python-decouple" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="命令行工具"><a href="/2018/09/18/cnPython/#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>用于创建命令行程序的库。</p><ul><li>命令行程序开发</li></ul><ul><li><p>asciimatics：跨平台，全屏终端包（即鼠标/键盘输入和彩色，定位文本输出），完整的复杂动画和特殊效果的高级 API。<a href="https://github.com/peterbrittain/asciimatics" target="_blank" rel="noopener">官网</a></p></li><li><p>cement：Python 的命令行程序框架。<a href="http://builtoncement.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>click：一个通过组合的方式来创建精美命令行界面的包。<a href="http://click.pocoo.org/dev/" target="_blank" rel="noopener">官网</a></p></li><li><p>cliff：一个用于创建命令行程序的框架，可以创建具有多层命令的命令行程序。<a href="http://docs.openstack.org/developer/cliff/" target="_blank" rel="noopener">官网</a></p></li><li><p>clint：Python 命令行程序工具。<a href="https://github.com/kennethreitz/clint" target="_blank" rel="noopener">官网</a></p></li><li><p>colorama：跨平台彩色终端文本。<a href="https://pypi.python.org/pypi/colorama" target="_blank" rel="noopener">官网</a></p></li><li><p>docopt：Python 风格的命令行参数解析器。<a href="http://docopt.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Gooey：一条命令，将命令行程序变成一个 GUI 程序。<a href="https://github.com/chriskiehl/Gooey" target="_blank" rel="noopener">官网</a></p></li><li><p>python-prompt-toolkit：一个用于构建强大的交互式命令行程序的库。<a href="https://github.com/jonathanslenders/python-prompt-toolkit" target="_blank" rel="noopener">官网</a></p></li><li><p>python-fire：Google 出品的一个基于 Python 类的构建命令行界面的库。<a href="https://github.com/google/python-fire" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/pythonpy/" target="_blank" rel="noopener">Pythonpy</a>：在命令行中直接执行任何 Python 指令。<a href="https://github.com/Russell91/pythonpy/wiki" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>生产力工具</li></ul><ul><li><p>aws-cli：Amazon Web Services 的通用命令行界面。<a href="https://github.com/aws/aws-cli" target="_blank" rel="noopener">官网</a></p></li><li><p>bashplotlib：在终端中进行基本绘图。<a href="https://github.com/glamp/bashplotlib" target="_blank" rel="noopener">官网</a></p></li><li><p>caniusepython3：判断是哪个项目妨碍你你移植到 Python3。<a href="https://github.com/brettcannon/caniusepython3" target="_blank" rel="noopener">官网</a></p></li><li><p>cookiecutter：从 cookiecutters（项目模板）创建项目的一个命令行工具。<a href="https://github.com/audreyr/cookiecutter" target="_blank" rel="noopener">官网</a></p></li><li><p>doitlive：一个用来在终端中进行现场演示的工具。<a href="https://github.com/sloria/doitlive" target="_blank" rel="noopener">官网</a></p></li><li><p>pyftpdlib：一个速度极快和可扩展的 Python FTP 服务库。<a href="https://github.com/giampaolo/pyftpdlib" target="_blank" rel="noopener">官网</a></p></li><li><p>howdoi：通过命令行获取即时的编程问题解答。<a href="https://github.com/gleitz/howdoi" target="_blank" rel="noopener">官网</a></p></li><li><p>httpie：一个命令行 HTTP 客户端，cURL 的替代品，易用性更好。<a href="https://github.com/jkbrzt/httpie" target="_blank" rel="noopener">官网</a></p></li><li><p>PathPicker：从 bash 输出中选出文件。<a href="https://github.com/facebook/PathPicker" target="_blank" rel="noopener">官网</a></p></li><li><p>percol：向 UNIX shell 传统管道概念中加入交互式选择功能。<a href="https://github.com/mooz/percol" target="_blank" rel="noopener">官网</a></p></li><li><p>SAWS：一个加强版的 AWS 命令行。<a href="https://github.com/donnemartin/saws" target="_blank" rel="noopener">官网</a></p></li><li><p>thefuck：修正你之前的命令行指令。<a href="https://github.com/nvbn/thefuck" target="_blank" rel="noopener">官网</a></p></li><li><p>mycli：一个 MySQL 命令行客户端，具有自动补全和语法高亮功能。<a href="https://github.com/dbcli/mycli" target="_blank" rel="noopener">官网</a></p></li><li><p>pgcli：Postgres 命令行工具，具有自动补全和语法高亮功能。<a href="https://github.com/dbcli/pgcli" target="_blank" rel="noopener">官网</a></p></li><li><p>try：一个从来没有更简单的命令行工具，用来试用 python 库。<a href="https://github.com/timofurrer/try" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="下载器"><a href="/2018/09/18/cnPython/#下载器" class="headerlink" title="下载器"></a>下载器</h3><p>用来进行下载的库.</p><ul><li><p>s3cmd：一个用来管理 Amazon S3 和 CloudFront 的命令行工具。<a href="https://github.com/s3tools/s3cmd" target="_blank" rel="noopener">官网</a></p></li><li><p>s4cmd：超级 S3 命令行工具，性能更加强劲。<a href="https://github.com/bloomreach/s4cmd" target="_blank" rel="noopener">官网</a></p></li><li><p>you-get：一个 YouTube/Youku/Niconico 视频下载器，使用 Python3 编写。<a href="https://www.soimort.org/you-get/" target="_blank" rel="noopener">官网</a></p></li><li><p>youtube-dl：一个小巧的命令行程序，用来下载 YouTube 视频。<a href="http://rg3.github.io/youtube-dl/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="图像处理"><a href="/2018/09/18/cnPython/#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><p>用来操作图像的库.</p><ul><li><p><a href="http://hao.jobbole.com/pillow/" target="_blank" rel="noopener">pillow</a>：Pillow 是一个更加易用版的 <a href="http://www.pythonware.com/products/pil/" target="_blank" rel="noopener">PIL</a>。<a href="http://pillow.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>hmap：图像直方图映射。<a href="https://github.com/rossgoodwin/hmap" target="_blank" rel="noopener">官网</a></p></li><li><p>imgSeek：一个使用视觉相似性搜索一组图片集合的项目。<a href="https://sourceforge.net/projects/imgseek/" target="_blank" rel="noopener">官网</a></p></li><li><p>nude.py：裸体检测。<a href="https://github.com/hhatto/nude.py" target="_blank" rel="noopener">官网</a></p></li><li><p>pyBarcode：不借助 PIL 库在 Python 程序中生成条形码。<a href="https://pythonhosted.org/pyBarcode/" target="_blank" rel="noopener">官网</a></p></li><li><p>pygram：类似 Instagram 的图像滤镜。<a href="https://github.com/ajkumar25/pygram" target="_blank" rel="noopener">官网</a></p></li><li><p>python-qrcode：一个纯 Python 实现的二维码生成器。<a href="https://github.com/lincolnloop/python-qrcode" target="_blank" rel="noopener">官网</a></p></li><li><p>Quads：基于四叉树的计算机艺术。<a href="https://github.com/fogleman/Quads" target="_blank" rel="noopener">官网</a></p></li><li><p>scikit-image：一个用于（科学）图像处理的 Python 库。<a href="http://scikit-image.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>thumbor：一个小型图像服务，具有剪裁，尺寸重设和翻转功能。<a href="https://github.com/thumbor/thumbor" target="_blank" rel="noopener">官网</a></p></li><li><p>wand：<a href="http://www.imagemagick.org/script/magick-wand.php" target="_blank" rel="noopener">MagickWand</a>的 Python 绑定。MagickWand 是 ImageMagick 的 C API 。<a href="https://github.com/dahlia/wand" target="_blank" rel="noopener">官网</a></p></li><li><p>face_recognition：简单易用的 python 人脸识别库。<a href="https://github.com/ageitgey/face_recognition" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="OCR"><a href="/2018/09/18/cnPython/#OCR" class="headerlink" title="OCR"></a>OCR</h3><p>光学字符识别库。</p><ul><li><p>pyocr：Tesseract 和 Cuneiform 的一个封装(wrapper)。<a href="https://github.com/jflesch/pyocr" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/pytesseract/" target="_blank" rel="noopener">pytesseract</a>：<a href="https://github.com/tesseract-ocr" target="_blank" rel="noopener">Google Tesseract OCR</a> 的另一个封装(wrapper)。<a href="https://github.com/madmaze/pytesseract" target="_blank" rel="noopener">官网</a></p></li><li><p>python-tesseract：<a href="https://github.com/tesseract-ocr" target="_blank" rel="noopener">Google Tesseract OCR</a> 的一个包装类。</p></li></ul><h3 id="音频"><a href="/2018/09/18/cnPython/#音频" class="headerlink" title="音频"></a>音频</h3><p>用来操作音频的库</p><ul><li><p>audiolazy：Python 的数字信号处理包。<a href="https://github.com/danilobellini/audiolazy" target="_blank" rel="noopener">官网</a></p></li><li><p>audioread：交叉库 (GStreamer + Core Audio + MAD + FFmpeg) 音频解码。<a href="https://github.com/beetbox/audioread" target="_blank" rel="noopener">官网</a></p></li><li><p>beets：一个音乐库管理工具及 <a href="https://musicbrainz.org/" target="_blank" rel="noopener">MusicBrainz</a> 标签添加工具。<a href="http://beets.io/" target="_blank" rel="noopener">官网</a></p></li><li><p>dejavu：音频指纹提取和识别。<a href="https://github.com/worldveil/dejavu" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/django-elastic-transcoder/" target="_blank" rel="noopener">django-elastic-transcoder</a>：Django + <a href="http://aws.amazon.com/elastictranscoder/" target="_blank" rel="noopener">Amazon Elastic Transcoder</a>。<a href="https://github.com/StreetVoice/django-elastic-transcoder" target="_blank" rel="noopener">官网</a></p></li><li><p>eyeD3：一个用来操作音频文件的工具，具体来讲就是包含 ID3 元信息的 MP3 文件。<a href="http://eyed3.nicfit.net/" target="_blank" rel="noopener">官网</a></p></li><li><p>id3reader：一个用来读取 MP3 元数据的 Python 模块。<a href="http://nedbatchelder.com/code/modules/id3reader.py" target="_blank" rel="noopener">官网</a></p></li><li><p>m3u8：一个用来解析 m3u8 文件的模块。<a href="https://github.com/globocom/m3u8" target="_blank" rel="noopener">官网</a></p></li><li><p>mutagen：一个用来处理音频元数据的 Python 模块。<a href="https://bitbucket.org/lazka/mutagen" target="_blank" rel="noopener">官网</a></p></li><li><p>pydub：通过简单、简洁的高层接口来操作音频文件。<a href="https://github.com/jiaaro/pydub" target="_blank" rel="noopener">官网</a></p></li><li><p>pyechonest：<a href="http://developer.echonest.com/" target="_blank" rel="noopener">Echo Nest</a> API 的 Python 客户端。<a href="https://github.com/echonest/pyechonest" target="_blank" rel="noopener">官网</a></p></li><li><p>talkbox：一个用来处理演讲/信号的 Python 库。<a href="http://scikits.appspot.com/talkbox" target="_blank" rel="noopener">官网</a></p></li><li><p>TimeSide：开源 web 音频处理框架。<a href="https://github.com/Parisson/TimeSide" target="_blank" rel="noopener">官网</a></p></li><li><p>tinytag：一个用来读取 MP3, OGG, FLAC 以及 Wave 文件音乐元数据的库。<a href="https://github.com/devsnd/tinytag" target="_blank" rel="noopener">官网</a></p></li><li><p>mingus：一个高级音乐理论和曲谱包，支持 MIDI 文件和回放功能。<a href="http://bspaans.github.io/python-mingus/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="Video"><a href="/2018/09/18/cnPython/#Video" class="headerlink" title="Video"></a>Video</h3><p>用来操作视频和 GIF 的库。</p><ul><li><p>moviepy：一个用来进行基于脚本的视频编辑模块，适用于多种格式，包括动图 GIFs。<a href="http://zulko.github.io/moviepy/" target="_blank" rel="noopener">官网</a></p></li><li><p>scikit-video：SciPy 视频处理常用程序。<a href="https://github.com/aizvorski/scikit-video" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="地理位置"><a href="/2018/09/18/cnPython/#地理位置" class="headerlink" title="地理位置"></a>地理位置</h3><p>地理编码地址以及用来处理经纬度的库。</p><ul><li><p>GeoDjango：世界级地理图形 web 框架。<a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/" target="_blank" rel="noopener">官网</a></p></li><li><p>GeoIP：MaxMind GeoIP Legacy 数据库的 Python API。<a href="https://github.com/maxmind/geoip-api-python" target="_blank" rel="noopener">官网</a></p></li><li><p>geojson：GeoJSON 的 Python 绑定及工具。<a href="https://github.com/frewsxcv/python-geojson" target="_blank" rel="noopener">官网</a></p></li><li><p>geopy：Python 地址编码工具箱。<a href="https://github.com/geopy/geopy" target="_blank" rel="noopener">官网</a></p></li><li><p>pygeoip：纯 Python GeoIP API。<a href="https://github.com/appliedsec/pygeoip" target="_blank" rel="noopener">官网</a></p></li><li><p>django-countries：一个 Django 应用程序，提供用于表格的国家选择功能，国旗图标静态文件以及模型中的国家字段。<a href="https://github.com/SmileyChris/django-countries" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="HTTP"><a href="/2018/09/18/cnPython/#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>使用 HTTP 的库。</p><ul><li><p>aiohttp：基于 asyncio 的异步 HTTP 网络库。<a href="https://github.com/aio-libs/aiohttp" target="_blank" rel="noopener">官网</a></p></li><li><p>requests：人性化的 HTTP 请求库。<a href="http://docs.python-requests.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>grequests：requests 库 + gevent ，用于异步 HTTP 请求.<a href="https://github.com/kennethreitz/grequests" target="_blank" rel="noopener">官网</a></p></li><li><p>httplib2：全面的 HTTP 客户端库。<a href="https://github.com/jcgregorio/httplib2" target="_blank" rel="noopener">官网</a></p></li><li><p>treq：类似 requests 的 Python API 构建于 Twisted HTTP 客户端之上。<a href="https://github.com/twisted/treq" target="_blank" rel="noopener">官网</a></p></li><li><p>urllib3：一个具有线程安全连接池，支持文件 post，清晰友好的 HTTP 库。<a href="https://github.com/shazow/urllib3" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="数据库"><a href="/2018/09/18/cnPython/#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Python 实现的数据库。</p><ul><li><p>pickleDB：一个简单，轻量级键值储存数据库。<a href="https://pythonhosted.org/pickleDB/" target="_blank" rel="noopener">官网</a></p></li><li><p>PipelineDB：流式 SQL 数据库。<a href="https://www.pipelinedb.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>TinyDB：一个微型的，面向文档型数据库。<a href="https://github.com/msiemens/tinydb" target="_blank" rel="noopener">官网</a></p></li><li><p>ZODB：一个 Python 原生对象数据库。一个键值和对象图数据库。<a href="http://www.zodb.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="数据库驱动"><a href="/2018/09/18/cnPython/#数据库驱动" class="headerlink" title="数据库驱动"></a>数据库驱动</h3><p>用来连接和操作数据库的库。</p><ul><li>MySQL：<a href="http://shlomi-noach.github.io/awesome-mysql/" target="_blank" rel="noopener">awesome-mysql</a> 系列</li></ul><ul><li><p>aiomysql：基于 asyncio 的异步 MySQL 数据库操作库。<a href="https://github.com/aio-libs/aiomysql" target="_blank" rel="noopener">官网</a></p></li><li><p>mysql-python：Python 的 MySQL 数据库连接器。<a href="https://sourceforge.net/projects/mysql-python/" target="_blank" rel="noopener">官网</a></p></li><li><p>ysqlclient：<a href="https://github.com/PyMySQL/mysqlclient-python" target="_blank" rel="noopener">mysql-python</a> 分支，支持 Python 3。</p></li><li><p>oursql：一个更好的 MySQL 连接器，支持原生预编译指令和 BLOBs。<a href="https://pythonhosted.org/oursql/" target="_blank" rel="noopener">官网</a></p></li><li><p>PyMySQL：纯 Python MySQL 驱动，兼容 mysql-python。<a href="https://github.com/PyMySQL/PyMySQL" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>PostgreSQL</li></ul><ul><li><p>psycopg2：Python 中最流行的 PostgreSQL 适配器。<a href="http://initd.org/psycopg/" target="_blank" rel="noopener">官网</a></p></li><li><p>queries：psycopg2 库的封装，用来和 PostgreSQL 进行交互。<a href="https://github.com/gmr/queries" target="_blank" rel="noopener">官网</a></p></li><li><p>txpostgres：基于 Twisted 的异步 PostgreSQL 驱动。<a href="http://txpostgres.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>其他关系型数据库</li></ul><ul><li><p>apsw：另一个 Python SQLite 封装。<a href="http://rogerbinns.github.io/apsw/" target="_blank" rel="noopener">官网</a></p></li><li><p>dataset：在数据库中存储 Python 字典</p></li><li><p>pymssql：一个简单的 Microsoft SQL Server 数据库接口。<a href="http://www.pymssql.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>NoSQL 数据库</li></ul><ul><li><p>cassandra-python-driver：Cassandra 的 Python 驱动。<a href="https://github.com/datastax/python-driver" target="_blank" rel="noopener">官网</a></p></li><li><p>HappyBase：一个为 Apache HBase 设计的，对开发者友好的库。<a href="http://happybase.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>Plyvel：一个快速且功能丰富的 LevelDB 的 Python 接口。<a href="https://plyvel.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>py2neo：Neo4j restful 接口的 Python 封装客户端。<a href="http://py2neo.org/2.0/" target="_blank" rel="noopener">官网</a></p></li><li><p>pycassa：Cassandra 的 Python Thrift 驱动。<a href="https://github.com/pycassa/pycassa" target="_blank" rel="noopener">官网</a></p></li><li><p>PyMongo：MongoDB 的官方 Python 客户端。<a href="https://docs.mongodb.org/ecosystem/drivers/python/" target="_blank" rel="noopener">官网</a></p></li><li><p>redis-py：Redis 的 Python 客户端。<a href="https://github.com/andymccurdy/redis-py" target="_blank" rel="noopener">官网</a></p></li><li><p>telephus：基于 Twisted 的 Cassandra 客户端。<a href="https://github.com/driftx/Telephus" target="_blank" rel="noopener">官网</a></p></li><li><p>txRedis：基于 Twisted 的 Redis 客户端。<a href="https://github.com/deldotdr/txRedis" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="ORM"><a href="/2018/09/18/cnPython/#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>实现对象关系映射或数据映射技术的库。</p><ul><li>关系型数据库</li></ul><ul><li><p><a href="https://github.com/dahlia/awesome-sqlalchemy" target="_blank" rel="noopener">awesome-sqlalchemy</a> 系列</p></li><li><p>Django Models：Django 的一部分。<a href="https://docs.djangoproject.com/en/dev/topics/db/models/" target="_blank" rel="noopener">官网</a></p></li><li><p>SQLAlchemy：Python SQL 工具以及对象关系映射工具。<a href="http://www.sqlalchemy.org/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/peewee/" target="_blank" rel="noopener">Peewee</a>：一个小巧，富有表达力的 ORM。<a href="https://github.com/coleifer/peewee" target="_blank" rel="noopener">官网</a></p></li><li><p>PonyORM：提供面向生成器的 SQL 接口的 ORM。<a href="https://ponyorm.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>python-sql：编写 Python 风格的 SQL 查询。<a href="https://pypi.python.org/pypi/python-sql" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>NoSQL 数据库</li></ul><ul><li><p>django-mongodb-engine：Django MongoDB 后端。<a href="https://github.com/django-nonrel/mongodb-engine" target="_blank" rel="noopener">官网</a></p></li><li><p>PynamoDB：<a href="https://aws.amazon.com/dynamodb/" target="_blank" rel="noopener">Amazon DynamoDB</a> 的一个 Python 风格接口。<a href="https://github.com/jlafon/PynamoDB" target="_blank" rel="noopener">官网</a></p></li><li><p>flywheel：Amazon DynamoDB 的对象映射工具。<a href="https://github.com/mathcamp/flywheel" target="_blank" rel="noopener">官网</a></p></li><li><p>MongoEngine：一个 Python 对象文档映射工具，用于 MongoDB。<a href="http://mongoengine.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>hot-redis：为 Redis 提供 Python 丰富的数据类型。<a href="https://github.com/stephenmcd/hot-redis" target="_blank" rel="noopener">官网</a></p></li><li><p>redisco：一个 Python 库，提供可以持续存在在 Redis 中的简单模型和容器。<a href="https://github.com/kiddouk/redisco" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>其他</li></ul><ul><li>butterdb：Google Drive 电子表格的 Python ORM。<a href="https://github.com/Widdershin/butterdb" target="_blank" rel="noopener">官网</a></li></ul><h3 id="Web-框架"><a href="/2018/09/18/cnPython/#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h3><p>全栈 Web 框架。</p><ul><li><a href="http://hao.jobbole.com/django/" target="_blank" rel="noopener">Django</a>：Python 界最流行的 web 框架。<a href="https://www.djangoproject.com/" target="_blank" rel="noopener">官网</a></li></ul><ul><li><a href="https://gitlab.com/rosarior/awesome-django" target="_blank" rel="noopener">awesome-django</a> 系列</li></ul><ul><li><a href="http://hao.jobbole.com/flask/" target="_blank" rel="noopener">Flask</a>：一个 Python 微型框架。<a href="http://flask.pocoo.org/" target="_blank" rel="noopener">官网</a></li></ul><ul><li><a href="https://github.com/humiaozuzu/awesome-flask" target="_blank" rel="noopener">awesome-flask</a> 系列</li></ul><ul><li>pyramid：一个小巧，快速，接地气的开源 Python web 框架。</li></ul><ul><li><a href="https://github.com/uralbash/awesome-pyramid" target="_blank" rel="noopener">awesome-pyramid</a> 系列</li></ul><ul><li><p><a href="http://hao.jobbole.com/bottle/" target="_blank" rel="noopener">Bottle</a>：一个快速小巧，轻量级的 WSGI 微型 web 框架。<a href="http://bottlepy.org/docs/dev/index.html" target="_blank" rel="noopener">官网</a></p></li><li><p>CherryPy：一个极简的 Python web 框架，服从 HTTP/1.1 协议且具有 WSGI 线程池。<a href="http://www.cherrypy.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>TurboGears：一个可以扩展为全栈解决方案的微型框架。<a href="http://www.turbogears.org/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/python-webpy/" target="_blank" rel="noopener">web.py</a>：一个 Python 的 web 框架，既简单，又强大。<a href="http://webpy.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>web2py：一个全栈 web 框架和平台，专注于简单易用。<a href="http://www.web2py.com/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/tornado/" target="_blank" rel="noopener">Tornado</a>：一个 web 框架和异步网络库。<a href="http://www.tornadoweb.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>sanic：基于 Python3.5+ 的异步网络框架。<a href="https://github.com/channelcat/sanic/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="权限"><a href="/2018/09/18/cnPython/#权限" class="headerlink" title="权限"></a>权限</h3><p>允许或拒绝用户访问数据或功能的库。</p><ul><li><p>Carteblanche：站在用户和设计者角度开发的一个代码对齐模块，很好地处理了代码导航及权限。<a href="https://github.com/neuman/python-carteblanche/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-guardian：Django 1.2+ 实现了单个对象权限。<a href="https://github.com/django-guardian/django-guardian" target="_blank" rel="noopener">官网</a></p></li><li><p>django-rules：一个小巧但是强大的应用，提供对象级别的权限管理，且不需要使用数据库。<a href="https://github.com/dfunckt/django-rules" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="CMS"><a href="/2018/09/18/cnPython/#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>内容管理系统</p><ul><li><p>odoo-cms: 一个开源的，企业级 CMS，基于 odoo。<a href="http://www.odoo.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-cms：一个开源的，企业级 CMS，基于 Django。<a href="http://www.django-cms.org/en/" target="_blank" rel="noopener">官网</a></p></li><li><p>djedi-cms：一个轻量级但却非常强大的 Django CMS ，考虑到了插件，内联编辑以及性能。<a href="http://djedi-cms.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>FeinCMS：基于 Django 构建的最先进的内容管理系统之一。<a href="http://www.feincms.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Kotti：一个高级的，Python 范的 web 应用框架，基于 Pyramid 构建。<a href="http://kotti.pylonsproject.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Mezzanine：一个强大的，持续的，灵活的内容管理平台。<a href="http://mezzanine.jupo.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Opps：一个为杂志，报纸网站以及大流量门户网站设计的 CMS 平台，基于 Django。<a href="http://opps.github.io/opps/" target="_blank" rel="noopener">官网</a></p></li><li><p>Plone：一个构建于开源应用服务器 Zope 之上的 CMS。<a href="https://plone.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Quokka：灵活，可扩展的小型 CMS，基于 Flask 和 MongoDB。<a href="http://quokkaproject.org/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/wagtail/" target="_blank" rel="noopener">Wagtail</a>：一个 Django 内容管理系统。<a href="https://wagtail.io/" target="_blank" rel="noopener">官网</a></p></li><li><p>Widgy：最新的 CMS 框架，基于 Django。<a href="https://wid.gy/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="电子商务"><a href="/2018/09/18/cnPython/#电子商务" class="headerlink" title="电子商务"></a>电子商务</h3><p>用于电子商务以及支付的框架和库。</p><ul><li><p>django-oscar：一个用于 Django 的开源的电子商务框架。<a href="http://oscarcommerce.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-shop：一个基于 Django 的店铺系统。<a href="https://github.com/awesto/django-shop" target="_blank" rel="noopener">官网</a></p></li><li><p>Cartridge：一个基于 Mezzanine 构建的购物车应用。<a href="https://github.com/stephenmcd/cartridge" target="_blank" rel="noopener">官网</a></p></li><li><p>shoop：一个基于 Django 的开源电子商务平台。<a href="https://www.shoop.io/en/" target="_blank" rel="noopener">官网</a></p></li><li><p>alipay：非官方的 Python 支付宝 API。<a href="https://github.com/lxneng/alipay" target="_blank" rel="noopener">官网</a></p></li><li><p>merchant：一个可以接收来自多种支付平台支付的 Django 应用。<a href="https://github.com/agiliq/merchant" target="_blank" rel="noopener">官网</a></p></li><li><p>money：一个货币类库。带有可选的 CLDR 后端本地化格式，提供可扩展的货币兑换解决方案。<a href="https://github.com/carlospalol/money" target="_blank" rel="noopener">官网</a></p></li><li><p>python-currencies：显示货币格式以及它的数值。<a href="https://github.com/Alir3z4/python-currencies" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="RESTful-API"><a href="/2018/09/18/cnPython/#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><p>用来开发 RESTful APIs 的库</p><ul><li>Django</li></ul><ul><li><p><a href="http://hao.jobbole.com/django-rest-framework/" target="_blank" rel="noopener">django-rest-framework</a>：一个强大灵活的工具，用来构建 web API。<a href="http://www.django-rest-framework.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-tastypie：为 Django 应用开发 API。<a href="http://tastypieapi.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-formapi：为 Django 的表单验证，创建 JSON APIs 。<a href="https://github.com/5monkeys/django-formapi" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>Flask</li></ul><ul><li><p>flask-api：为 flask 开发的，可浏览 Web APIs 。<a href="http://www.flaskapi.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>flask-restful：为 flask 快速创建 REST APIs 。<a href="http://flask-restful.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>flask-restless：为 SQLAlchemy 定义的数据库模型创建 RESTful APIs 。<a href="https://flask-restless.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>flask-api-utils：为 Flask 处理 API 表示和验证。<a href="https://github.com/marselester/flask-api-utils" target="_blank" rel="noopener">官网</a></p></li><li><p>eve：REST API 框架，由 Flask, MongoDB 等驱动。<a href="https://github.com/nicolaiarocci/eve" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>Pyramid</li></ul><ul><li>cornice：一个 Pyramid 的 REST 框架 。<a href="https://cornice.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></li></ul><ul><li>与框架无关的</li></ul><ul><li><p>falcon：一个用来建立云 API 和 web app 后端的高性能框架。<a href="http://falconframework.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>sandman：为现存的数据库驱动系统自动创建 REST APIs 。<a href="https://github.com/jeffknupp/sandman" target="_blank" rel="noopener">官网</a></p></li><li><p>restless：框架无关的 REST 框架 ，基于从 Tastypie 学到的知识。<a href="http://restless.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>ripozo：快速创建 REST/HATEOAS/Hypermedia APIs。<a href="https://github.com/vertical-knowledge/ripozo" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="验证"><a href="/2018/09/18/cnPython/#验证" class="headerlink" title="验证"></a>验证</h3><p>实现验证方案的库。</p><ul><li>OAuth</li></ul><ul><li><p>Authomatic：简单但是强大的框架，身份验证/授权客户端。<a href="http://peterhudec.github.io/authomatic/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-allauth：Django 的验证应用。<a href="https://github.com/pennersr/django-allauth" target="_blank" rel="noopener">官网</a></p></li><li><p>django-oauth-toolkit：为 Django 用户准备的 OAuth2。<a href="https://github.com/evonove/django-oauth-toolkit" target="_blank" rel="noopener">官网</a></p></li><li><p>django-oauth2-provider：为 Django 应用提供 OAuth2 接入。<a href="https://github.com/caffeinehit/django-oauth2-provider" target="_blank" rel="noopener">官网</a></p></li><li><p>Flask-OAuthlib：OAuth 1.0/a, 2.0 客户端实现，供 Flask 使用。<a href="https://github.com/lepture/flask-oauthlib" target="_blank" rel="noopener">官网</a></p></li><li><p>OAuthLib：一个 OAuth 请求-签名逻辑通用、 完整的实现。<a href="https://github.com/idan/oauthlib" target="_blank" rel="noopener">官网</a></p></li><li><p>python-oauth2：一个完全测试的抽象接口。用来创建 OAuth 客户端和服务端。<a href="https://github.com/joestump/python-oauth2" target="_blank" rel="noopener">官网</a></p></li><li><p>python-social-auth：一个设置简单的社会化验证方式。<a href="https://github.com/omab/python-social-auth" target="_blank" rel="noopener">官网</a></p></li><li><p>rauth：OAuth 1.0/a, 2.0, 和 Ofly 的 Python 库。<a href="https://github.com/litl/rauth" target="_blank" rel="noopener">官网</a></p></li><li><p>sanction：一个超级简单的 OAuth2 客户端实现。<a href="https://github.com/demianbrecht/sanction" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>其他</li></ul><ul><li><p>jose：JavaScript 对象签名和加密草案的实现。<a href="https://github.com/demonware/jose" target="_blank" rel="noopener">官网</a></p></li><li><p>PyJWT：JSON Web 令牌草案 01。<a href="https://github.com/jpadilla/pyjwt" target="_blank" rel="noopener">官网</a></p></li><li><p>python-jws：JSON Web 签名草案 02 的实现。<a href="https://github.com/brianloveswords/python-jws" target="_blank" rel="noopener">官网</a></p></li><li><p>python-jwt：一个用来生成和验证 JSON Web 令牌的模块。<a href="https://github.com/davedoesdev/python-jwt" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="模板引擎"><a href="/2018/09/18/cnPython/#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>模板生成和词法解析的库和工具。</p><ul><li><p><a href="http://hao.jobbole.com/jinja2/" target="_blank" rel="noopener">Jinja2</a>：一个现代的，对设计师友好的模板引擎。<a href="https://github.com/pallets/jinja" target="_blank" rel="noopener">官网</a></p></li><li><p>Chameleon：一个 HTML/XML 模板引擎。 模仿了 ZPT（Zope Page Templates）, 进行了速度上的优化。<a href="https://chameleon.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>Genshi：Python 模板工具，用以生成 web 感知的结果。<a href="https://genshi.edgewall.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Mako：Python 平台的超高速轻量级模板。<a href="http://www.makotemplates.org/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="队列"><a href="/2018/09/18/cnPython/#队列" class="headerlink" title="队列"></a>队列</h3><p>处理事件以及任务队列的库。</p><ul><li><p>celery：一个异步任务队列/作业队列，基于分布式消息传递。<a href="http://www.celeryproject.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>huey：小型多线程任务队列。<a href="https://github.com/coleifer/huey" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/mrq/" target="_blank" rel="noopener">mrq</a>：Mr. Queue -一个 Python 的分布式 worker 任务队列， 使用 Redis 和 gevent。<a href="https://github.com/pricingassistant/mrq" target="_blank" rel="noopener">官网</a></p></li><li><p>rq：简单的 Python 作业队列。<a href="http://python-rq.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>simpleq：一个简单的，可无限扩张的，基于亚马逊 SQS 的队列。<a href="https://github.com/rdegges/simpleq" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="搜索"><a href="/2018/09/18/cnPython/#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>对数据进行索引和执行搜索查询的库和软件。</p><ul><li><p>django-haystack：Django 模块化搜索。<a href="https://github.com/django-haystack/django-haystack" target="_blank" rel="noopener">官网</a></p></li><li><p>elasticsearch-py：Elasticsearch 的官方底层 Python 客户端。<a href="https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html" target="_blank" rel="noopener">官网</a></p></li><li><p>elasticsearch-dsl-py：Elasticsearch 的官方高级 Python 客户端。<a href="https://github.com/elastic/elasticsearch-dsl-py" target="_blank" rel="noopener">官网</a></p></li><li><p>solrpy：<a href="http://lucene.apache.org/solr/" target="_blank" rel="noopener">solr</a> 的 Python 客户端。<a href="https://github.com/edsu/solrpy" target="_blank" rel="noopener">官网</a></p></li><li><p>Whoosh：一个快速的纯 Python 搜索引擎库。<a href="http://whoosh.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="动态消息"><a href="/2018/09/18/cnPython/#动态消息" class="headerlink" title="动态消息"></a>动态消息</h3><p>用来创建用户活动的库。</p><ul><li><p>django-activity-stream：从你的站点行为中生成通用活动信息流。<a href="https://github.com/justquick/django-activity-stream" target="_blank" rel="noopener">官网</a></p></li><li><p>Stream-Framework：使用 Cassandra 和 Redis 创建动态消息和通知系统。<a href="https://github.com/tschellenbach/Stream-Framework" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="资源管理"><a href="/2018/09/18/cnPython/#资源管理" class="headerlink" title="资源管理"></a>资源管理</h3><p>管理、压缩、缩小网站资源的工具。</p><ul><li><p>django-compressor：将链接和内联的 JavaScript 或 CSS 压缩到一个单独的缓存文件中。<a href="https://github.com/django-compressor/django-compressor" target="_blank" rel="noopener">官网</a></p></li><li><p>django-storages：一个针对 Django 的自定义存储后端的工具集合。<a href="http://django-storages.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>fanstatic：打包、优化，并且把静态文件依赖作为 Python 的包来提供。<a href="http://www.fanstatic.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>File Conveyor：一个后台驻留的程序，用来发现和同步文件到 CDNs, S3 和 FTP。<a href="http://fileconveyor.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Flask-Assets：帮你将 web 资源整合到你的 Flask app 中。<a href="http://flask-assets.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>jinja-assets-compressor：一个 Jinja 扩展，用来编译和压缩你的资源。<a href="https://github.com/jaysonsantos/jinja-assets-compressor" target="_blank" rel="noopener">官网</a></p></li><li><p>webassets：为你的静态资源打包、优化和管理生成独一无二的缓存 URL。<a href="http://webassets.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="缓存"><a href="/2018/09/18/cnPython/#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存数据的库。</p><ul><li><p>Beaker：一个缓存和会话库，可以用在 web 应用和独立 Python 脚本和应用上。<a href="http://beaker.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-cache-machine：Django 模型的自动缓存和失效。<a href="https://github.com/django-cache-machine/django-cache-machine" target="_blank" rel="noopener">官网</a></p></li><li><p>django-cacheops：具有自动颗粒化事件驱动失效功能的 ORM。<a href="https://github.com/Suor/django-cacheops" target="_blank" rel="noopener">官网</a></p></li><li><p>django-viewlet：渲染模板，同时具有额外的缓存控制功能。<a href="https://github.com/5monkeys/django-viewlet" target="_blank" rel="noopener">官网</a></p></li><li><p>dogpile.cache：dogpile.cache 是 Beaker 的下一代替代品，由同一作者开发。<a href="http://dogpilecache.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>HermesCache：Python 缓存库，具有基于标签的失效和 dogpile effect 保护功能。<a href="https://pypi.python.org/pypi/HermesCache" target="_blank" rel="noopener">官网</a></p></li><li><p>johnny-cache：django 应用缓存框架。<a href="https://github.com/jmoiron/johnny-cache" target="_blank" rel="noopener">官网</a></p></li><li><p>pylibmc：<a href="http://libmemcached.org/libMemcached.html" target="_blank" rel="noopener">libmemcached</a> 接口的 Python 封装。<a href="https://github.com/lericson/pylibmc" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="电子邮件"><a href="/2018/09/18/cnPython/#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><p>用来发送和解析电子邮件的库。</p><ul><li><p>django-celery-ses：带有 AWS SES 和 Celery 的 Django email 后端。<a href="https://github.com/StreetVoice/django-celery-ses" target="_blank" rel="noopener">官网</a></p></li><li><p>envelopes：供人类使用的电子邮件库。<a href="http://tomekwojcik.github.io/envelopes/" target="_blank" rel="noopener">官网</a></p></li><li><p>flanker：一个 email 地址和 Mime 解析库。<a href="https://github.com/mailgun/flanker" target="_blank" rel="noopener">官网</a></p></li><li><p>imbox：Python IMAP 库。<a href="https://github.com/martinrusev/imbox" target="_blank" rel="noopener">官网</a></p></li><li><p>inbox.py：Python SMTP 服务器。<a href="https://github.com/kennethreitz/inbox.py" target="_blank" rel="noopener">官网</a></p></li><li><p>inbox：一个开源电子邮件工具箱。<a href="https://github.com/nylas/sync-engine" target="_blank" rel="noopener">官网</a></p></li><li><p>lamson：Python 风格的 SMTP 应用服务器。<a href="https://github.com/zedshaw/lamson" target="_blank" rel="noopener">官网</a></p></li><li><p>mailjet：Mailjet API 实现，用来提供批量发送邮件，统计等功能。<a href="https://github.com/WoLpH/mailjet" target="_blank" rel="noopener">官网</a></p></li><li><p>marrow.mailer：高性能可扩展邮件分发框架。<a href="https://github.com/marrow/mailer" target="_blank" rel="noopener">官网</a></p></li><li><p>modoboa：一个邮件托管和管理平台，具有现代的、简约的 Web UI。<a href="https://github.com/tonioo/modoboa" target="_blank" rel="noopener">官网</a></p></li><li><p>pyzmail：创建，发送和解析电子邮件。<a href="http://www.magiksys.net/pyzmail/" target="_blank" rel="noopener">官网</a></p></li><li><p>Talon：Mailgun 库，用来抽取信息和签名。<a href="https://github.com/mailgun/talon" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="国际化"><a href="/2018/09/18/cnPython/#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>用来进行国际化的库。</p><ul><li><p>Babel：一个 Python 的国际化库。<a href="http://babel.pocoo.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>Korean：一个韩语词态库。<a href="https://korean.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="URL-处理"><a href="/2018/09/18/cnPython/#URL-处理" class="headerlink" title="URL 处理"></a>URL 处理</h3><p>解析 URLs 的库</p><ul><li><p>furl：一个让处理 URL 更简单小型 Python 库。<a href="https://github.com/gruns/furl" target="_blank" rel="noopener">官网</a></p></li><li><p>purl：一个简单的，不可变的 URL 类，具有简洁的 API 来进行询问和处理。<a href="https://github.com/codeinthehole/purl" target="_blank" rel="noopener">官网</a></p></li><li><p>pyshorteners：一个纯 Python URL 缩短库。<a href="https://github.com/ellisonleao/pyshorteners" target="_blank" rel="noopener">官网</a></p></li><li><p>shorturl：生成短小 URL 和类似 bit.ly 短链的 Python 实现。<a href="https://github.com/Alir3z4/python-shorturl" target="_blank" rel="noopener">官网</a></p></li><li><p>webargs：一个解析 HTTP 请求参数的库，内置对流行 web 框架的支持，包括 Flask, Django, Bottle, Tornado 和 Pyramid。<a href="https://github.com/sloria/webargs" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="HTML-处理"><a href="/2018/09/18/cnPython/#HTML-处理" class="headerlink" title="HTML 处理"></a>HTML 处理</h3><p>处理 HTML 和 XML 的库。</p><ul><li><p>BeautifulSoup：以 Python 风格的方式来对 HTML 或 XML 进行迭代，搜索和修改。<a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="noopener">官网</a></p></li><li><p>bleach：一个基于白名单的 HTML 清理和文本链接库。<a href="http://bleach.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>cssutils：一个 Python 的 CSS 库。<a href="https://pypi.python.org/pypi/cssutils/" target="_blank" rel="noopener">官网</a></p></li><li><p>html5lib：一个兼容标准的 HTML 文档和片段解析及序列化库。<a href="https://github.com/html5lib/html5lib-python" target="_blank" rel="noopener">官网</a></p></li><li><p>lxml：一个非常快速，简单易用，功能齐全的库，用来处理 HTML 和 XML。<a href="http://lxml.de/" target="_blank" rel="noopener">官网</a></p></li><li><p>MarkupSafe：为 Python 实现 XML/HTML/XHTML 标记安全字符串。<a href="https://github.com/pallets/markupsafe" target="_blank" rel="noopener">官网</a></p></li><li><p>pyquery：一个解析 HTML 的库，类似 jQuery。<a href="https://github.com/gawel/pyquery" target="_blank" rel="noopener">官网</a></p></li><li><p>requests-html：人性化的，Pythonic 的 HTML 解析库。<a href="https://github.com/kennethreitz/requests-html" target="_blank" rel="noopener">官网</a></p></li><li><p>untangle：将 XML 文档转换为 Python 对象，使其可以方便的访问。<a href="https://github.com/stchris/untangle" target="_blank" rel="noopener">官网</a></p></li><li><p>xhtml2pdf：HTML/CSS 转 PDF 工具。<a href="https://github.com/xhtml2pdf/xhtml2pdf" target="_blank" rel="noopener">官网</a></p></li><li><p>xmltodict：像处理 JSON 一样处理 XML。<a href="https://github.com/martinblech/xmltodict" target="_blank" rel="noopener">官网</a></p></li></ul><p>爬取网络站点的库</p><ul><li><p>Scrapy：一个快速高级的屏幕爬取及网页采集框架。<a href="http://scrapy.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>cola：一个分布式爬虫框架。<a href="https://github.com/chineking/cola" target="_blank" rel="noopener">官网</a></p></li><li><p>Demiurge：基于 PyQuery 的爬虫微型框架。<a href="https://github.com/matiasb/demiurge" target="_blank" rel="noopener">官网</a></p></li><li><p>feedparser：通用 feed 解析器。<a href="http://pythonhosted.org/feedparser/" target="_blank" rel="noopener">官网</a></p></li><li><p>Grab：站点爬取框架。<a href="http://grablib.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>MechanicalSoup：用于自动和网络站点交互的 Python 库。<a href="https://github.com/hickford/MechanicalSoup" target="_blank" rel="noopener">官网</a></p></li><li><p>portia：Scrapy 可视化爬取。<a href="https://github.com/scrapinghub/portia" target="_blank" rel="noopener">官网</a></p></li><li><p>pyspider：一个强大的爬虫系统。<a href="https://github.com/binux/pyspider" target="_blank" rel="noopener">官网</a></p></li><li><p>RoboBrowser：一个简单的，Python 风格的库，用来浏览网站，而不需要一个独立安装的浏览器。<a href="https://github.com/jmcarp/robobrowser" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="网页内容提取"><a href="/2018/09/18/cnPython/#网页内容提取" class="headerlink" title="网页内容提取"></a>网页内容提取</h3><p>用于进行网页内容提取的库。</p><ul><li><p>Haul：一个可以扩展的图像爬取工具。<a href="https://github.com/vinta/Haul" target="_blank" rel="noopener">官网</a></p></li><li><p>html2text：将 HTML 转换为 Markdown 格式文本。<a href="https://github.com/Alir3z4/html2text" target="_blank" rel="noopener">官网</a></p></li><li><p>lassie：人性化的网页内容检索库。<a href="https://github.com/michaelhelmick/lassie" target="_blank" rel="noopener">官网</a></p></li><li><p>micawber：一个小型网页内容提取库，用来从 URLs 提取富内容。<a href="https://github.com/coleifer/micawber" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/python-newspaper/" target="_blank" rel="noopener">newspaper</a>：使用 Python 进行新闻提取，文章提取以及内容策展。<a href="https://github.com/codelucas/newspaper" target="_blank" rel="noopener">官网</a></p></li><li><p>opengraph：一个用来解析开放内容协议(Open Graph Protocol)的 Python 模块。<a href="https://github.com/erikriver/opengraph" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/python-goose/" target="_blank" rel="noopener">python-goose</a>：HTML 内容/文章提取器。<a href="https://github.com/grangier/python-goose" target="_blank" rel="noopener">官网</a></p></li><li><p>python-readability：arc90 公司 readability 工具的 Python 高速端口。<a href="https://github.com/buriy/python-readability" target="_blank" rel="noopener">官网</a></p></li><li><p>sanitize：为杂乱的数据世界带来调理性。<a href="https://github.com/Alir3z4/python-sanitize" target="_blank" rel="noopener">官网</a></p></li><li><p>sumy：一个为文本文件和 HTML 页面进行自动摘要的模块。<a href="https://github.com/miso-belica/sumy" target="_blank" rel="noopener">官网</a></p></li><li><p>textract：从任何格式的文档中提取文本，Word，PowerPoint，PDFs 等等。<a href="https://github.com/deanmalmgren/textract" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="表单"><a href="/2018/09/18/cnPython/#表单" class="headerlink" title="表单"></a>表单</h3><p>进行表单操作的库。</p><ul><li><p>Deform：Python HTML 表单生成库，受到了 formish 表单生成库的启发。<a href="http://deform.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-bootstrap3：集成了 Bootstrap 3 的 Django。<a href="https://github.com/dyve/django-bootstrap3" target="_blank" rel="noopener">官网</a></p></li><li><p>django-crispy-forms：一个 Django 应用，他可以让你以一种非常优雅且 DRY（Don’t repeat yourself） 的方式来创建美观的表单。<a href="http://django-crispy-forms.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-remote-forms：一个平台独立的 Django 表单序列化工具。<a href="https://github.com/WiserTogether/django-remote-forms" target="_blank" rel="noopener">官网</a></p></li><li><p>WTForms：一个灵活的表单验证和呈现库。<a href="http://wtforms.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>WTForms-JSON：一个 WTForms 扩展，用来处理 JSON 数据。<a href="http://wtforms-json.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="数据验证"><a href="/2018/09/18/cnPython/#数据验证" class="headerlink" title="数据验证"></a>数据验证</h3><p>数据验证库。多用于表单验证。</p><ul><li><p>Cerberus：一个映射验证器（mappings-validator）。支持多种规则，提供归一化功能，可以方便地定制为 Python 风格的 schema 定义。<a href="http://docs.python-cerberus.org/en/stable/" target="_blank" rel="noopener">官网</a></p></li><li><p>colander：一个用于对从 XML, JSON，HTML 表单获取的数据或其他同样简单的序列化数据进行验证和反序列化的系统。<a href="http://docs.pylonsproject.org/projects/colander/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>kmatch：一种用于匹配/验证/筛选 Python 字典的语言。<a href="https://github.com/ambitioninc/kmatch" target="_blank" rel="noopener">官网</a></p></li><li><p>schema：一个用于对 Python 数据结构进行验证的库。<a href="https://github.com/keleshev/schema" target="_blank" rel="noopener">官网</a></p></li><li><p>Schematics：数据结构验证。<a href="https://github.com/schematics/schematics" target="_blank" rel="noopener">官网</a></p></li><li><p>valideer：轻量级可扩展的数据验证和适配库。<a href="https://github.com/podio/valideer" target="_blank" rel="noopener">官网</a></p></li><li><p>voluptuous：一个 Python 数据验证库。主要是为了验证传入 Python 的 JSON，YAML 等数据。<a href="https://github.com/alecthomas/voluptuous" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="反垃圾技术"><a href="/2018/09/18/cnPython/#反垃圾技术" class="headerlink" title="反垃圾技术"></a>反垃圾技术</h3><p>帮助你和电子垃圾进行战斗的库。</p><ul><li><p>django-simple-captcha：一个简单、高度可定制的 Django 应用，可以为任何 Django 表单添加验证码。<a href="https://github.com/mbi/django-simple-captcha" target="_blank" rel="noopener">官网</a></p></li><li><p>django-simple-spam-blocker：一个用于 Django 的简单的电子垃圾屏蔽工具。<a href="https://github.com/moqada/django-simple-spam-blocker" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="标记"><a href="/2018/09/18/cnPython/#标记" class="headerlink" title="标记"></a>标记</h3><p>用来进行标记的库。</p><ul><li>django-taggit：简单的 Django 标记工具。<a href="https://github.com/alex/django-taggit" target="_blank" rel="noopener">官网</a></li></ul><h3 id="管理面板"><a href="/2018/09/18/cnPython/#管理面板" class="headerlink" title="管理面板"></a>管理面板</h3><p>管理界面库。</p><ul><li><p>Ajenti：一个你的服务器值得拥有的管理面板。<a href="https://github.com/Eugeny/ajenti" target="_blank" rel="noopener">官网</a></p></li><li><p>django-suit：Django 管理界面的一个替代品 (仅对于非商业用途是免费的)。<a href="http://djangosuit.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-xadmin：Django admin 的一个替代品，具有很多不错的功能。<a href="https://github.com/sshwsfc/django-xadmin" target="_blank" rel="noopener">官网</a></p></li><li><p>flask-admin：一个用于 Flask 的简单可扩展的管理界面框架。<a href="https://github.com/flask-admin/flask-admin" target="_blank" rel="noopener">官网</a></p></li><li><p>flower：一个对 Celery 集群进行实时监控和提供 web 管理界面的工具。<a href="https://github.com/mher/flower" target="_blank" rel="noopener">官网</a></p></li><li><p>Grappelli：Django 管理界面的一个漂亮的皮肤。<a href="http://grappelliproject.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>Wooey：一个 Django 应用，可以为 Python 脚本创建 web 用户界面。<a href="https://github.com/wooey/wooey" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="静态站点生成器"><a href="/2018/09/18/cnPython/#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h3><p>静态站点生成器是一个软件，它把文本和模板作为输入，然后输出 HTML 文件。</p><ul><li><p>Pelican：使用 Markdown 或 ReST 来处理内容， Jinja 2 来制作主题。支持 DVCS, Disqus.。AGPL 许可。<a href="http://blog.getpelican.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>Cactus：为设计师设计的静态站点生成器。<a href="https://github.com/koenbok/Cactus/" target="_blank" rel="noopener">官网</a></p></li><li><p>Hyde：基于 Jinja2 的静态站点生成器。<a href="http://hyde.github.io/" target="_blank" rel="noopener">官网</a></p></li><li><p>Nikola：一个静态网站和博客生成器。<a href="https://www.getnikola.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>Tinkerer：Tinkerer 是一个博客引擎/静态站点生成器，由 Sphinx 驱动。<a href="http://tinkerer.me/" target="_blank" rel="noopener">官网</a></p></li><li><p>Lektor：一个简单易用的静态 CMS 和博客引擎。<a href="https://www.getlektor.com/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="进程"><a href="/2018/09/18/cnPython/#进程" class="headerlink" title="进程"></a>进程</h3><p>操作系统进程启动及通信库。</p><ul><li><p>envoy：比 Python <a href="https://docs.python.org/2/library/subprocess.html" target="_blank" rel="noopener">subprocess</a> 模块更人性化。<a href="https://github.com/kennethreitz/envoy" target="_blank" rel="noopener">官网</a></p></li><li><p>sarge：另一 种 subprocess 模块的封装。<a href="http://sarge.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>sh：一个完备的 subprocess 替代库。<a href="https://github.com/amoffat/sh" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="并发和并行"><a href="/2018/09/18/cnPython/#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>用以进行并发和并行操作的库。</p><ul><li><p>multiprocessing：(Python 标准库) 基于进程的“线程”接口。<a href="https://docs.python.org/2/library/multiprocessing.html" target="_blank" rel="noopener">官网</a></p></li><li><p>threading：(Python 标准库)更高层的线程接口。<a href="https://docs.python.org/2/library/threading.html" target="_blank" rel="noopener">官网</a></p></li><li><p>eventlet：支持 WSGI 的异步框架。<a href="http://eventlet.net/" target="_blank" rel="noopener">官网</a></p></li><li><p>gevent：一个基于协程的 Python 网络库，使用 <a href="https://github.com/python-greenlet/greenlet" target="_blank" rel="noopener">greenlet</a>。<a href="http://www.gevent.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Tomorrow：用于产生异步代码的神奇的装饰器语法实现。<a href="https://github.com/madisonmay/Tomorrow" target="_blank" rel="noopener">官网</a></p></li><li><p>uvloop：在 libuv 之上超快速实现 asyncio 事件循环。<a href="https://github.com/MagicStack/uvloop" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="网络"><a href="/2018/09/18/cnPython/#网络" class="headerlink" title="网络"></a>网络</h3><p>用于网络编程的库。</p><ul><li><p>asyncio：(Python 标准库) 异步 I/O, 事件循环, 协程以及任务。<a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/twisted/" target="_blank" rel="noopener">Twisted</a>：一个事件驱动的网络引擎。<a href="https://twistedmatrix.com/trac/" target="_blank" rel="noopener">官网</a></p></li><li><p>pulsar：事件驱动的并发框架。<a href="https://github.com/quantmind/pulsar" target="_blank" rel="noopener">官网</a></p></li><li><p>diesel：基于 Greenlet 的事件 I/O 框架。<a href="https://github.com/dieseldev/diesel" target="_blank" rel="noopener">官网</a></p></li><li><p>pyzmq：一个 ZeroMQ 消息库的 Python 封装。<a href="http://zeromq.github.io/pyzmq/" target="_blank" rel="noopener">官网</a></p></li><li><p>Toapi：一个轻巧，简单，快速的 Flask 库，致力于为所有网站提供 API 服务。<a href="https://github.com/gaojiuli/toapi" target="_blank" rel="noopener">官网</a></p></li><li><p>txZMQ：基于 Twisted 的 ZeroMQ 消息库的 Python 封装。<a href="https://github.com/smira/txZMQ" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="WebSocket"><a href="/2018/09/18/cnPython/#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>帮助使用 WebSocket 的库。</p><ul><li><p>AutobahnPython：给 Python 、使用的 WebSocket &amp; WAMP 基于 Twisted 和 <a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="noopener">asyncio</a>。<a href="https://github.com/crossbario/autobahn-python" target="_blank" rel="noopener">官网</a></p></li><li><p>Crossbar：开源统一应用路由(Websocket &amp; WAMP for Python on Autobahn)。<a href="https://github.com/crossbario/crossbar/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-socketio：给 Django 用的 WebSockets。<a href="https://github.com/stephenmcd/django-socketio" target="_blank" rel="noopener">官网</a></p></li><li><p>WebSocket-for-Python：为 Python2/3 以及 PyPy 编写的 WebSocket 客户端和服务器库。<a href="https://github.com/Lawouach/WebSocket-for-Python" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="WSGI-服务器"><a href="/2018/09/18/cnPython/#WSGI-服务器" class="headerlink" title="WSGI 服务器"></a>WSGI 服务器</h3><p>兼容 WSGI 的 web 服务器</p><ul><li><p>gunicorn：Pre-forked, 部分是由 C 语言编写的。<a href="https://pypi.python.org/pypi/gunicorn" target="_blank" rel="noopener">官网</a></p></li><li><p>uwsgi：uwsgi 项目的目的是开发一组全栈工具，用来建立托管服务， 由 C 语言编写。<a href="https://uwsgi-docs.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/bjoern/" target="_blank" rel="noopener">bjoern</a>：异步，非常快速，由 C 语言编写。<a href="https://pypi.python.org/pypi/bjoern" target="_blank" rel="noopener">官网</a></p></li><li><p>fapws3：异步 (仅对于网络端)，由 C 语言编写。<a href="http://www.fapws.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>meinheld：异步，部分是由 C 语言编写的。<a href="https://pypi.python.org/pypi/meinheld" target="_blank" rel="noopener">官网</a></p></li><li><p>netius：异步，非常快速。<a href="https://github.com/hivesolutions/netius" target="_blank" rel="noopener">官网</a></p></li><li><p>paste：多线程，稳定，久经考验。<a href="http://pythonpaste.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>rocket：多线程。<a href="https://pypi.python.org/pypi/rocket" target="_blank" rel="noopener">官网</a></p></li><li><p>waitress：多线程, 是它驱动着 Pyramid 框架。<a href="https://waitress.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>Werkzeug：一个 WSGI 工具库，驱动着 Flask ，而且可以很方便大嵌入到你的项目中去。<a href="http://werkzeug.pocoo.org/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="RPC-服务器"><a href="/2018/09/18/cnPython/#RPC-服务器" class="headerlink" title="RPC 服务器"></a>RPC 服务器</h3><p>兼容 RPC 的服务器。</p><ul><li><p>SimpleJSONRPCServer：这个库是 JSON-RPC 规范的一个实现。<a href="https://github.com/joshmarshall/jsonrpclib/" target="_blank" rel="noopener">官网</a></p></li><li><p>SimpleXMLRPCServer：(Python 标准库) 简单的 XML-RPC 服务器实现，单线程。<a href="https://docs.python.org/2/library/simplexmlrpcserver.html" target="_blank" rel="noopener">官网</a></p></li><li><p>zeroRPC：zerorpc 是一个灵活的 RPC 实现，基于 ZeroMQ 和 MessagePack。<a href="https://github.com/0rpc/zerorpc-python" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="密码学"><a href="/2018/09/18/cnPython/#密码学" class="headerlink" title="密码学"></a>密码学</h3><ul><li><p>cryptography：这个软件包意在提供密码学基本内容和方法提供给 Python 开发者。<a href="https://cryptography.io/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>hashids：在 Python 中实现 <a href="http://hashids.org/" target="_blank" rel="noopener">hashids</a> 。<a href="https://github.com/davidaurelio/hashids-python" target="_blank" rel="noopener">官网</a></p></li><li><p>Paramiko：SSHv2 协议的 Python (2.6+, 3.3+) ，提供客户端和服务端的功能。<a href="http://www.paramiko.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Passlib：安全密码存储／哈希库，<a href="https://pythonhosted.org/passlib/" target="_blank" rel="noopener">官网</a></p></li><li><p>PyCrypto：Python 密码学工具箱。<a href="https://www.dlitz.net/software/pycrypto/" target="_blank" rel="noopener">官网</a></p></li><li><p>PyNacl：网络和密码学(NaCl) 库的 Python 绑定。<a href="https://github.com/pyca/pynacl" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="图形用户界面"><a href="/2018/09/18/cnPython/#图形用户界面" class="headerlink" title="图形用户界面"></a>图形用户界面</h3><p>用来创建图形用户界面程序的库。</p><ul><li><p>curses：内建的 <a href="http://www.gnu.org/software/ncurses/" target="_blank" rel="noopener">ncurses</a> 封装，用来创建终端图形用户界面。<a href="https://docs.python.org/2/library/curses.html#module-curses" target="_blank" rel="noopener">官网</a></p></li><li><p>enaml：使用类似 QML 的 Declaratic 语法来创建美观的用户界面。<a href="https://github.com/nucleic/enaml" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/kivy/" target="_blank" rel="noopener">kivy</a>：一个用来创建自然用户交互（NUI）应用程序的库，可以运行在 Windows, Linux, Mac OS X, Android 以及 iOS 平台上。<a href="https://kivy.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>pyglet：一个 Python 的跨平台窗口及多媒体库。<a href="https://bitbucket.org/pyglet/pyglet/wiki/Home" target="_blank" rel="noopener">官网</a></p></li><li><p>PyQt：跨平台用户界面框架 <a href="http://www.qt.io/" target="_blank" rel="noopener">Qt</a> 的 Python 绑定 ，支持 Qt v4 和 Qt v5。<a href="https://riverbankcomputing.com/software/pyqt/intro" target="_blank" rel="noopener">官网</a></p></li><li><p>PySide：跨平台用户界面框架 <a href="http://www.qt.io/" target="_blank" rel="noopener">Qt</a> 的 Python 绑定 ，支持 Qt v4。<a href="https://wiki.qt.io/PySide" target="_blank" rel="noopener">官网</a></p></li><li><p>Tkinter：Tkinter 是 Python GUI 的一个事实标准库。<a href="https://wiki.python.org/moin/TkInter" target="_blank" rel="noopener">官网</a></p></li><li><p>Toga：一个 Python 原生的, 操作系统原生的 GUI 工具包。<a href="https://github.com/pybee/toga" target="_blank" rel="noopener">官网</a></p></li><li><p>urwid：一个用来创建终端 GUI 应用的库，支持组件，事件和丰富的色彩等。<a href="http://urwid.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>wxPython：wxPython 是 wxWidgets C++ 类库和 Python 语言混合的产物。<a href="http://wxpython.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>PyGObject：GLib/GObject/GIO/GTK+ (GTK+3) 的 Python 绑定。<a href="https://wiki.gnome.org/Projects/PyGObject" target="_blank" rel="noopener">官网</a></p></li><li><p>Flexx：Flexx 是一个纯 Python 语言编写的用来创建 GUI 程序的工具集，它使用 web 技术进行界面的展示。<a href="https://github.com/zoofIO/flexx" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="游戏开发"><a href="/2018/09/18/cnPython/#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h3><p>超赞的游戏开发库。</p><ul><li><p>Cocos2d：cocos2d 是一个用来开发 2D 游戏， 示例和其他图形/交互应用的框架。基于 pyglet。<a href="http://cocos2d.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Panda3D：由迪士尼开发的 3D 游戏引擎，并由卡内基梅陇娱乐技术中心负责维护。使用 C++ 编写, 针对 Python 进行了完全的封装。<a href="https://www.panda3d.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Pygame：Pygame 是一组 Python 模块，用来编写游戏。<a href="http://www.pygame.org/news.html" target="_blank" rel="noopener">官网</a></p></li><li><p>PyOgre：Ogre 3D 渲染引擎的 Python 绑定，可以用来开发游戏和仿真程序等任何 3D 应用。<a href="http://www.ogre3d.org/tikiwiki/PyOgre" target="_blank" rel="noopener">官网</a></p></li><li><p>PyOpenGL：OpenGL 的 Python 绑定及其相关 APIs。<a href="http://pyopengl.sourceforge.net/" target="_blank" rel="noopener">官网</a></p></li><li><p>PySDL2：SDL2 库的封装，基于 ctypes。<a href="http://pysdl2.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>RenPy：一个视觉小说（visual novel）引擎。<a href="https://www.renpy.org/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="日志"><a href="/2018/09/18/cnPython/#日志" class="headerlink" title="日志"></a>日志</h3><p>用来生成和操作日志的库。</p><ul><li><p>logging：(Python 标准库) 为 Python 提供日志功能。<a href="https://docs.python.org/2/library/logging.html" target="_blank" rel="noopener">官网</a></p></li><li><p>logbook：Logging 库的替代品。<a href="http://pythonhosted.org/Logbook/" target="_blank" rel="noopener">官网</a></p></li><li><p>Eliot：为复杂的和分布式系统创建日志。<a href="https://eliot.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>Raven：Sentry 的 Python 客户端。<a href="http://raven.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>Sentry：实时记录和收集日志的服务器。<a href="https://pypi.python.org/pypi/sentry" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="测试"><a href="/2018/09/18/cnPython/#测试" class="headerlink" title="测试"></a>测试</h3><p>进行代码库测试和生成测试数据的库。</p><ul><li>测试框架</li></ul><ul><li><p>unittest：(Python 标准库) 单元测试框架。<a href="https://docs.python.org/2/library/unittest.html" target="_blank" rel="noopener">官网</a></p></li><li><p>nose：nose 扩展了 unittest 的功能。<a href="https://nose.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>contexts：一个 Python 3.3+ 的 BDD 框架。受到 C# – Machine.Specifications 的启发。<a href="https://github.com/benjamin-hodgson/Contexts" target="_blank" rel="noopener">官网</a></p></li><li><p>hypothesis：Hypothesis 是一个基于先进的 Quickcheck 风格特性的测试库。<a href="https://github.com/DRMacIver/hypothesis" target="_blank" rel="noopener">官网</a></p></li><li><p>mamba：Python 的终极测试工具， 拥护 BDD。<a href="http://nestorsalceda.github.io/mamba/" target="_blank" rel="noopener">官网</a></p></li><li><p>PyAutoGUI：PyAutoGUI 是一个人性化的跨平台 GUI 自动测试模块。<a href="https://github.com/asweigart/pyautogui" target="_blank" rel="noopener">官网</a></p></li><li><p>pyshould：Should 风格的断言，基于 <a href="https://github.com/hamcrest/PyHamcrest" target="_blank" rel="noopener">PyHamcrest</a>。<a href="https://github.com/drslump/pyshould" target="_blank" rel="noopener">官网</a></p></li><li><p>pytest：一个成熟的全功能 Python 测试工具。<a href="http://pytest.org/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>green：干净，多彩的测试工具。<a href="https://github.com/CleanCut/green" target="_blank" rel="noopener">官网</a></p></li><li><p>pyvows：BDD 风格的测试工具，受 Vows.js 的启发。<a href="http://heynemann.github.io/pyvows/" target="_blank" rel="noopener">官网</a></p></li><li><p>Robot Framework：一个通用的自动化测试框架。<a href="https://github.com/robotframework/robotframework" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>Web 测试</li></ul><ul><li><p>Selenium：<a href="http://www.seleniumhq.org/" target="_blank" rel="noopener">Selenium</a> WebDriver 的 Python 绑定。<a href="https://pypi.python.org/pypi/selenium" target="_blank" rel="noopener">官网</a></p></li><li><p>locust：使用 Python 编写的，可扩展的用户加载测试工具。<a href="https://github.com/locustio/locust" target="_blank" rel="noopener">官网</a></p></li><li><p>sixpack：一个和语言无关的 A/B 测试框架。<a href="https://github.com/seatgeek/sixpack" target="_blank" rel="noopener">官网</a></p></li><li><p>splinter：开源的 web 应用测试工具。<a href="https://splinter.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>Mock 测试</li></ul><ul><li><p>mock：(Python 标准库) 一个用于伪造测试的库。<a href="https://docs.python.org/3/library/unittest.mock.html" target="_blank" rel="noopener">官网</a></p></li><li><p>doublex：Python 的一个功能强大的 doubles  测试框架。<a href="https://pypi.python.org/pypi/doublex" target="_blank" rel="noopener">官网</a></p></li><li><p>freezegun：通过伪造日期模块来生成不同的时间。<a href="https://github.com/spulec/freezegun" target="_blank" rel="noopener">官网</a></p></li><li><p>httmock：针对 Python 2.6+ 和 3.2+ 生成 伪造请求的库。<a href="https://github.com/patrys/httmock" target="_blank" rel="noopener">官网</a></p></li><li><p>httpretty：Python 的 HTTP 请求 mock 工具。<a href="http://falcao.it/HTTPretty/" target="_blank" rel="noopener">官网</a></p></li><li><p>responses：伪造 Python 中的 requests 库的一个通用库。<a href="https://github.com/getsentry/responses" target="_blank" rel="noopener">官网</a></p></li><li><p>VCR.py：在你的测试中记录和重放 HTTP 交互。<a href="https://github.com/kevin1024/vcrpy" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>对象工厂</li></ul><ul><li><p>factoryboy：一个 Python 用的测试固件 (test fixtures) 替代库。<a href="https://github.com/rbarrois/factoryboy" target="_blank" rel="noopener">官网</a></p></li><li><p>mixer：另外一个测试固件 (test fixtures) 替代库，支持 Django, Flask, SQLAlchemy, Peewee 等。<a href="https://github.com/klen/mixer" target="_blank" rel="noopener">官网</a></p></li><li><p>modelmommy：为 Django 测试创建随机固件。<a href="https://github.com/vandersonmota/modelmommy" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>代码覆盖率</li></ul><ul><li><p>coverage：代码覆盖率测量。<a href="https://pypi.python.org/pypi/coverage" target="_blank" rel="noopener">官网</a></p></li><li><p>Codecov：一个代码覆盖率测试工具，为开源项目提供免费代码覆盖率测试服务。<a href="https://codecov.io/" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>伪数据</li></ul><ul><li><p>faker：一个 Python 库，用来生成伪数据。<a href="http://www.joke2k.net/faker/" target="_blank" rel="noopener">官网</a></p></li><li><p>fake2db：伪数据库生成器。<a href="https://github.com/emirozer/fake2db" target="_blank" rel="noopener">官网</a></p></li><li><p>radar：生成随机的日期/时间。<a href="https://pypi.python.org/pypi/radar" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>错误处理</li></ul><ul><li>FuckIt.py：FuckIt.py 使用最先进的技术来保证你的 Python 代码无论对错都能继续运行。<a href="https://github.com/ajalt/fuckitpy" target="_blank" rel="noopener">官网</a></li></ul><h3 id="代码分析和-Lint-工具"><a href="/2018/09/18/cnPython/#代码分析和-Lint-工具" class="headerlink" title="代码分析和 Lint 工具"></a>代码分析和 Lint 工具</h3><p>进行代码分析，解析和操作代码库的库和工具。</p><ul><li>代码分析</li></ul><ul><li><p>coala：语言独立和易于扩展的代码分析应用程序。<a href="http://coala-analyzer.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>code2flow：把你的 Python 和 JavaScript 代码转换为流程图。<a href="https://github.com/scottrogowski/code2flow" target="_blank" rel="noopener">官网</a></p></li><li><p>pycallgraph：这个库可以把你的 Python 应用的流程(调用图)进行可视化。<a href="https://github.com/gak/pycallgraph" target="_blank" rel="noopener">官网</a></p></li><li><p>pysonar2：Python 类型推断和检索工具。<a href="https://github.com/yinwang0/pysonar2" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>Lint 工具</li></ul><ul><li><p>Flake8：模块化源码检查工具: pep8, pyflakes 以及 co。<a href="https://pypi.python.org/pypi/flake8" target="_blank" rel="noopener">官网</a></p></li><li><p>Pylint：一个完全可定制的源码分析器。<a href="https://www.pylint.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>YAPF: Google 的 Python 代码格式化工具。<a href="https://github.com/google/yapf" target="_blank" rel="noopener">官网</a></p></li><li><p>pylama：Python 和 JavaScript 的代码审查工具。<a href="https://pylama.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>代码格式化</li></ul><ul><li><p>autopep8：自动格式化 Python 代码，以使其符合 PEP8 规范。<a href="https://github.com/hhatto/autopep8" target="_blank" rel="noopener">官网</a></p></li><li><p>black：一个坚定的 Python 代码格式化工具。<a href="https://github.com/ambv/black" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="调试工具"><a href="/2018/09/18/cnPython/#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><p>用来进行代码调试的库。</p><ul><li>调试器</li></ul><ul><li><p>ipdb：IPython 启用的 <a href="https://docs.python.org/2/library/pdb.html" target="_blank" rel="noopener">pdb</a>。<a href="https://pypi.python.org/pypi/ipdb" target="_blank" rel="noopener">官网</a></p></li><li><p>pudb：全屏，基于控制台的 Python 调试器。<a href="https://pypi.python.org/pypi/pudb" target="_blank" rel="noopener">官网</a></p></li><li><p>pyringe：可以在 Python 进程中附加和注入代码的调试器。<a href="https://github.com/google/pyringe" target="_blank" rel="noopener">官网</a></p></li><li><p>wdb：一个奇异的 web 调试器，通过 WebSockets 工作。<a href="https://github.com/Kozea/wdb" target="_blank" rel="noopener">官网</a></p></li><li><p>winpdb：一个具有图形用户界面的 Python 调试器，可以进行远程调试，基于 rpdb2。<a href="http://winpdb.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-debug-toolbar：为 Django 显示各种调试信息。<a href="https://github.com/django-debug-toolbar/django-debug-toolbar" target="_blank" rel="noopener">官网</a></p></li><li><p>django-devserver：一个 Django 运行服务器的替代品。<a href="https://github.com/dcramer/django-devserver" target="_blank" rel="noopener">官网</a></p></li><li><p>flask-debugtoolbar：django-debug-toolbar 的 flask 版。<a href="https://github.com/mgood/flask-debugtoolbar" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>性能分析器</li></ul><ul><li><p>lineprofiler：逐行性能分析。<a href="https://github.com/rkern/lineprofiler" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/memory_profiler/" target="_blank" rel="noopener">Memory Profiler</a>：监控 Python 代码的内存使用。<a href="http://pypi.python.org/pypi/memory_profiler" target="_blank" rel="noopener">官网</a>、<a href="https://github.com/fabianp/memoryprofiler" target="_blank" rel="noopener">内存</a></p></li><li><p>profiling：一个交互式 Python 性能分析工具。<a href="https://github.com/what-studio/profiling" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>其他</li></ul><ul><li><p>pyelftools：解析和分析 ELF 文件以及 DWARF 调试信息。<a href="https://github.com/eliben/pyelftools" target="_blank" rel="noopener">官网</a></p></li><li><p>python-statsd：<a href="https://github.com/etsy/statsd/" target="_blank" rel="noopener">statsd</a> 服务器的 Python 客户端。<a href="https://github.com/WoLpH/python-statsd" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="科学计算和数据分析"><a href="/2018/09/18/cnPython/#科学计算和数据分析" class="headerlink" title="科学计算和数据分析"></a>科学计算和数据分析</h3><p>用来进行科学计算和数据分析的库。</p><ul><li><p>astropy：一个天文学 Python 库。<a href="http://www.astropy.org/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/bcbio-nextgen/" target="_blank" rel="noopener">bcbio-nextgen</a>：这个工具箱为全自动高通量测序分析提供符合最佳实践的处理流程。<a href="https://github.com/chapmanb/bcbio-nextgen" target="_blank" rel="noopener">官网</a></p></li><li><p>bccb：生物分析相关代码集合。<a href="https://github.com/chapmanb/bcbb" target="_blank" rel="noopener">官网</a></p></li><li><p>Biopython：Biopython 是一组可以免费使用的用来进行生物计算的工具。<a href="http://biopython.org/wiki/MainPage" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/blaze/" target="_blank" rel="noopener">blaze</a>：NumPy 和 Pandas 的大数据接口。<a href="http://blaze.readthedocs.org/en/latest/index.html" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/cclib/" target="_blank" rel="noopener">cclib</a>：一个用来解析和解释计算化学软件包输出结果的库。<a href="http://cclib.github.io/" target="_blank" rel="noopener">官网</a></p></li><li><p>NetworkX：一个为复杂网络设计的高性能软件。<a href="https://networkx.github.io/" target="_blank" rel="noopener">官网</a></p></li><li><p>Neupy：执行和测试各种不同的人工神经网络算法。<a href="http://neupy.com/pages/home.html" target="_blank" rel="noopener">官网</a></p></li><li><p>Numba：Python JIT (just in time) 编译器，针对科学用的 Python ，由 Cython 和 NumPy 的开发者开发。<a href="http://numba.pydata.org/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/numpy/" target="_blank" rel="noopener">NumPy</a>：使用 Python 进行科学计算的基础包。<a href="http://www.numpy.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Open Babel：一个化学工具箱，用来描述多种化学数据。<a href="http://openbabel.org/wiki/MainPage" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/open-mining/" target="_blank" rel="noopener">Open Mining</a>：使用 Python 挖掘商业情报 (BI) (Pandas web 接口)。<a href="https://github.com/mining/mining" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/orange/" target="_blank" rel="noopener">orange</a>：通过可视化编程或 Python 脚本进行数据挖掘，数据可视化，分析和机器学习。<a href="http://orange.biolab.si/" target="_blank" rel="noopener">官网</a></p></li><li><p>Pandas：提供高性能，易用的数据结构和数据分析工具。<a href="http://pandas.pydata.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>PyDy：PyDy 是 Python Dynamics 的缩写，用来为动力学运动建模工作流程提供帮助， 基于 NumPy, SciPy, IPython 和 matplotlib。<a href="http://www.pydy.org/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/pymc/" target="_blank" rel="noopener">PyMC</a>：马尔科夫链蒙特卡洛采样工具。<a href="https://github.com/pymc-devs/pymc3" target="_blank" rel="noopener">官网</a></p></li><li><p>RDKit：化学信息学和机器学习软件。<a href="http://www.rdkit.org/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/scipy/" target="_blank" rel="noopener">SciPy</a>：由一些基于 Python ，用于数学，科学和工程的开源软件构成的生态系统。<a href="http://www.scipy.org/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/statsmodels/" target="_blank" rel="noopener">statsmodels</a>：统计建模和计量经济学。<a href="https://github.com/statsmodels/statsmodels" target="_blank" rel="noopener">官网</a></p></li><li><p>SymPy：一个用于符号数学的 Python 库。<a href="https://github.com/sympy/sympy" target="_blank" rel="noopener">官网</a></p></li><li><p>zipline：一个 Python 算法交易库。<a href="https://github.com/quantopian/zipline" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/bayesian-belief-networks/" target="_blank" rel="noopener">Bayesian-belief-networks</a>：优雅的贝叶斯信念网络框架。<a href="https://github.com/eBay/bayesian-belief-networks" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="数据可视化"><a href="/2018/09/18/cnPython/#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><p>进行数据可视化的库。 参见: <a href="https://github.com/sorrycc/awesome-javascript#data-visualization" target="_blank" rel="noopener">awesome-javascript</a>。</p><ul><li><p>matplotlib：一个 Python 2D 绘图库。<a href="http://matplotlib.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>bokeh：用 Python 进行交互式 web 绘图。<a href="https://github.com/bokeh/bokeh" target="_blank" rel="noopener">官网</a></p></li><li><p>ggplot：ggplot2 给 R 提供的 API 的 Python 版本。<a href="https://github.com/yhat/ggplot" target="_blank" rel="noopener">官网</a></p></li><li><p>plotly：协同 Python 和 matplotlib 工作的 web 绘图库。<a href="https://plot.ly/python/" target="_blank" rel="noopener">官网</a></p></li><li><p>pyecharts：基于百度 Echarts 的数据可视化库。<a href="https://github.com/chenjiandongx/pyecharts" target="_blank" rel="noopener">官网</a></p></li><li><p>pygal：一个 Python SVG 图表创建工具。<a href="http://www.pygal.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>pygraphviz：Graphviz 的 Python 接口。<a href="https://pypi.python.org/pypi/pygraphviz" target="_blank" rel="noopener">官网</a></p></li><li><p>PyQtGraph：交互式实时 2D/3D/ 图像绘制及科学/工程学组件。<a href="http://www.pyqtgraph.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>SnakeViz：一个基于浏览器的 Python’s cProfile 模块输出结果查看工具。<a href="http://jiffyclub.github.io/snakeviz/" target="_blank" rel="noopener">官网</a></p></li><li><p>vincent：把 Python 转换为 Vega 语法的转换工具。<a href="https://github.com/wrobstory/vincent" target="_blank" rel="noopener">官网</a></p></li><li><p>VisPy：基于 OpenGL 的高性能科学可视化工具。<a href="http://vispy.org/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="计算机视觉"><a href="/2018/09/18/cnPython/#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h3><p>计算机视觉库。</p><ul><li><p>OpenCV：开源计算机视觉库。<a href="http://opencv.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>pyocr：Tesseract 和 Cuneiform 的包装库。<a href="https://github.com/jflesch/pyocr" target="_blank" rel="noopener">官网</a></p></li><li><p>pytesseract：<a href="https://github.com/tesseract-ocr" target="_blank" rel="noopener">Google Tesseract OCR</a> 的另一包装库。<a href="https://github.com/madmaze/pytesseract" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/simplecv/" target="_blank" rel="noopener">SimpleCV</a>：一个用来创建计算机视觉应用的开源框架。<a href="http://simplecv.org/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="机器学习"><a href="/2018/09/18/cnPython/#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>机器学习库。 参见: <a href="https://github.com/josephmisiti/awesome-machine-learning#python" target="_blank" rel="noopener">awesome-machine-learning</a>.</p><ul><li><p>Caffe: 一个 <a href="https://github.com/BVLC/caffe" target="_blank" rel="noopener">Caffe</a> 的 python 接口。<a href="http://caffe.berkeleyvision.org/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="https://github.com/caffe2/caffe2/" target="_blank" rel="noopener">Caffe2</a>：一个轻量级的，模块化的，可扩展的深度学习框架。<a href="https://caffe2.ai/" target="_blank" rel="noopener">官网</a></p></li><li><p>Crab：灵活、快速的推荐引擎。<a href="https://github.com/muricoca/crab" target="_blank" rel="noopener">官网</a></p></li><li><p>gensim：人性化的话题建模库。<a href="https://github.com/piskvorky/gensim" target="_blank" rel="noopener">官网</a></p></li><li><p>hebel：GPU 加速的深度学习库。<a href="https://github.com/hannes-brt/hebel" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="https://github.com/keras-team/keras" target="_blank" rel="noopener">keras</a>: 以 tensorflow/theano/CNTK 为后端的深度学习封装库，快速上手神经网络。<a href="https://keras.io/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="https://github.com/apache/incubator-mxnet" target="_blank" rel="noopener">MXNet</a>：一个高效和灵活的深度学习框架。<a href="http://mxnet.incubator.apache.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>NuPIC：智能计算 Numenta 平台。<a href="https://github.com/numenta/nupic" target="_blank" rel="noopener">官网</a></p></li><li><p>pattern：Python 网络挖掘模块。<a href="https://github.com/clips/pattern" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/pybrain/" target="_blank" rel="noopener">PyBrain</a>：另一个 Python 机器学习库。<a href="https://github.com/pybrain/pybrain" target="_blank" rel="noopener">官网</a></p></li><li><p>pydeep：Python 深度学习库。<a href="https://github.com/andersbll/deeppy" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/pylearn2/" target="_blank" rel="noopener">Pylearn2</a>：一个基于 <a href="https://github.com/Theano/Theano" target="_blank" rel="noopener">Theano</a> 的机器学习库。<a href="https://github.com/lisa-lab/pylearn2" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/python-recsys/" target="_blank" rel="noopener">python-recsys</a>：一个用来实现推荐系统的 Python 库。<a href="https://github.com/ocelma/python-recsys" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="https://github.com/pytorch/pytorch" target="_blank" rel="noopener">Pytorch</a>：一个具有张量和动态神经网络，并有强大 GPU 加速能力的深度学习框架。<a href="http://pytorch.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>scikit-learn：基于 SciPy 构建的机器学习 Python 模块。<a href="http://scikit-learn.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>skflow：一个 <a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">TensorFlow</a> 的简化接口(模仿 scikit-learn)。<a href="https://github.com/tensorflow/skflow" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">TensorFlow</a>：谷歌开源的最受欢迎的深度学习框架。<a href="http://tensorflow.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Theano：一个快速数值计算库。<a href="https://github.com/Theano/Theano" target="_blank" rel="noopener">官网</a></p></li><li><p>vowpalporpoise：轻量级 <a href="https://github.com/JohnLangford/vowpalwabbit/" target="_blank" rel="noopener">Vowpal Wabbit</a> 的 Python 封装。<a href="https://github.com/josephreisinger/vowpalporpoise" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="MapReduce"><a href="/2018/09/18/cnPython/#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><p>MapReduce 框架和库。</p><ul><li><p><a href="http://hao.jobbole.com/dpark/" target="_blank" rel="noopener">dpark</a>：Spark 的 Python 克隆版，一个类似 MapReduce 的框架。<a href="https://github.com/douban/dpark" target="_blank" rel="noopener">官网</a></p></li><li><p>dumbo：这个 Python 模块可以让人轻松的编写和运行 Hadoop 程序。<a href="https://github.com/klbostee/dumbo" target="_blank" rel="noopener">官网</a></p></li><li><p>luigi：这个模块帮你构建批处理作业的复杂流水线。<a href="https://github.com/spotify/luigi" target="_blank" rel="noopener">官网</a></p></li><li><p>mrjob：在 Hadoop 或 Amazon Web Services 上运行 MapReduce 任务。<a href="https://github.com/Yelp/mrjob" target="_blank" rel="noopener">官网</a></p></li><li><p>PySpark：Spark 的 Python API 。<a href="http://spark.apache.org/docs/latest/programming-guide.html" target="_blank" rel="noopener">官网</a></p></li><li><p>streamparse：运行针对事实数据流的 Python 代码。集成了 <a href="http://storm.apache.org/" target="_blank" rel="noopener">Apache Storm</a>。<a href="https://github.com/Parsely/streamparse" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="函数式编程"><a href="/2018/09/18/cnPython/#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>使用 Python 进行函数式编程。</p><ul><li><p>CyToolz：Toolz 的 Cython 实现 : 高性能函数式工具。<a href="https://github.com/pytoolz/cytoolz/" target="_blank" rel="noopener">官网</a></p></li><li><p>fn.py：在 Python 中进行函数式编程 : 实现了一些享受函数式编程缺失的功能。<a href="https://github.com/kachayev/fn.py" target="_blank" rel="noopener">官网</a></p></li><li><p>funcy：炫酷又实用的函数式工具。<a href="https://github.com/Suor/funcy" target="_blank" rel="noopener">官网</a></p></li><li><p>Toolz：一组用于迭代器，函数和字典的函数式编程工具。<a href="https://github.com/pytoolz/toolz" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="第三方-API"><a href="/2018/09/18/cnPython/#第三方-API" class="headerlink" title="第三方 API"></a>第三方 API</h3><p>用来访问第三方 API 的库。 参见： <a href="https://github.com/realpython/list-of-python-api-wrappers" target="_blank" rel="noopener">List of Python API Wrappers and Libraries</a>。</p><ul><li><p>apache-libcloud：一个为各种云设计的 Python 库。<a href="https://libcloud.apache.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>boto：Amazon Web Services 的 Python 接口。<a href="https://github.com/boto/boto" target="_blank" rel="noopener">官网</a></p></li><li><p>django-wordpress：WordPress models and views for Django.<a href="https://github.com/sunlightlabs/django-wordpress/" target="_blank" rel="noopener">官网</a></p></li><li><p>facebook-sdk：Facebook 平台的 Python SDK.<a href="https://github.com/mobolic/facebook-sdk" target="_blank" rel="noopener">官网</a></p></li><li><p>facepy：Facepy 让和 Facebook’s Graph API 的交互变得更容易。<a href="https://github.com/jgorset/facepy" target="_blank" rel="noopener">官网</a></p></li><li><p>gmail：Gmail 的 Python 接口。<a href="https://github.com/charlierguo/gmail" target="_blank" rel="noopener">官网</a></p></li><li><p>google-api-python-client：Python 用的 Google APIs 客户端库。<a href="https://github.com/google/google-api-python-client" target="_blank" rel="noopener">官网</a></p></li><li><p>gspread：Google 电子表格的 Python API.<a href="https://github.com/burnash/gspread" target="_blank" rel="noopener">官网</a></p></li><li><p>twython：Twitter API 的封装。<a href="https://github.com/ryanmcgrath/twython" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="DevOps-工具"><a href="/2018/09/18/cnPython/#DevOps-工具" class="headerlink" title="DevOps 工具"></a>DevOps 工具</h3><p>用于 DevOps 的软件和库。</p><ul><li><p>Ansible：一个非常简单的 IT 自动化平台。<a href="https://github.com/ansible/ansible" target="_blank" rel="noopener">官网</a></p></li><li><p>SaltStack：基础设施自动化和管理系统。<a href="https://github.com/saltstack/salt" target="_blank" rel="noopener">官网</a></p></li><li><p>OpenStack：用于构建私有和公有云的开源软件。<a href="http://www.openstack.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Docker Compose：快速，分离的开发环境，使用 Docker。<a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">官网</a></p></li><li><p>Fabric：一个简单的，Python 风格的工具，用来进行远程执行和部署。<a href="http://www.fabfile.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>cuisine：为 Fabric 提供一系列高级函数。<a href="https://github.com/sebastien/cuisine" target="_blank" rel="noopener">官网</a></p></li><li><p>Fabtools：一个用来编写超赞的 Fabric 文件的工具。<a href="https://github.com/ronnix/fabtools" target="_blank" rel="noopener">官网</a></p></li><li><p>gitapi：Git 的纯 Python API。<a href="https://bitbucket.org/haard/gitapi" target="_blank" rel="noopener">官网</a></p></li><li><p>hgapi：Mercurial 的纯 Python API。<a href="https://bitbucket.org/haard/hgapi" target="_blank" rel="noopener">官网</a></p></li><li><p>honcho：<a href="https://github.com/ddollar/foreman" target="_blank" rel="noopener">Foreman</a> 的 Python 克隆版，用来管理基于 <a href="https://devcenter.heroku.com/articles/procfile" target="_blank" rel="noopener">Procfile</a> 的应用。<a href="https://github.com/nickstenning/honcho" target="_blank" rel="noopener">官网</a></p></li><li><p>pexpect：Controlling interactive programs in a pseudo-terminal like 在一个伪终端中控制交互程序，就像 GNU expect 一样。<a href="https://github.com/pexpect/pexpect" target="_blank" rel="noopener">官网</a></p></li><li><p>psutil：一个跨平台进程和系统工具模块。<a href="https://github.com/giampaolo/psutil" target="_blank" rel="noopener">官网</a></p></li><li><p>supervisor：UNIX 的进程控制系统。<a href="https://github.com/Supervisor/supervisor" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="任务调度"><a href="/2018/09/18/cnPython/#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><p>任务调度库。</p><ul><li><p>APScheduler：轻巧但强大的进程内任务调度，使你可以调度函数。<a href="http://apscheduler.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>django-schedule：一个 Django 排程应用。<a href="https://github.com/thauber/django-schedule" target="_blank" rel="noopener">官网</a></p></li><li><p>doit：一个任务执行和构建工具。<a href="http://pydoit.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>gunnery：分布式系统使用的多用途任务执行工具 ，具有 web 交互界面。<a href="https://github.com/gunnery/gunnery" target="_blank" rel="noopener">官网</a></p></li><li><p>Joblib：一组为 Python 提供轻量级作业流水线的工具。<a href="http://pythonhosted.org/joblib/index.html" target="_blank" rel="noopener">官网</a></p></li><li><p>Plan：如有神助地编写 crontab 文件。<a href="https://github.com/fengsp/plan" target="_blank" rel="noopener">官网</a></p></li><li><p>schedule：人性化的 Python 任务调度库。<a href="https://github.com/dbader/schedule" target="_blank" rel="noopener">官网</a></p></li><li><p>Spiff：使用纯 Python 实现的强大的工作流引擎。<a href="https://github.com/knipknap/SpiffWorkflow" target="_blank" rel="noopener">官网</a></p></li><li><p>TaskFlow：一个可以让你方便执行任务的 Python 库，一致并且可靠。<a href="http://docs.openstack.org/developer/taskflow/" target="_blank" rel="noopener">官网</a> *  AirFlow：Airflow 是Airbnb公司开源的，是一个工作流分配管理系统，通过有向非循环图的方式管理任务流程，设置任务依赖关系和时间调度。<a href="https://airflow.incubator.apache.org/" target="_blank" rel="noopener">官方</a>  </p></li></ul><h3 id="外来函数接口"><a href="/2018/09/18/cnPython/#外来函数接口" class="headerlink" title="外来函数接口"></a>外来函数接口</h3><p>使用外来函数接口的库。</p><ul><li><p>cffi：用来调用 C 代码的外来函数接口。<a href="https://pypi.python.org/pypi/cffi" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/ctypes/" target="_blank" rel="noopener">ctypes</a>：(Python 标准库) 用来调用 C 代码的外来函数接口。<a href="https://docs.python.org/2/library/ctypes.html" target="_blank" rel="noopener">官网</a></p></li><li><p>PyCUDA：Nvidia CUDA API 的封装。<a href="https://mathema.tician.de/software/pycuda/" target="_blank" rel="noopener">官网</a></p></li><li><p>SWIG：简化的封装和接口生成器。<a href="http://www.swig.org/Doc1.3/Python.html" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="高性能"><a href="/2018/09/18/cnPython/#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>让 Python 更快的库。</p><ul><li><p>Cython：优化的 Python 静态编译器。使用类型混合使 Python 编译成 C 或 C++ 模块来获得性能的极大提升。<a href="http://cython.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>PeachPy：嵌入 Python 的 x86-64 汇编器。可以被用作 Python 内联的汇编器或者是独立的汇编器，用于 Windows, Linux, OS X, Native Client 或者 Go 。<a href="https://github.com/Maratyszcza/PeachPy" target="_blank" rel="noopener">官网</a></p></li><li><p>PyPy：使用 Python 实现的 Python。解释器使用黑魔法加快 Python 运行速度且不需要加入额外的类型信息。<a href="http://pypy.org/" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/pyston-llvm-jit/" target="_blank" rel="noopener">Pyston</a>：使用 LLVM 和现代 JIT 技术构建的 Python 实现，目标是为了获得很好的性能。<a href="https://github.com/dropbox/pyston" target="_blank" rel="noopener">官网</a></p></li><li><p>Stackless Python：一个强化版的 Python。<a href="https://bitbucket.org/stackless-dev/stackless/overview" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="微软的-Windows-平台"><a href="/2018/09/18/cnPython/#微软的-Windows-平台" class="headerlink" title="微软的 Windows 平台"></a>微软的 Windows 平台</h3><p>在 Windows 平台上进行 Python 编程。</p><ul><li><p>Python(x,y)：面向科学应用的 Python 发行版，基于 Qt 和 Spyder。<a href="http://python-xy.github.io/" target="_blank" rel="noopener">官网</a></p></li><li><p>pythonlibs：非官方的 Windows 平台 Python 扩展二进制包。<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">官网</a></p></li><li><p>PythonNet：Python 与 .NET 公共语言运行库 (CLR)的集成。<a href="https://github.com/pythonnet/pythonnet" target="_blank" rel="noopener">官网</a></p></li><li><p>PyWin32：针对 Windows 的 Python 扩展。<a href="https://sourceforge.net/projects/pywin32/" target="_blank" rel="noopener">官网</a></p></li><li><p>WinPython：Windows 7/8 系统下便携式开发环境。<a href="https://winpython.github.io/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="网络可视化和-SDN"><a href="/2018/09/18/cnPython/#网络可视化和-SDN" class="headerlink" title="网络可视化和 SDN"></a>网络可视化和 SDN</h3><p>用来进行网络可视化和 SDN(软件定义网络)的工具和库。</p><ul><li><p>Mininet：一款流行的网络模拟器以及用 Python 编写的 API。<a href="http://mininet.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>POX：一个针对基于 Python 的软件定义网络应用（例如 OpenFlow SDN 控制器）的开源开发平台。<a href="https://github.com/noxrepo/pox" target="_blank" rel="noopener">官网</a></p></li><li><p>Pyretic：火热的 SDN 编程语言中的一员，为网络交换机和模拟器提供强大的抽象能力。<a href="http://frenetic-lang.org/pyretic/" target="_blank" rel="noopener">官网</a></p></li><li><p>SDX Platform：基于 SDN 的 IXP 实现，影响了 Mininet, POX 和 Pyretic。<a href="https://github.com/sdn-ixp/internet2award" target="_blank" rel="noopener">官网</a></p></li><li><p>NRU：一个基于组件的软件定义网络框架。<a href="http://ryu.readthedocs.io/en/latest/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="硬件"><a href="/2018/09/18/cnPython/#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>用来对硬件进行编程的库。</p><ul><li><p>ino：操作 <a href="https://www.arduino.cc/" target="_blank" rel="noopener">Arduino</a> 的命令行工具。<a href="http://inotool.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Pyro：Python 机器人编程库。<a href="http://pyrorobotics.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>PyUserInput：跨平台的，控制鼠标和键盘的模块。<a href="https://github.com/SavinaRoja/PyUserInput" target="_blank" rel="noopener">官网</a></p></li><li><p>scapy：一个非常棒的操作数据包的库。<a href="https://github.com/secdev/scapy" target="_blank" rel="noopener">官网</a></p></li><li><p>wifi：一个 Python 库和命令行工具用来在 Linux 平台上操作 WiFi。<a href="https://wifi.readthedocs.org/en/latest/" target="_blank" rel="noopener">官网</a></p></li><li><p>Pingo：Pingo 为类似 Raspberry Pi，pcDuino， Intel Galileo 等设备提供统一的 API 用以编程。<a href="http://www.pingo.io/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="兼容性"><a href="/2018/09/18/cnPython/#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>帮助从 Python 2 向 Python 3 迁移的库。</p><ul><li><p>Python-Future：这就是 Python 2 和 Python 3 之间丢失的那个兼容性层。<a href="http://python-future.org/index.html" target="_blank" rel="noopener">官网</a></p></li><li><p>Python-Modernize：使 Python 代码更加现代化以便最终迁移到 Python 3。<a href="https://github.com/mitsuhiko/python-modernize" target="_blank" rel="noopener">官网</a></p></li><li><p>Six：Python 2 和 3 的兼容性工具。<a href="https://pypi.python.org/pypi/six" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="杂项"><a href="/2018/09/18/cnPython/#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>不属于上面任何一个类别，但是非常有用的库。</p><ul><li><p>blinker：一个快速的 Python 进程内信号/事件分发系统。<a href="https://github.com/jek/blinker" target="_blank" rel="noopener">官网</a></p></li><li><p>itsdangerous：一系列辅助工具用来将可信的数据传入不可信的环境。<a href="https://github.com/pallets/itsdangerous" target="_blank" rel="noopener">官网</a></p></li><li><p>pluginbase：一个简单但是非常灵活的 Python 插件系统。<a href="https://github.com/mitsuhiko/pluginbase" target="_blank" rel="noopener">官网</a></p></li><li><p>Pychievements：一个用来创建和追踪成就的 Python 框架。<a href="https://github.com/PacketPerception/pychievements" target="_blank" rel="noopener">官网</a></p></li><li><p><a href="http://hao.jobbole.com/tryton/" target="_blank" rel="noopener">Tryton</a>：一个通用商务框架。<a href="http://www.tryton.org/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="算法和设计模式"><a href="/2018/09/18/cnPython/#算法和设计模式" class="headerlink" title="算法和设计模式"></a>算法和设计模式</h3><p>Python 实现的算法和设计模式。</p><ul><li><p><a href="http://hao.jobbole.com/algorithms/" target="_blank" rel="noopener">algorithms</a>：一个 Python 算法模块。<a href="https://github.com/nryoung/algorithms" target="_blank" rel="noopener">官网</a></p></li><li><p>python-patterns：Python 设计模式的集合。<a href="https://github.com/faif/python-patterns" target="_blank" rel="noopener">官网</a></p></li><li><p>sortedcontainers：快速，纯 Python 实现的 SortedList，SortedDict 和 SortedSet 类型。<a href="http://www.grantjenks.com/docs/sortedcontainers/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="编辑器插件"><a href="/2018/09/18/cnPython/#编辑器插件" class="headerlink" title="编辑器插件"></a>编辑器插件</h3><p>编辑器和 IDE 的插件</p><ul><li>Emacs</li></ul><ul><li>Elpy：Emacs Python 开发环境。<a href="https://github.com/jorgenschaefer/elpy" target="_blank" rel="noopener">官网</a></li></ul><ul><li>Sublime Text</li></ul><ul><li><p>SublimeJEDI：一个 Sublime Text 插件，用来使用超赞的自动补全库 Jedi。<a href="https://github.com/srusskih/SublimeJEDI" target="_blank" rel="noopener">官网</a></p></li><li><p>Anaconda：Anaconda 把你的 Sublime Text 3 变成一个功能齐全的 Python IDE。<a href="https://github.com/DamnWidget/anaconda" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>Vim</li></ul><ul><li><p><a href="http://hao.jobbole.com/youcompleteme/" target="_blank" rel="noopener">YouCompleteMe</a>：引入基于 <a href="https://github.com/davidhalter/jedi" target="_blank" rel="noopener">Jedi</a> 的 Python 自动补全引擎。<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="noopener">官网</a></p></li><li><p>Jedi-vim：绑定 Vim 和 Jedi 自动补全库对 Python 进行自动补全。<a href="https://github.com/davidhalter/jedi-vim" target="_blank" rel="noopener">官网</a></p></li><li><p>Python-mode：将 Vim 变成 Python IDE 的一款多合一插件。<a href="https://github.com/klen/python-mode" target="_blank" rel="noopener">官网</a></p></li></ul><ul><li>Visual Studio</li></ul><ul><li>PTVS：Visual Studio 的 Python 工具。<a href="https://github.com/Microsoft/PTVS" target="_blank" rel="noopener">官网</a></li></ul><h3 id="集成开发环境"><a href="/2018/09/18/cnPython/#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h3><p>流行的 Python 集成开发环境。</p><ul><li><p>PyCharm：商业化的 Python IDE ，由 JetBrains 开发。也有免费的社区版提供。<a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">官网</a></p></li><li><p>LiClipse：基于 Eclipse 的免费多语言 IDE 。使用 PyDev 来支持 Python 。<a href="http://www.liclipse.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>Spyder：开源 Python IDE。<a href="https://github.com/spyder-ide/spyder" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="自动聊天工具"><a href="/2018/09/18/cnPython/#自动聊天工具" class="headerlink" title="自动聊天工具"></a>自动聊天工具</h3><p>用于开发聊天机器人的库</p><ul><li>Errbot：最简单和最流行的聊天机器人用来实现自动聊天工具。<a href="http://errbot.io/en/latest/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="服务"><a href="/2018/09/18/cnPython/#服务" class="headerlink" title="服务"></a>服务</h2><p>在线工具和简化开发的 API 。</p><h3 id="金融数据"><a href="/2018/09/18/cnPython/#金融数据" class="headerlink" title="金融数据"></a>金融数据</h3><ul><li><p>Tushare ：一个可以提供免费股票、基金、期货、港股等金融数据的 Python 开源数据。<a href="http://tushare.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>Ta-Lib ：金融数据技术分析库，可以依据原始金融数据计算各种技术指标,计算性能比较优异。<a href="https://www.ta-lib.org/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="持续集成"><a href="/2018/09/18/cnPython/#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>参见: <a href="https://github.com/ciandcd/awesome-ciandcd#online-build-system" target="_blank" rel="noopener">awesome-CIandCD</a>.</p><ul><li><p>Travis CI：一个流行的工具，为你的开源和 <a href="https://travis-ci.com/" target="_blank" rel="noopener">私人</a> 项目提供持续集成服务。(仅支持 GitHub)<a href="https://travis-ci.org/" target="_blank" rel="noopener">官网</a></p></li><li><p>CircleCI：一个持续集成工具，可以非常快速的进行并行测试。 (仅支持 GitHub)<a href="https://circleci.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>Vexor CI：一个为私人 app 提供持续集成的工具，支持按分钟付费。<a href="https://vexor.io/" target="_blank" rel="noopener">官网</a></p></li><li><p>Wercker：基于 Docker 平台，用来构建和部署微服务。<a href="http://wercker.com/" target="_blank" rel="noopener">官网</a></p></li></ul><h3 id="代码质量"><a href="/2018/09/18/cnPython/#代码质量" class="headerlink" title="代码质量"></a>代码质量</h3><ul><li><p>Codacy：自动化代码审查，更加快速的发布高质量代码。对于开源项目是免费的。<a href="https://www.codacy.com/" target="_blank" rel="noopener">官网</a></p></li><li><p>QuantifiedCode：一个数据驱动、自动、持续的代码审查工具。<a href="https://www.quantifiedcode.com/" target="_blank" rel="noopener">官网</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> Gunicorn </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《High Performance Django》阅读笔记</title>
      <link href="/2018/09/15/HighDjango/"/>
      <url>/2018/09/15/HighDjango/</url>
      <content type="html"><![CDATA[<h1 id="第一章：The-Big-Picture"><a href="/2018/09/15/HighDjango/#第一章：The-Big-Picture" class="headerlink" title="第一章：The Big Picture"></a>第一章：The Big Picture</h1><p>作者开篇就提到大家总说 Django 性能不行，但是实际上 有很多高性能的站点是使用 Django 开发的。</p><blockquote><p>Django’s scaling success stories are almost too numerous to list at this point. It backs Disqus, Instagram, and Pinterest. Want some more proof? Instagram was able to sustain over 30 million users on Django with only 3 engineers (2 of which had no back-end development experience). Disqus serves over 8 billion page views per month. Those are some huge numbers. These teams have proven Django most certainly does scale. Our experience here at Lincoln Loop backs it up. We’ve built big Django sites capable of spending the day on the Reddit homepage without breaking a sweat.</p></blockquote><p>在作者的公司，他们开发高性能 Django 站点的准则就是 simplicity :</p><ul><li>Using as few moving parts as possible to make it all work. “Moving parts” may be servers, services or third-party software.</li><li>Choosing proven and dependable moving parts instead of the new hotness.</li><li>Using a proven and dependable architecture instead of blazing your own trail.</li><li>Deflecting traffic away from complex parts and toward fast, scalable, and simple parts .</li></ul><blockquote><p>Simple systems are easier to scale, easier to understand, and easier to develop.</p></blockquote><p>构建高性能 Web 应用通常需要关注一下几点：</p><ul><li>数据库。关系型数据库通常是整个技术栈中最慢最复杂的部分，一个办法是改用 NoSQL 数据库，不过 大多数情况下都可以通过缓存解决。</li><li>模板。我们可以用一个更快的模板引擎替换 Django 自带的模板引擎，不过即便是这样模板仍旧是 整个技术栈中第二慢的部分。我们仍然可以通过缓存解决这个问题。</li><li>Python。Python 在通常情况下已经足够快了。我们可以使用 Web 加速器（比如：Varnish）缓存服务器响应， 在请求进入到 Python 那一层之前就返回相应。</li></ul><p>这章作者一直在强调缓存，”CACHE ALL THE THINGS”。无论你怎么优化你的技术栈，没有比缓存更快的优化方案。 说到缓存可能大家可能会顾虑缓存过期的问题，作者说了现在先别关心这个问题，之后会给出解决方案。</p><p>作者提到一般的网站都保护这几层：负载均衡器，Web 加速器，APP 服务器，缓存，数据库。</p><p>顺便提了一个 HTTPS 的负载均衡配置方法：客户端与负载均衡器之间使用 HTTPS，负载均衡器与后端服务之间使用 HTTP。这样既保证了安全又可以减少 HTTPS 对性能的影响。</p><h1 id="第二章-The-Build"><a href="/2018/09/15/HighDjango/#第二章-The-Build" class="headerlink" title="第二章 The Build"></a>第二章 The Build</h1><h2 id="小技巧"><a href="/2018/09/15/HighDjango/#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul><li>本地开发环境应该尽可能的与线上环境一致：相同的数据库，相同的操作系统以及相同的软件版本。。。</li><li>组织 settings 文件，创建一个基础的配置文件 settings/base.py ，然后再为开发，测试，部署分别创建一个配置文件，一些重要的配置信息可以通过环境变量获取<ul><li>settings/base.py</li><li>settings/dev.py</li><li>settings/deploy.py</li></ul></li></ul><p>这里作者有提到一个小技巧，那就是环境变量的值都是字符串，那么如果将值转换为布尔值，元组甚至字典呢？答案就是可以使用 ast 模块:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; ast.literal_eval(<span class="string">'True'</span>)</span><br><span class="line"> True</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; ast.literal_eval(<span class="string">'1, 2, 3'</span>)</span><br><span class="line"> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; ast.literal_eval(<span class="string">'&#123;"foo": "bar"&#125;'</span>)</span><br><span class="line"> &#123;<span class="string">'foo'</span>: <span class="string">'bar'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="小心第三方-APP"><a href="/2018/09/15/HighDjango/#小心第三方-APP" class="headerlink" title="小心第三方 APP"></a>小心第三方 APP</h2><p>在决定使用某个第三方 APP 之前，先回答下面几个问题：</p><ul><li>它真的符合你的需求吗？还是只是有点相近？</li><li>它是个健康的项目吗？<ul><li>维护者有一个好的追踪记录吗？</li><li>文档写的好吗？</li><li>测试覆盖率够吗？</li><li>社区怎样（贡献者，pull requests 等等）？</li><li>还在处于活跃开发吗？</li><li>有很多旧的 issues 和 pull requests 吗？</li></ul></li><li>性能咋样？<ul><li>它会产生多少数据库查询？</li><li>易于缓存吗？</li></ul></li><li>跟你项目的其他部分有冲突吗？</li><li>它的授权协议跟你的项目兼容吗？</li></ul><p>不再维护以及不稳定的第三方应用很快就会成为你的项目的负债。 可以尝试阅读源代码，然后从中找出你的项目需要的代码然后应用到项目中。</p><h2 id="找出性能问题"><a href="/2018/09/15/HighDjango/#找出性能问题" class="headerlink" title="找出性能问题"></a>找出性能问题</h2><p>可以使用下面这些工具</p><ul><li>Django Debug Toolbar</li><li>django-debug-panel</li><li>django-devserver</li></ul><p>观察页面性能：</p><p>执行了多少条 SQL 语句？<br>有多少时间花费在数据库上？<br>执行了什么特殊的查询操作，每次查询花费多长时间？<br>这些查询是有什么代码生成的？<br>渲染页面都用到了哪些模板？<br>冷/热缓存是如果影响性能的？（提示：可以使用 settings 来切换缓存）</p><h2 id="哪里需要优化"><a href="/2018/09/15/HighDjango/#哪里需要优化" class="headerlink" title="哪里需要优化"></a>哪里需要优化</h2><h3 id="数据库优化"><a href="/2018/09/15/HighDjango/#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h3><ul><li>减少查询次数<ul><li>使用 <code>select_related</code>, <code>prefetch_related</code>, (提示：<code>prefetch_related</code> 要放在查询的最后，不然会没有效果。)</li></ul></li><li>减少查询时间<ul><li>不要忘记加索引（索引也是有代价的，每次对数据库进行写操作都需要更新索引）</li><li>某些情况下 join 查询性能很差，在这种情况下两条查询语句比一条 join 耗时更少。</li></ul></li><li>限制结果数<ul><li>留意 <code>.all()</code> 只取需要的结果数, <code>queryset[:20]</code></li></ul></li><li>count 查询很慢。可以的话，不要使用 count。比如使用 <code>.exists()</code> 代替 count 进行判断记录是否存在。</li><li>generic 外键。generic 外键是个很 cool 的功能，但是它会生成一些特别复杂的查询，所以可能的话，不要使用它。如果你一定要用的话，记得这是个需要缓存的地方。</li><li>优化 model 方法。如果某个 model 方法在一个请求内会多次被调用，可以使用 <code>cache_property</code> 缓存方法解决（缓存只在该请求内有效）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.functional <span class="keyword">import</span> cached_property</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheModel</span><span class="params">(models.Model)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @cached_property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expensive</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="comment"># ...</span></span><br><span class="line">       <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><ul><li>结果太大了，包含了不需要的字段。使用 <code>defer</code>, <code>only</code>, <code>values</code>, <code>values_list</code> 限制结果大小:</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">posts = Post<span class="selector-class">.objects</span><span class="selector-class">.all</span>().defer(<span class="string">'body'</span>)</span><br><span class="line">posts = Post<span class="selector-class">.objects</span><span class="selector-class">.all</span>().only(<span class="string">'title'</span>)</span><br><span class="line">posts = Post<span class="selector-class">.objects</span><span class="selector-class">.all</span>().values(<span class="string">'id'</span>)</span><br><span class="line">posts = Post<span class="selector-class">.objects</span><span class="selector-class">.all</span>().values_list(<span class="string">'id'</span>)</span><br><span class="line">posts = Post<span class="selector-class">.objects</span><span class="selector-class">.all</span>().values_list(<span class="string">'id'</span>, flat=True)</span><br></pre></td></tr></table></figure><ul><li><p>缓存查询结果。这里提到两个库: Johnny Cache 和 Cache Machine 这两个库的原理都是在 ORM 和数据库中间加了一个缓存层，将 ORM 生成的 SQL 作为 key 来缓存查询结果。</p></li><li><p>只读 replicas。对那些读远远大于写的站点，可以考虑从 只读 replicas 中读取数据，实现读写分离。减少主库的负担优化性能。</p></li><li>raw 查询。如果感觉 ORM 有点慢话，可以考虑使用 <code>raw</code> 方法执行原生的 SQL 语句。</li><li>反范式。这种方法有个问题就是每次更新的时候都需要同时更新其他表中相关的冗余字段。</li><li>使用其他数据存储方式。比如： Postgres, redis, mongodb，使用 Elasticsearch 进行全文检索等。 需要注意的是，在生产环境下新增一个服务并无法没有代价的。作为开发者我们可以不太在意这个，但是系统需要 支持，配置，监控，备份等。新增服务的时候要考虑到这些代价以及你的系统管理员的意见。</li><li>sharding。99.9% 的网站都不需要用到数据库的 sharding 功能，所以只有在你确信你遇到了那 0.1% 的时候 再使用 sharding 功能。</li></ul><h2 id="模板优化"><a href="/2018/09/15/HighDjango/#模板优化" class="headerlink" title="模板优化"></a>模板优化</h2><p>应该缓存模板中一切可以缓存的东西。</p><ul><li>俄罗斯套娃式缓存。在一个模板里缓存嵌套缓存，就像俄罗斯套娃一样，一层套一层。比如:</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">cache</span> MIDDLE_TTL "post_list" request.GET.page %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> "inc/post/header.html" %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-list"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> post <span class="keyword">in</span> post_list %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name">cache</span> LONG_TTL "post_teaser_" post.id post.last_modified %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> "inc/post/teaser.html" %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name">endcache</span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name">endcache</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><ul><li>自定义一个支持通过 url 参数刷新模板缓存的 cache 标签，这样就可以随时刷新缓存了</li></ul><h2 id="随后处理耗时的任务"><a href="/2018/09/15/HighDjango/#随后处理耗时的任务" class="headerlink" title="随后处理耗时的任务"></a>随后处理耗时的任务</h2><p>可以把耗时的，不需要同步知道结果的任务放到类似 celery 的任务队列中异步执行， 从而减少请求——响应的处理时间。下面这些任务可以考虑放到 celery 中：</p><ul><li>第三方 API 的调用</li><li>发邮件</li><li>非常复杂的计算（视频处理，大量的数字处理等）</li></ul><p>对于使用 celery 作者提到了一下小提示：</p><ul><li>不要将 model 实例作为任务的参数，可以改用传主键的方式。因为在这期间 model 的数据可能已经发生改变了， 还有就是那个 model 实例可能不支持序列化。</li><li>保持任务小，不要再一个任务中执行太多的工作。把一个任务分割成多个任务，一方面可以使用多核或多 worker 的 方式加速任务执行，另一方面，单个任务可以很快的执行完方便安全快速的重启 worker，因为一个 worker 重启时 会等待正在执行的问题完成，保持任务小巧的话，可以加快部署时间。</li><li>可以考虑使用 celery 的 beat 功能去自习定时任务。</li></ul><h2 id="前段优化"><a href="/2018/09/15/HighDjango/#前段优化" class="headerlink" title="前段优化"></a>前段优化</h2><ul><li>压缩 css 和 javascript（min, gzip, 版本化静态文件）。（个人建议：版本化文件应该类似这样 foo-xxyy.js 而不是这样 foo.js?v=xxyy ，主要是方便使用 CDN，防止出现缓存未过期的情况。）</li><li>压缩图片。</li><li>使用 CDN 服务静态文件。</li></ul><h2 id="文件上传"><a href="/2018/09/15/HighDjango/#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>可以考虑使用分布式文件系统或者云存储来存储上传的文件。使用云存储的时候要考虑备用方案，万一服务不可用怎么办。</p><h2 id="测试"><a href="/2018/09/15/HighDjango/#测试" class="headerlink" title="测试"></a>测试</h2><p>好的测试用例是健康代码的强有力的基石。测试应该覆盖到你代码中最复杂，最重要，最容易出问题的地方。</p><h3 id="自动化测试以及持续集成"><a href="/2018/09/15/HighDjango/#自动化测试以及持续集成" class="headerlink" title="自动化测试以及持续集成"></a>自动化测试以及持续集成</h3><p>一个持续集成系统可以让开发者在开发进度的早期就发现问题，通过持续集成系统来执行 自动化测试以及检查你的代码的健康度。作者提到了他们的检查点：</p><ul><li>单元测试</li><li>代码覆盖率</li><li>PEP8/linting</li><li>使用 Selenium 进行功能测试</li><li>所以 Jmeter 进行性能测试</li></ul><h1 id="第三章：The-Deployment"><a href="/2018/09/15/HighDjango/#第三章：The-Deployment" class="headerlink" title="第三章：The Deployment"></a>第三章：The Deployment</h1><h2 id="先决条件"><a href="/2018/09/15/HighDjango/#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><h3 id="操作系统"><a href="/2018/09/15/HighDjango/#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>作者推荐使用 Ubuntu。同时作者给出了选择其他操作系统时，需要考虑的事情：</p><ul><li>能够很容易的就使用 Python 2.7+ 。有些操作系统要安装 2.7+ 版本的 Python 非常的麻烦，如果是这样的话你就要慎重考虑了。</li><li>有长久的安全更新支持。</li></ul><h3 id="配置管理"><a href="/2018/09/15/HighDjango/#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><ul><li>Chef, Puppet, Ansible, Salt 都是比较好的配置管理工具</li><li>Fabric 不是配置管理工具，如果你把它当作配置管理工具的话，会有你头疼的时候。你可以在 Fabric 的基础上 构建你自己的配置管理工具。</li></ul><h3 id="进程管理"><a href="/2018/09/15/HighDjango/#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ul><li>系统默认的工具：upstart, systemd</li><li>第三方软件：deamontools, supervisord, circus</li></ul><h3 id="更新代码"><a href="/2018/09/15/HighDjango/#更新代码" class="headerlink" title="更新代码"></a>更新代码</h3><p>更新代码一般需要进行下面几步：</p><ol><li>从版本控制服务器上拉取最新的代码</li><li>更新依赖</li><li>合并数据库更改(migrate)</li><li>收集，压缩，推送静态文件到 CDN</li><li>reload WSGI 服务器</li><li>重启后台 workers</li></ol><p>推荐写个脚本自动执行这些操作，这样不容易出错。如果要更新多台服务器的话，可以使用远程执行 框架来做这种事情，比如： Salt, Fabric。</p><p>有一点特别要注意的是，一旦服务上线就应该尽可能的使用平滑 reload 的方式来代替重启进程的暴力方式。</p><h3 id="多个远程环境"><a href="/2018/09/15/HighDjango/#多个远程环境" class="headerlink" title="多个远程环境"></a>多个远程环境</h3><p>至少要有两个环境吧：打包/开发环境，生产环境。 同时多个环境尽量保证一致性，尤其是多个生产环境之间（设置，软件，系统，等等）。 不过有些东西还行要区分的，比如：</p><p>第三方服务配置。比如，你肯定不希望在开发环境下触发支付操作或发送文件到生产环境下的 CDN 上。<br>获取数据的问题。经常看到某些人在开发环境下使用线上数据库的副本，但是这里有几个问题要考虑：<br>你的开发环境更生产环境一样安全吗？监控松散的开发机器是黑帽黑客经常会攻击的目标。<br>有可能会从你的应用中发送邮件或通知吗？从你的开发环境下向你的用户发送数千封邮件不仅是非常 尴尬的事情，同时也会影响你们的商业。</p><h3 id="避免单点故障"><a href="/2018/09/15/HighDjango/#避免单点故障" class="headerlink" title="避免单点故障"></a>避免单点故障</h3><p>要经常备份，确保你知道所有存储的数据（数据库，用户上传的数据，等等）都有备份。这样出现故障的时候 其他其他机器的时候丢失的数据会少一点。</p><p>高可用是一个可以考虑的方法，如果对你的商业来说他是非常重要的话。 HA 可以保证在出现服务挂掉 的情况下能够无缝自动切换到备用服务或者说不用手动切换。不过需要注意的是通常构建高可用 的花费比服务当掉的花费还高。</p><p>在考虑架构的时候要考虑到如何解决单点故障的问题。举个例子，当使用第三方的 Amazon EC2 的时候， 你是否能够接受某些区域的设备宕机，整个地区呢？如果服务商 Amazone 当了怎么办？ 越早考虑这些问题就能在灾难实际发生的时候更好的应对。</p><h2 id="服务器布局"><a href="/2018/09/15/HighDjango/#服务器布局" class="headerlink" title="服务器布局"></a>服务器布局</h2><ul><li>负载均衡器： 可以使用云服务商提供的负载均衡服务或者使用 nginx, Haproxy。对于负载均衡器网络 带宽是个非常重要的注意点。</li><li>Web 加速器：网络带宽和内存是值得关注的点</li><li>应用：CPU 和内存值得关注。</li><li>后台运行的 workers：后台运行的任务通常都是 CPU 密集型的任务并且运行在独立的服务器上。一个服务器上可以运行 多个 workers。</li><li>缓存：你的缓存服务器需要更多的内存。另一个需要注意就是网络带宽，它可能会在内存之前成为瓶颈。如果网络开始 拥堵的时候， Django 可以配置多个缓存服务器。</li><li>数据库：足够的内存非常重要，最用是足够把你的数据都装载在内存里。 如果你预期会有 64GB 的数据，那么至少要有 64GB 的内存。 磁盘速度也非常重要。购买你能够负担得起的最快的磁盘。 如果你用的是虚拟机的话，你需要留意你其实是在跟你的邻居共享一个物理磁盘，常规的实践是尽可能的买最大的虚拟机。</li></ul><h2 id="优化技术栈"><a href="/2018/09/15/HighDjango/#优化技术栈" class="headerlink" title="优化技术栈"></a>优化技术栈</h2><h3 id="优化数据库"><a href="/2018/09/15/HighDjango/#优化数据库" class="headerlink" title="优化数据库"></a>优化数据库</h3><h3 id="优化-uWSGI"><a href="/2018/09/15/HighDjango/#优化-uWSGI" class="headerlink" title="优化 uWSGI"></a>优化 uWSGI</h3><h3 id="优化-Django"><a href="/2018/09/15/HighDjango/#优化-Django" class="headerlink" title="优化 Django"></a>优化 Django</h3><p><strong>CACHES</strong></p><p>如果你使用 Memcached，使用 pylibmc 这个库会有更高的性能。 redis 的话可以使用 django-redis 。</p><p>缓存过期是第一个需要面临的问题，一个缓存 key 过期或者被刷新都有可能摧毁你的数据库。 幸运的是有个简单包可以解决这个问题： django-newcache</p><p>还有一个问题就是如果缓存服务器宕机了会到期用户收到 “500 Server Error”的响应。 将使用一个缓存服务器改为三个可以降低出错的几率。 你需要考虑当缓存服务器宕机的时候，你是需要你的网站也跟着宕机，还是希望你的应用继续 运行良好只是把它当作缓存未命中来处理？作者创建了一个 django-ft-cache 包用来 解决这个问题，它会将任何的 memcached 操作用 try/except 包裹，捕获这里的异常， 这样缓存服务器当掉时请求依然可以被正确处理。</p><p><strong>SESSION_ENGINE</strong></p><p>把 session 保存在数据库中非常影响性能，一个好的办法是保存在缓存中。如果用 redis 的话 可以使用 cache backend, 用 memcached 的话 cached_db backend 也还行。 另一个办法就是使用 signed_cookies backend, 让客户端存储 session 数据。</p><p><strong>DATABASES</strong></p><p>可以通过 <code>DATABASES</code> 设置增加 <code>CNN_MAX_AG</code> key 选项来定义重用数据库连接。 比如 300, 这将告诉 Django 保持打开和重用数据库连接 5 分钟。</p><p><strong>LOGGING</strong></p><p>不要定义 LOGGING 将日志保存到文件中，而是应该输出到 <code>STDERR</code> ，让进程管理器来处理日志。</p><p><strong>MIDDLEWARE_CLASSES</strong></p><p>不要轻易自定义中间件，因为中间件会在每个请求中执行。所以确保你知道每个中间件都做了什么， 以及尽可能的不要在中间件中执行数据库查询操作。</p><p><strong>常规安全问题</strong></p><p>需要注意 clickjacking 和 XSS(Cross Site Scripting)。最简单的方法是使用 django-secure 项目来检查安全问题。 另一个安全问题是，确保你的 admin 后台处于保护中，如果你把它开放出去了，确保使用了非常 复杂的管理员密码。最好是把它变成一个内网服务，让它不能从外部互联网访问。</p><h2 id="配置你的服务器"><a href="/2018/09/15/HighDjango/#配置你的服务器" class="headerlink" title="配置你的服务器"></a>配置你的服务器</h2><h3 id="安全"><a href="/2018/09/15/HighDjango/#安全" class="headerlink" title="安全"></a>安全</h3><ul><li>调整 SSH 配置：禁用 <code>root</code> 登录，禁用密码登录，更改默认端口。</li><li>应用安全补丁：关注一下系统安全问题，及时更新 zer-day 补丁（比如，Hearbleed）</li><li>使用私有网络：大多数云服务器都提供私有网络服务，只允许访问你帐号下的服务。在私有网络 中访问你的服务器可以加大被人攻击你的难度。</li><li>保护内网服务：内网服务包括控制台，开发服务器，持续集成系统。它们会成为你安全网络的一道暗门。 将它们用 VPN 或认证代理锁起来，如果你没有使用 VPN 的话，确保传输数据以及登录时总是使用 SSL/HTTPS。 锁住你的开发环境可以确保 google 不会抓取它从而伤害你的 SEO）</li><li>防火墙：只允许指定端口和 IP 访问你的服务器。硬件防火墙很棒，软件防火墙比如 iptables 也不错。</li><li>不要在 root 下运行：不在 root 下运行可以防止某些人运用 RCE(remote code execution)获取你服务器的 root 访问权限。使用标准用户登录服务器，只在必要时使用 sudo。</li><li>保护你的第三方服务的账户：使用强壮的密码，尽可能的开启两步验证。</li></ul><h3 id="备份"><a href="/2018/09/15/HighDjango/#备份" class="headerlink" title="备份"></a>备份</h3><p>对于数据库，有一个运行的 replica 可以很方便的执行全备份。推荐在半夜执行全备份。 进行备份的时候有几个问题需要问一下你自己：</p><ul><li>如果有人黑进了你的服务器，他们能够删掉或破坏你的备份吗？ 基于这个原因拉取到备份服务器比推送要更好。</li><li>如果有人拿到了你的备份会有多糟糕？加密备份文件并且确保黑客没法在同一个服务器上找到解密的方法（注：比如可以使用公钥进行加密，同时服务器上不要存有私钥，这样就不会被黑客在服务器上找到解密的方法）。</li><li>你有测试过备份是否可用吗？定期测试你的备份，验证它们是否真的有效。</li></ul><h2 id="监控"><a href="/2018/09/15/HighDjango/#监控" class="headerlink" title="监控"></a>监控</h2><p>没有监控的话，线上网站就会成为一个大黑盒。你没法知道实际情况是怎样的，也就没法进行性能优化了。</p><h3 id="instrumentation"><a href="/2018/09/15/HighDjango/#instrumentation" class="headerlink" title="instrumentation"></a>instrumentation</h3><p>对于应用，你需要知道下面这个问题：</p><ul><li>我的系统中最慢的部分是什么？</li><li>Django 处理响应的平均耗时是多少？</li><li>哪个视图是最慢的？或者花费最多的时间？</li><li>哪个数据库查询是最慢的？或者花费最多的时间？</li><li>这些数据一段时间内是如何变化的？</li></ul><p>NewRelic 是个探测这些问题的比较好的服务，它可以很方便的安装。 然而， NewRelic 是闭源的，专有的系统，同时也非常的贵。有一些开源产品可以替代它。 比如：Graphite</p><h3 id="服务器资源"><a href="/2018/09/15/HighDjango/#服务器资源" class="headerlink" title="服务器资源"></a>服务器资源</h3><p>关于服务器资源需要监控如下数据：</p><ul><li>平均负载</li><li>CPU 负载</li><li>物理内存使用情况</li><li>磁盘相关数据</li><li>网络 I/O</li></ul><h3 id="告警"><a href="/2018/09/15/HighDjango/#告警" class="headerlink" title="告警"></a>告警</h3><p>下列情况需要发送告警：</p><p>超过 X% 的请求出现错误<br>服务器宕机<br>服务器资源占用过高：负载，虚拟内存，磁盘等等<br>服务未响应</p><h3 id="日志"><a href="/2018/09/15/HighDjango/#日志" class="headerlink" title="日志"></a>日志</h3><p>需要收集如下日志：</p><ul><li>从你的负载均衡器都应用的 Apache 风格的日志</li><li>任何应用内的日志</li><li>相关服务的 syslog 日志</li><li>数据库慢查询日志，以及在不会导致数据库连接的 I/O 问题（尤其是磁盘或网络）的前提下收集所有数据库查询的日志。</li></ul><h3 id="错误汇报"><a href="/2018/09/15/HighDjango/#错误汇报" class="headerlink" title="错误汇报"></a>错误汇报</h3><p>在生成环境下 Django 默认会在出现异常时给网站管理员发送异常邮件。这个功能有时也会导致一些问题：</p><ul><li>Email 不利于追踪错误</li><li>如果你的错误发生在一个高访问的页面的话，你实际上是在 DoS 你的邮件服务器， 可能导致被加入黑名单，或者你的邮件服务商会关掉你的服务（他们不想在几秒内发送超过 10K 的邮件）。</li></ul><p>幸运的是，更好的错误汇报方式已经存在了，开源的 Sentry 项目是个非常好的解决方案。 Sentry 并不会发送 10K 的邮件，它之后在第一次出现错误时邮件通知你，之后收集并在 Web 页面上 暂时其他时候的错误用于分析问题。</p><p>还有一个关于错误的主题就是确保有一个漂亮的不引来应用服务的 500.html 文件，并且已经在服务器上配置好了出错是使用 这个页面。</p><h1 id="第四章：预备"><a href="/2018/09/15/HighDjango/#第四章：预备" class="headerlink" title="第四章：预备"></a>第四章：预备</h1><h2 id="使用-Jmeter-进行负载测试"><a href="/2018/09/15/HighDjango/#使用-Jmeter-进行负载测试" class="headerlink" title="使用 Jmeter 进行负载测试"></a>使用 Jmeter 进行负载测试</h2><p>这一部分主要讲解了 Jmeter 的各种是否方法及配置。</p><h2 id="启动计划"><a href="/2018/09/15/HighDjango/#启动计划" class="headerlink" title="启动计划"></a>启动计划</h2><p>启动的时候有些东西需要考虑</p><ul><li>使用负载均衡器在新的和旧的之间分流</li><li>使用“dark launch”，这样用户就不会感觉到他们访问的是新的服务器</li><li>使用代理功能分一部分流量到新的服务器</li><li>使用特性标志来发布一个新的特性。</li></ul><p>发送流量到一个新的没有缓存的服务器可能会导致临时的高负载 从而在缓存热和起来前击垮你的服务器。预热你的缓存可以解决这个问题。一个比较简单的办法是使用一个脚本在有真实请求前去抓取你的网站上的热门 URLs。</p><p>不要在一天的最后时间段或周五的时候升启动，除非你想让你的 整个团队在晚上或周末加班。 你应该在大家都在并且有几个小时或几天的时间来处理 启动过程中出现的问题时候启动，同时也要确保你的成员有时间休息。 如果你的网站访问量比较高的话，尝试在访问量比较低的时间段进行升级操作。</p><h2 id="启动前的检查事项"><a href="/2018/09/15/HighDjango/#启动前的检查事项" class="headerlink" title="启动前的检查事项"></a>启动前的检查事项</h2><h3 id="Django-配置项"><a href="/2018/09/15/HighDjango/#Django-配置项" class="headerlink" title="Django 配置项"></a>Django 配置项</h3><ul><li><code>DEBUG</code> 和 <code>TEMPLATE_DEBUG</code> 都设为 <code>False</code></li><li><code>SECRET_KEY</code> 是个非常大的随机字符串并且保密</li><li><code>ALLOWED_HOSTS</code> 包含了访问者可能会使用的有效域名</li><li><code>TEMPLATE_LOADERS</code>: Cached template loader 已启用</li><li><code>SESSION_ENGINE</code> 比默认设置更快</li><li><code>CACHES</code>: 使用 Memcached 或 Redis 后端</li><li><code>MEDIA_ROOT</code> 和 <code>MEDIA_URL</code> 接受并显示文件上传</li><li>管理员账户被限制并且有一个强壮的密码</li></ul><h3 id="部署"><a href="/2018/09/15/HighDjango/#部署" class="headerlink" title="部署"></a>部署</h3><ul><li>通过点击各种页面和链接的方式来确认网站是否按预期的结果 工作（没有挂掉的图片和链接）</li><li>Django 日志是否正常工作</li><li>监控平台是否接收到数据。确保你能看到整个技术栈中各级 的错误信息。</li><li>错误被汇报并且触发了通知</li><li>第三方服务能够接收到数据（支付，分析等等）</li><li>从你的应用服务和 Celery workers 中发出邮件的功能 能够正常运行</li><li>自定义的错误页面（400，500）已经在各个级别中被设置（负载均衡器，web 加速器，Django）</li><li>Django admin 没法通过 /admin/ 公开访问</li><li>SSL 证书有效并且设置是安全的。</li><li>Django-secure 的 <code>manage.py checksecure</code> 运行起来没有错误输出</li></ul><h3 id="基础设施"><a href="/2018/09/15/HighDjango/#基础设施" class="headerlink" title="基础设施"></a>基础设施</h3><ul><li>服务器和服务是安全的，已经锁好了大门</li><li>有个简单，正式的程序用来部署新的代码</li><li>你有一个可以在需要的时候快速水平扩展服务的计划</li><li>DNS TTL 可以被修改为 5 分钟或更短的时间在需要更改的时候</li></ul><p>#第五章 The Launch</p><h2 id="监控整个-Launch"><a href="/2018/09/15/HighDjango/#监控整个-Launch" class="headerlink" title="监控整个 Launch"></a>监控整个 Launch</h2><h3 id="服务器资源-1"><a href="/2018/09/15/HighDjango/#服务器资源-1" class="headerlink" title="服务器资源"></a>服务器资源</h3><p>可以使用如下工具参考服务器资源使用情况</p><ul><li>htop</li><li>varnishstat</li><li>varnishhist</li><li>varnishtop</li><li>varnishlop</li><li>uwsgitop</li><li>celery inspect</li><li>celery events</li><li>flower</li><li>memcache-top</li><li>pg_top</li><li>pg_stat_statements</li><li>pt-query-digest</li><li>mytop</li></ul><h2 id="当灾难来临的时候"><a href="/2018/09/15/HighDjango/#当灾难来临的时候" class="headerlink" title="当灾难来临的时候"></a>当灾难来临的时候</h2><h3 id="应用服务器过载"><a href="/2018/09/15/HighDjango/#应用服务器过载" class="headerlink" title="应用服务器过载"></a>应用服务器过载</h3><p>最简单的办法就是通过增加服务器的方式进行水平扩展。 不过你需要注意这将导致你的数据库承受更大的压力， 可能会把数据库搞挂。</p><p>当你通过增加服务器的方式把负载降低到可以接受的级别后， 你就需要使用你的低级别的工具来查看为什么会出现负载过高的 情况。你的 web 加速器端缓存命中率过低是一个需要考虑的因素。</p><h3 id="数据库服务器过载"><a href="/2018/09/15/HighDjango/#数据库服务器过载" class="headerlink" title="数据库服务器过载"></a>数据库服务器过载</h3><p>如果你的网站是 读多写少的话，可以通过增加 replica 的方式来简单解决响应时间问题。 同时也看看是否在数据库优化时遗漏某些可以优化的项。</p><h3 id="应用和数据库服务器过载"><a href="/2018/09/15/HighDjango/#应用和数据库服务器过载" class="headerlink" title="应用和数据库服务器过载"></a>应用和数据库服务器过载</h3><p>你可以从自底向上优化你的数据库，减轻数据库的压力可以让你的应用拥有更高的性能。 你也可以通过优化你的 web 加速器从而减轻应用服务器的压力，进而减轻数据库服务器的压力。</p><h1 id="前方的路"><a href="/2018/09/15/HighDjango/#前方的路" class="headerlink" title="前方的路"></a>前方的路</h1><p>恭喜你的网站已经启动了！现在你需要确保它能够持续稳定的运行。在这个战争中你需要与下列事物做斗争：</p><ul><li>你的用户（流量增长）</li><li>你的软件（一点点腐烂）</li><li>你（错误的决定）</li></ul><p>第一个没啥好惊讶的，最后两个可能会让你惊讶同时也是让你网站宕机的一些因素。</p><h2 id="流量增长"><a href="/2018/09/15/HighDjango/#流量增长" class="headerlink" title="流量增长"></a>流量增长</h2><p>正常情况下你的网站不应该在技术栈的任何层次占用 100% 的资源，一旦出现超过 70%（CPU,内存，磁盘等等） 的资源占用，那就说明某些地方需要优化了或者增加更多的资源。当流量突增的时候如果你有额外的资源的话就可以很好 的应对。</p><p>有些时候的流量激增可能是商业上进行了某些吸引用户的活动，确保开发者知道这些商业活动，以便应对激增的流量。 一个好的主意是像刚启动时那样，大家在桌子上一起讨论分享这些商业信息。</p><h2 id="一点点腐烂"><a href="/2018/09/15/HighDjango/#一点点腐烂" class="headerlink" title="一点点腐烂"></a>一点点腐烂</h2><p>由于高性能网站使用了很多不同的服务，所以需要保持这些服务打上了最新的安全补丁。 “如果没出现问题，就不要去修复它”是个非常危险的准则。</p><p>跳过几个小版本是没什么问题的，但是不要落下太远，不然的话到时就会失去升级动力。 定期小步升级你的依赖（你的操作系统，主要的服务以及 Python 库）。</p><p>作者的小贴士：</p><p>当 review 升级的时候，我们通常不会使用最新的版本，一般最新版本也意味着有新的 bug ，我想 你不希望当小白鼠吧。给新版本几个月的成熟期。 升级到第一个稳定的版本或者你已经确保这个版本没什么大的问题了。</p><h2 id="错误的决定"><a href="/2018/09/15/HighDjango/#错误的决定" class="headerlink" title="错误的决定"></a>错误的决定</h2><h3 id="意外的刷新了缓存"><a href="/2018/09/15/HighDjango/#意外的刷新了缓存" class="headerlink" title="意外的刷新了缓存"></a>意外的刷新了缓存</h3><p>在流量特别高的时候重启缓存或 web 加速器可能会击垮你的网站。这个问题叫做 dog-piling/cache stampede 所以尽量使用 reload 的方式来更新服务。对于使用 memcached/redis 的缓存可以通过给不同的缓存定义不同的 KEY_PREFIX 的方式来实现逐个清理缓存（通过 <code>VERSION</code>）而不是一下子删除所有缓存的功能。 如果一定要重启的话，进行选择在流量低的时候重启服务。</p><h3 id="数据库锁表"><a href="/2018/09/15/HighDjango/#数据库锁表" class="headerlink" title="数据库锁表"></a>数据库锁表</h3><p>数据库锁会临时阻塞主写操作，如果这个操作特别长的话就会成为一个问题。两个比较常见的长时间锁表的场景是： schema migration 和备份。</p><p>在开发的时候， South 和内置的 migration 可以很方便的应用 Model 更改， 但是在生成环境下， migrate 操作可能会导致长时间的锁表现象，这个对你的用户来说就是个糟糕的消息了。 对于 <code>ADD COLUMN</code> 操作，如果你使用的是 MySQL 数据库的话你需要留意一下这个，但是 PostgreSQL 很少会出现这个问题。</p><p>无论你使用哪种数据库，migrations 都需要被 review 并且使用最近的线上数据的副本数据测试过后才能在生产环境使用。</p><p>备份是另一个会导致长时间锁住数据库的操作。最好是在一个只读的 replica 上进行备份操作。</p><h3 id="大量的缓存过期"><a href="/2018/09/15/HighDjango/#大量的缓存过期" class="headerlink" title="大量的缓存过期"></a>大量的缓存过期</h3><p>跟刷新缓存差不多糟糕的事情就是有大量的缓存过期，这将导致数据库压力倍增。 如果你不是很确定的话，应该选择在流量比较低的时候进行部署操作，避免击垮你的站点。</p><h3 id="昂贵的-admin-视图"><a href="/2018/09/15/HighDjango/#昂贵的-admin-视图" class="headerlink" title="昂贵的 admin 视图"></a>昂贵的 admin 视图</h3><p>构建一个未优化的 admin 视图会导致上千的数据库查询。 如果你正在使用一个查询缓存比如 johnny-cache, 每一次在 admin 中保存都将 导致与所在表相关的缓存都将失效。所以 admin 视图也需要像普通视图那样进行优化。</p><h3 id="昂贵的后台任务"><a href="/2018/09/15/HighDjango/#昂贵的后台任务" class="headerlink" title="昂贵的后台任务"></a>昂贵的后台任务</h3><p>未优化，数据库依赖的任务会导致非预期的负载负担。所有应该像优化视图一样优化你的后台任务。</p><h3 id="逐渐恶化"><a href="/2018/09/15/HighDjango/#逐渐恶化" class="headerlink" title="逐渐恶化"></a>逐渐恶化</h3><p>随着新功能的增加，网站的性能也在接受不同的考验，你需要随时关注性能问题。</p><p>每次发布新版本的时候都关注一下性能的变化，如果响应时间变长了或者负载变高了， 立马去解决它。这样就不会出现在几个月的提交过去后再去查找问题所在的情况。</p><h3 id="complexity-creep"><a href="/2018/09/15/HighDjango/#complexity-creep" class="headerlink" title="complexity creep"></a>complexity creep</h3><p>如果你按照前面所说的步骤做了的话，你已经做的非常好了。 随着你的网站的成长你可能会遇到各种各样的新问题，你可以很容易的就构建自己 独有的解决方法。 构建你自己的工具是件很有乐趣的事情，但是 not invented here 对于长时间运行 的站点是非常危险的。你最好去学习如何让 Varnish 更高效而不是丢弃它转而使用你自己的工具。 这个决定衍生的代价是非常巨大的：</p><ul><li>训练新的开发者需要更高的花费。你可以找到一名拥有使用一个比如 Varnish 这种服务经验的开发者， 但是如果使用你自定义的方案的话，你需要训练每一位在门外徘徊的开发者。</li><li>开发低级别的基础设施工具将会导致开发时间远离了你的核心产品。使用一个支持良好的开源服务， 你的团队的开发者的效率会很高效。</li><li>写你自己的软件代码不是一锤子买卖。所有的软件都需要不断的开发，测试，文档，等等。</li></ul><h1 id="最后的想法"><a href="/2018/09/15/HighDjango/#最后的想法" class="headerlink" title="最后的想法"></a>最后的想法</h1><p>现在你可以在看看那个老问题“Django doesn’t scale”，你是怎么认为的呢？ 如果只用 <code>manage.py runserver</code>，使用 SQLite 在一个非常小的云服务器上跑 当然不会很快。</p><p>让我们回到 2012 年，当 Instagram 只有3个的 Django 团队却支撑起了 1千4百多万的用户的时候， 他们在博客上是 这么说的 ：</p><p>我们选择一个系统的核心宗旨是：</p><ul><li>保持非常简单</li><li>不要重复造轮子</li><li>可能的话，使用久经考验的成熟的技术</li></ul><p>我们非常同意。因此，在你继续你的 Django 旅程的时候，不要忘了你在这里学到的东西。 简单是指导原则。</p><p>注：本文转自<a href="https://mozillazg.com" target="_blank" rel="noopener">黄黄的博客</a>，并修改了文中大量错误。</p>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> Gunicorn </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Centos7.5+Nginx+Gunicorn+Django+Python3部署blog项目</title>
      <link href="/2018/08/14/blogbushu/"/>
      <url>/2018/08/14/blogbushu/</url>
      <content type="html"><![CDATA[<p>使用Centos7.5+Nginx+Gunicorn+Django+Python3部署blog项目</p><p>本站目前的开发环境是 Python3.5.2+Django1.10.6+Sqlite3+Centos7.5+Nginx1.12.2+Gunicorn</p><p>blog虽然已经上线测试有一段时间了(2018.8.7上线)，但是项目部署的笔记由于内容较多，没时间整理。今天抽空整理了一下午，发布出来供需要的同学借鉴参考。文中如有错误请多多指正</p><p>部署前的准备</p><h1 id="服务器"><a href="/2018/08/14/blogbushu/#服务器" class="headerlink" title="服务器"></a>服务器</h1><p>要部署项目就要先购买服务器，如腾讯云，阿里云等等</p><p>注意：服务器在国内的话，必须要备案！不然无法使用。</p><p>阿里云优惠券：<a href="https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=od77opdu&amp;utm_source=od77opdu" target="_blank" rel="noopener">点击前往领取</a><br>腾讯云代金券：<a href="https://cloud.tencent.com/redirect.php?redirect=1025&amp;cps_key=e45aa4e4a119335f28464633e4f42262&amp;from=console" target="_blank" rel="noopener">点击前往领取</a><br>腾讯云首页:<a href="https://cloud.tencent.com/redirect.php?redirect=1005&amp;cps_key=e45aa4e4a119335f28464633e4f42262&amp;from=console" target="_blank" rel="noopener">点击直达</a><br>腾讯云西南区云产品促销链接：<a href="https://cloud.tencent.com/redirect.php?redirect=1014&amp;cps_key=e45aa4e4a119335f28464633e4f42262&amp;from=console" target="_blank" rel="noopener">点击直达</a><br>腾讯云服务器购买链接：<a href="https://cloud.tencent.com/redirect.php?redirect=1001&amp;cps_key=e45aa4e4a119335f28464633e4f42262&amp;from=console" target="_blank" rel="noopener">点击直达</a></p><h1 id="域名"><a href="/2018/08/14/blogbushu/#域名" class="headerlink" title="域名"></a>域名</h1><p>域名购买选择，可以到百度云，腾讯云，阿里云，GoDaddy，namecheap等等</p><p>购买域名后就是解析域名，打开域名解析面板，添加解析记录<br>记录类型：A<br>主机记录：test.markhoo.com，这个markhoo.com是你的一级域名，二级域名你可以设置为<a href="http://www.markhoo.com" target="_blank" rel="noopener">www.markhoo.com</a><br>解析线路：可以默认也可以选别的<br>记录值：填写你的服务器IP地址<br>TTL：域名生效时间，也就是多久生效<br>设置好以上内容，点击确定。解析完成</p><p>主机记录中这个markhoo.com是你的一级域名，二级域名你也可以设置为 <a href="http://www.markhoo.com" target="_blank" rel="noopener">www.markhoo.com</a> 或者别的 xxx.markhoo.com 也可以。<br>注意：域名是否在国内购买不重要，只要服务器不在大陆购买，即使未备案照样可以使用。要是要解析的服务器是大陆服务商则必须要备案。备案后一个域名可以同时接入多个服务商。</p><p>域名解析记录类型说明：</p><ul><li>A：将域名指向一个IPv4地址</li><li>AAAA：将域名指向一个IPv6地址</li><li>CNAME：将域名指向另外一个域名</li><li>NS：将子域名指定其他DNS服务器解析</li><li>MX：将域名指向邮件服务器地址</li><li>SRV：记录提供特定的服务的服务器</li><li>TXT：文本长度限制512，通常做SPF记录(反垃圾邮件)</li><li>CAA：CA证书颁发机构授权校验</li><li>显性URL：将域名302重定向到另外一个地址</li><li>隐性URL：与显性URL类似，但是会隐藏真实目标地址</li></ul><h1 id="xshell下载与安装"><a href="/2018/08/14/blogbushu/#xshell下载与安装" class="headerlink" title="xshell下载与安装"></a>xshell下载与安装</h1><p>主要用于远程登录服务器进行相关操作。在官网注册后发送下载链接到你的注册邮箱，或者到搜索引擎搜索下载。<br>个人版免费，企业版收费。<br>下载后一路点击下一步，完成。</p><p>登录服务器步骤：<br>点击左上角’文件’–’新建’<br>然后弹出对话框<br>常规：名称，这个你可以随便取什么名字<br>协议：SSH，一般默认<br>主机：空，填上你的服务器IP地址<br>端口号：22，默认的就行<br>填好以上选项内容，点击左侧的’用户身份验证’，然后看右侧，方法选择’Password’，在下面输入你的服务器登录用户名和密码，最后点击下面的’连接’。<br>登录成功！进入界面。</p><p>百度网盘官网软件下载链接：<br>链接: <a href="https://pan.baidu.com/s/19K5q1JkmD9qnYaGRTALyLg" target="_blank" rel="noopener">https://pan.baidu.com/s/19K5q1JkmD9qnYaGRTALyLg</a> 密码: r6hx</p><h1 id="安装Nginx"><a href="/2018/08/14/blogbushu/#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><p>首先用xshell登录服务器<br>通过 yum 安装 Nginx</p><blockquote><p>yum install nginx</p></blockquote><p>启动 Nginx 服务</p><blockquote><p>systemctl start nginx</p></blockquote><p>或者</p><blockquote><p>systemctl start nginx.service<br>systemctl enable nginx.service</p></blockquote><p>访问服务器IP地址，可以看到 nginx 的欢迎界面</p><p>Nginx相关命令：<br>停止nginx</p><blockquote><p>nginx -s stop<br>重启nginx<br>nginx -s reload</p></blockquote><h1 id="Centos7-5安装Python3"><a href="/2018/08/14/blogbushu/#Centos7-5安装Python3" class="headerlink" title="Centos7.5安装Python3"></a>Centos7.5安装Python3</h1><p>由于centos7.5原本默认安装了Python2，而且这个Python2不能被删除，因为有很多系统命令，比如yum都要用到。<br>以下操作首先要用xshell登录到服务器<br>输入Python命令，查看可以得知是Python2.7.5版本</p><p>输入</p><blockquote><p>which python</p></blockquote><p>可以查看位置，一般是位于/usr/bin/python目录下。</p><p>下面介绍安装Python3的方法</p><p>首先安装依赖包</p><blockquote><p>yum -y groupinstall “Development tools”<br>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</p></blockquote><p>然后根据自己需求下载不同版本的Python3，我下载的是Python3.5.2</p><p>注：如果速度不够快，可以直接去官网下载，利用WinSCP等软件传到服务器上指定位置。</p><p>我的存放目录是/usr/local/python3，使用命令：</p><blockquote><p>mkdir /usr/local/python3 </p></blockquote><p>建立好一个空文件夹，进入该目录</p><blockquote><p>cd /usr/local/python3</p></blockquote><p>使用一下命令下载压缩包</p><blockquote><p>wget <a href="https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz</a></p></blockquote><p>然后解压压缩包安装Python3</p><blockquote><p>tar -xvJf  Python-3.5.2.tar.xz<br>cd Python-3.5.2<br>./configure –prefix=/usr/local/python3<br>make &amp;&amp; make install</p></blockquote><p>最后创建软链接</p><blockquote><p>ln -s /usr/local/python3/bin/python3 /usr/bin/python3<br>ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</p></blockquote><p>在命令行中输入python3测试</p><p>升级pip3命令：</p><blockquote><p>pip3 install –upgrade pip</p></blockquote><h1 id="部署前的项目配置"><a href="/2018/08/14/blogbushu/#部署前的项目配置" class="headerlink" title="部署前的项目配置"></a>部署前的项目配置</h1><p>Django 项目中会有一些 CSS、JavaScript 等静态文件，为了能够方便地让 Nginx 处理这些静态文件的请求，我们把项目中的全部静态文件收集到一个统一的目录下，这个目录通常位于 Django 项目的根目录，并且命名为 static。为了完成这些任务，需要在项目的配置文件里做一些必要的配置：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">myblog/settings.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他配置...</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = '/static/'</span><br><span class="line"><span class="comment"># 加入下面的配置</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, 'static')</span><br></pre></td></tr></table></figure><p>STATIC_ROOT 指明了静态文件的收集目录，即项目根目录（BASE_DIR）下的 static 文件夹。</p><p>为了安全起见，在生产环境下需要关闭 DEBUG 选项以及设置允许访问的域名。打开 settings.py 文件，找到 DEBUG 和 ALLOWED_HOSTS 这两个选项，将它们设置成如下的值： </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myblog/settings.py</span><br><span class="line"></span><br><span class="line">DEBUG = False</span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'127.0.0.1'</span>, <span class="string">'localhost '</span>, <span class="string">'.markhoo.com'</span>]</span><br></pre></td></tr></table></figure><p>ALLOWED_HOSTS 是允许访问的域名列表，127.0.0.1 和 localhost 是本地访问的域名，.markhoo.com 是访问服务器的域名（换成你自己的域名）。域名前加一个点表示允许访问该域名下的子域名，比如 <a href="http://www.markhoo.com" target="_blank" rel="noopener">www.markhoo.com</a>  test.markhoo.com 等二级域名同样允许访问。如果不加前面的点则只允许访问 markhoo.com。</p><p>项目还会依赖一些第三方 Python 库，为了方便在服务器上一次性安装，我们将全部依赖写入一个叫 requirements.txt 的文本文件中。激活本地的虚拟环境（如果你使用了虚拟环境的话），并进入项目的根目录，运行 pip freeze &gt; requirements.txt 命令：</p><blockquote><p>(myblog_env) D:\Djangoprojects\myblog&gt;<br>pip freeze &gt; requirements.txt</p></blockquote><p>这时项目根目录下会生成了一个 requirements.txt 的文本文件，其内容记录了项目的全部依赖。由于有一些依赖包也有先后依赖关系，该调整的需要进去txt文件调整一下。</p><p>如果上传到服务器后修改，可以使用 ‘vi (文件名称)’ 打开文件，然后点击键盘 ‘i’ 键切换到输入模式。<br>修改完需要退出，先按键盘 ‘Esc’ 键，然后输入 ‘:wq’ 保存退出。如果不想修改又无法退出可以用 ‘:q!’ 强制退出，这样不会保存你修改的内容<br>更多的vi、vim命令使用方法可以自行到搜索引擎搜索学习，这里就不一一讲解了。</p><h1 id="将代码上传到-GitHub-、-Gitee-、-或者Coding"><a href="/2018/08/14/blogbushu/#将代码上传到-GitHub-、-Gitee-、-或者Coding" class="headerlink" title="将代码上传到 GitHub 、 Gitee 、 或者Coding"></a>将代码上传到 GitHub 、 Gitee 、 或者Coding</h1><p>将代码上传到 GitHub 等代码托管平台，这样我们就可以方便地把代码拉取到服务器了。<br>如果访问慢或者打不开GitHub的话，可以上传到国内的Gitee或者Coding</p><h1 id="Git的安装和上传代码的简单方法"><a href="/2018/08/14/blogbushu/#Git的安装和上传代码的简单方法" class="headerlink" title="Git的安装和上传代码的简单方法"></a>Git的安装和上传代码的简单方法</h1><p>安装Git可以到官网 <a href="https://git-scm.com" target="_blank" rel="noopener">https://git-scm.com</a> 下载，安装的话可以一直下一步，完成。</p><p>首先你需要一个GitHub 、 Gitee 、 或者Coding账号，所以还没有的话先去注册吧！</p><p><a href="https://github.com" target="_blank" rel="noopener">https://github.com</a><br><a href="https://gitee.com" target="_blank" rel="noopener">https://gitee.com</a><br><a href="https://coding.net" target="_blank" rel="noopener">https://coding.net</a></p><p>1.进入Github首页，点击New repository新建一个项目</p><p>2.填写相应信息后点击create即可 </p><p>Repository name: 仓库名称</p><p>Description(可选): 仓库描述介绍</p><p>Public, Private : 仓库权限（公开共享，私有或指定合作者）</p><p>Initialize this repository with a README: 添加一个README.md</p><p>gitignore: 不需要进行版本管理的仓库类型，对应生成文件.gitignore</p><p>license: 证书类型，对应生成文件LICENSE</p><p>一般可以填写项目仓库名称，点击create就可以了。因为免费用户只有 Gitee 才可以创建私有仓库</p><p>3.创建好项目仓库后，在项目仓库页面点击Clone or dowload会出现一个地址，copy这个地址备用。</p><p>4.接下来就到本地操作了，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git Gui Here,Git Bash Here,这里我们选择Git Bash Here进入界面，我的本地项目名为myblog。</p><p>5.接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地</p><blockquote><p>git clone (粘贴上你之前复制的地址)</p></blockquote><p>6.操作步骤5以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，如我多出了个myblogsite文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下。</p><p>7.接着继续输入命令 cd myblogsite，进入myblogsite文件夹</p><p>8.接下来依次输入以下代码即可完成其他剩余操作：</p><blockquote><p>git add .        （注：别忘记后面的.，此操作是把myblogsite文件夹下面的文件都添加进来）<br>git commit  -m  “提交信息”  （注：“提交信息”里面换成你需要，如“first commit”）<br>git push -u origin master   （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入GitHub帐号和密码）</p></blockquote><p>注意：数据库文件不要上传！要是SQLLITE3里面有你测试的重要数据，将可能会泄露。</p><h1 id="设置服务器目录结构"><a href="/2018/08/14/blogbushu/#设置服务器目录结构" class="headerlink" title="设置服务器目录结构"></a>设置服务器目录结构</h1><p>接下来需要把代码上传到服务器了。我服务器上存放代码的目录结构一般是这样的：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/home/<span class="keyword">markhoo/</span></span><br><span class="line"><span class="keyword"> </span>   sites/</span><br><span class="line">        <span class="keyword">markhoo.com/</span></span><br><span class="line"><span class="keyword"> </span>           myblog_env/</span><br><span class="line">            myblog/</span><br></pre></td></tr></table></figure><p>一台服务器可能部署多个网站，所有网站代码都放在 sites/ 目录下。markhoo.com/ 这个文件夹以网站的域名命名，便于区分。myblog_env 是 python 虚拟环境目录。myblog 是 Django 博客项目目录。<br>创建这个目录结构，注意目录名替换为你自己的域名，以后涉及到 markhoo.com 的地方通常都要替换你自己的域名，后面就不再一一指出了。<br>备注：上面的我的目录结构.可能会有新手看不懂，解释一下,就像下面这样一直创建下去</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/home/m</span>arkhoo<span class="regexp">/sites/m</span>arkhoo.com<span class="regexp">/</span></span><br></pre></td></tr></table></figure><p>最后的 myblog_env 和 myblog 是同级目录位于markhoo.com下，这里自己先不要创建。</p><p>创建目录的命令为： mkdir (文件夹名称)<br>删除目录的命令为： rmdir (文件夹名称)</p><h1 id="安装virtualenv"><a href="/2018/08/14/blogbushu/#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h1><p>为了不影响外界环境的清洁，所以我们使用虚拟环境来配置 Django 项目<br>首先用xshell登录到你的服务器，然后按一下步骤操作</p><blockquote><p>pip3 install virtualenv</p></blockquote><p>接下来创建虚拟环境，先进入到 markhoo.com 目录下，然后运行 virtualenv 命令创建虚拟环境：</p><blockquote><p>[root@instance-pkb22o0h]# cd /home/markhoo/sites/markhoo.com<br>[root@instance-pkb22o0h markhoo.com]# virtualenv -p /usr/bin/python3 –-no-site-packages myblog_env</p></blockquote><p>命令说明：<br>-p： 指定你要虚拟的Python版本，这里选择了本地的python3<br>–-no-site-packages：表示在建立虚拟环境时不将原版本中的第三方库拷贝过来，这样就能获得一个纯净的Python环境。<br>myblog_env:表明在该目录下，建立一个叫做myblog_env的虚拟环境，这样的命名方式，让你一眼就能看出这个虚拟环境是为谁建立的。</p><p>virtualenv的命令使用方法：<br>创建虚拟环境： $ virtualenv -p /usr/bin/python3.5 –-no-site-packages myblog_env<br>启动虚拟环境： $ source myblog_env/bin/activate　<br>退出虚拟环境： $ deactivate　<br>删除虚拟环境： $ rm –r myblog_env</p><p>检查一下虚拟环境是否创建成功，运行 ls 命令列出当前目录下的文件和文件夹，看到 myblog_env 这个文件夹说明虚拟环境创建成功。</p><blockquote><p>[root@instance-pkb22o0h markhoo.com]# ls<br>myblog_env</p></blockquote><h1 id="venv的使用"><a href="/2018/08/14/blogbushu/#venv的使用" class="headerlink" title="venv的使用"></a>venv的使用</h1><p>由于我只是测试项目，所以使用了Python自带的venv。<br>先进入到 markhoo.com 目录下，然后运行 python3 -m venv myblog_env 创建虚拟环境：</p><blockquote><p>[root@instance-pkb22o0h]# cd /home/markhoo/sites/markhoo.com<br>[root@instance-pkb22o0h markhoo.com]# python3 -m venv myblog_env</p></blockquote><p>检查一下虚拟环境是否创建成功，运行 ls 命令列出当前目录下的文件和文件夹，看到 myblog_env 这个文件夹说明虚拟环境创建成功。</p><blockquote><p>[root@instance-pkb22o0h markhoo.com]# ls<br>myblog_env</p></blockquote><h1 id="在虚拟环境中安装-django-以及依赖包并初始化项目"><a href="/2018/08/14/blogbushu/#在虚拟环境中安装-django-以及依赖包并初始化项目" class="headerlink" title="在虚拟环境中安装 django 以及依赖包并初始化项目"></a>在虚拟环境中安装 django 以及依赖包并初始化项目</h1><p>接着再从代码仓库把项目代码拉取过来，把 git clone 后的地址换成你自己的 GitHub 仓库地址！</p><blockquote><p>[root@instance-pkb22o0h markhoo.com]# git clone <a href="https://github.com/MarkHoo/myblog.git" target="_blank" rel="noopener">https://github.com/MarkHoo/myblog.git</a></p></blockquote><p>运行 ls 命令检查一下是否拉取成功：</p><blockquote><p>[root@instance-pkb22o0h markhoo.com]# ls<br>myblog  myblog_env</p></blockquote><p>多了 myblog 文件夹（文件夹名称由你的 GitHub 仓库名决定），说明拉取成功了。</p><p>接下来执行命令，启动虚拟环境</p><blockquote><p>[root@instance-pkb22o0h markhoo.com]# source myblog_env/bin/activate<br>(myblog_env) [root@instance-pkb22o0h markhoo.com]# </p></blockquote><p>安装项目环境依赖</p><blockquote><p>(myblog_env) [root@instance-pkb22o0h markhoo.com]# cd myblog<br>(myblog_env) [root@instance-pkb22o0h myblog]# pip3 install -r requirements.txt</p></blockquote><p>收集静态文件<br>运行 python manage.py collectstatic 命令收集静态文件到 static 目录下</p><blockquote><p>(myblog_env) [root@instance-pkb22o0h myblog]# python manage.py collectstatic </p></blockquote><p>生成数据库</p><blockquote><p>(myblog_env) [root@instance-pkb22o0h myblog]# python manage.py migrate</p></blockquote><p>创建超级用户</p><blockquote><p>(myblog_env) [root@instance-pkb22o0h myblog]# python manage.py createsuperuser</p></blockquote><p>然后就会出现以下内容，第一个是用户名，第二个是邮箱，第三和第四是密码（输入时没有任何显示，实际上已经输入了）。最后显示创建成功！</p><blockquote><p>Username (leave blank to use ‘root’): admin<br>Email address: <a href="/2018/08/14/blogbushu/mailto:admin@markhoo.com" target="_blank" rel="noopener">admin@markhoo.com</a><br>Password:<br>Password (again):<br>Superuser created successfully.</p></blockquote><p>备注：这里使用的是Django默认生成的sqlite3数据库，我使用了这个，简单写写博客够用了。</p><p>启动 Django</p><blockquote><p>(myblog_env) [root@instance-pkb22o0h myblog]# python manage.py runserver 0.0.0.0:8000</p></blockquote><p>如果没有报错，就说明 Django 已经安装成功了，打开浏览器输入你的服务器IP：8000，就可以看到你的网站了</p><p>退出 Django</p><p>按 ctrl+c 退出 Django 服务</p><h1 id="安装-Mysql-使用MySQL数据库同学可以借鉴"><a href="/2018/08/14/blogbushu/#安装-Mysql-使用MySQL数据库同学可以借鉴" class="headerlink" title="安装 Mysql (使用MySQL数据库同学可以借鉴)"></a>安装 Mysql (使用MySQL数据库同学可以借鉴)</h1><p>安装并启动 mariadb</p><p>因为 CentOS 7 之后的版本都不在提供 Mysql 安装源，这里我们使用 mariadb 代替 mysql，依次执行下列命令</p><blockquote><p>yum install mariadb mariadb-server -y<br>yum install MySQL-python -y<br>systemctl start mariadb</p></blockquote><p>对 mariadb 进行初始化设置</p><ul><li>执行下面命令，根据提示操作</li><li>设置新密码为 test</li><li>默认密码为空，直接回车即可</li></ul><blockquote><p>mysql_secure_installation</p></blockquote><p>使用设置的密码登陆 mariadb</p><ul><li>登陆 db，这里假设密码被设置为 admin123</li></ul><blockquote><p>mysql -uroot -ptest</p></blockquote><p>创建一个数据库</p><blockquote><p>create database myblog;</p></blockquote><p>成功后，输入 exit 命令退出 db</p><blockquote><p>exit</p></blockquote><p>修改配置文件，与 Mysql 数据库相关联<br>编辑 myblog/settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/1.11/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'myblog'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>:<span class="string">'admin123'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>:<span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>:<span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 Django 数据库</p><blockquote><p>(myblog_env) [root@instance-pkb22o0h myblog]# cd /home/markhoo/sites/markhoo.com/myblog<br>(myblog_env) [root@instance-pkb22o0h myblog]# python manage.py migrate</p></blockquote><p>创建超级用户</p><blockquote><p>(myblog_env) [root@instance-pkb22o0h myblog]# python manage.py createsuperuser</p></blockquote><p>然后就会出现以下内容，第一个是用户名，第二个是邮箱，第三和第四是密码（输入时没有任何显示，实际上已经输入了）。最后显示创建成功！</p><blockquote><p>Username (leave blank to use ‘root’): admin<br>Email address: <a href="/2018/08/14/blogbushu/mailto:admin@markhoo.com" target="_blank" rel="noopener">admin@markhoo.com</a><br>Password:<br>Password (again):<br>Superuser created successfully.</p></blockquote><p>启动 Django</p><blockquote><p>(myblog_env) [root@instance-pkb22o0h myblog]# python manage.py runserver 0.0.0.0:8000</p></blockquote><p>如果没有报错，就说明 Django 已经安装成功了，并且跟 Mysql 的连接正常。打开浏览器输入你的服务器IP：8000，就可以看到你的网站了</p><p>退出 Django</p><p>按 ctrl+c 退出 Django 服务</p><h1 id="使用-Gunicorn"><a href="/2018/08/14/blogbushu/#使用-Gunicorn" class="headerlink" title="使用 Gunicorn"></a>使用 Gunicorn</h1><p>Gunicorn 一般用来管理多个进程，有进程挂了Gunicorn 可以把它拉起来，防止服务器长时间停止服务，还可以动态调整 worker 的数量，请求多的时候增加 worker 的数量，请求少的时候减少。</p><p>在虚拟环境下，安装 Gunicorn：</p><blockquote><p>(myblog_env) [root@instance-pkb22o0h myblog]# pip3 install gunicorn</p></blockquote><p>测试Gunicorn是否能启动你的项目服务</p><blockquote><p>(myblog_env) [root@instance-pkb22o0h myblog]# gunicorn –bind 0.0.0.0:8000 myblog.wsgi:application</p></blockquote><p>注意：myblog.wsgi:application这里的myblog对应的是 /home/markhoo/sites/markhoo.com/myblog/myblog, 根据自己的修改。浏览器输入域名，可以看到访问成功了！</p><p>访问ip地址看浏览器是否能正常查看内容（此时没有退出虚拟环境）<br>完成测试后，按CTRL-C 停止 Gunicorn 运行</p><p>退出虚拟环境</p><blockquote><p>deactivate</p></blockquote><p>创建一个 Gunicorn Systemd Service 文件，直接运行以下命令</p><blockquote><p>vim /etc/systemd/system/gunicorn.service</p></blockquote><p>修改内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=gunicorn daemon</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">User</span>=root</span><br><span class="line"><span class="attr">Group</span>=nginx</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/home/markhoo/sites/markhoo.com/myblog</span><br><span class="line"><span class="attr">ExecStart</span>=/home/markhoo/sites/markhoo.com/myblog_env/bin/gunicorn --workers <span class="number">3</span> --bind unix:/home/markhoo/sites/markhoo.com/myblog/myblog.sock myblog.wsgi:application</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>一定要注意自己的项目路径和虚拟环境路径<br>WorkingDirectory与ExecStart 修改为自己的路径</p><p>开启Gunicorn服务并开机自启,运行以下命令</p><blockquote><p>systemctl start gunicorn<br>systemctl enable gunicorn</p></blockquote><h1 id="配置-Nginx"><a href="/2018/08/14/blogbushu/#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h1><p>接下是配置 Nginx 来处理用户请求</p><p>配置nginx代理通过Gunicorn<br>依次运行以下命令</p><blockquote><p>(myblog_env) [root@instance-pkb22o0h myblog]# cd /etc/nginx/<br>(myblog_env) [root@instance-pkb22o0h nginx]# ls<br>conf.d     fastcgi.conf          fastcgi_params          koi-utf  mime.types          nginx.conf          scgi_params          uwsgi<br>default.d  fastcgi.conf.default  fastcgi_params.default  koi-win  mime.types.default  nginx.conf.default  scgi_params.default  uwsgi<br>(myblog_env) [root@instance-pkb22o0h nginx]# vi nginx.conf<br>或者直接运行<br>vim /etc/nginx/nginx.conf</p></blockquote><p>打开后默认的内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># For more information on configuration, see:</span></span><br><span class="line"><span class="comment">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class="line"><span class="comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span></span><br><span class="line"><span class="attribute">include</span> /usr/share/nginx/modules/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>            <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>          <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>         <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>   <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span>             /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">listen</span>       [::]:<span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">server_name</span>  _;</span><br><span class="line">        <span class="attribute">root</span>         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        <span class="attribute">include</span> /etc/nginx/default.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">            <span class="attribute">location</span> = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">            <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Settings for a TLS enabled server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    server &#123;</span></span><br><span class="line"><span class="comment">#        listen       443 ssl http2 default_server;</span></span><br><span class="line"><span class="comment">#        listen       [::]:443 ssl http2 default_server;</span></span><br><span class="line"><span class="comment">#        server_name  _;</span></span><br><span class="line"><span class="comment">#        root         /usr/share/nginx/html;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        ssl_certificate "/etc/pki/nginx/server.crt";</span></span><br><span class="line"><span class="comment">#        ssl_certificate_key "/etc/pki/nginx/private/server.key";</span></span><br><span class="line"><span class="comment">#        ssl_session_cache shared:SSL:1m;</span></span><br><span class="line"><span class="comment">#        ssl_session_timeout  10m;</span></span><br><span class="line"><span class="comment">#        ssl_ciphers HIGH:!aNULL:!MD5;</span></span><br><span class="line"><span class="comment">#        ssl_prefer_server_ciphers on;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        # Load configuration files for the default server block.</span></span><br><span class="line"><span class="comment">#        include /etc/nginx/default.d/*.conf;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        location / &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 404 /404.html;</span></span><br><span class="line"><span class="comment">#            location = /40x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        error_page 500 502 503 504 /50x.html;</span></span><br><span class="line"><span class="comment">#            location = /50x.html &#123;</span></span><br><span class="line"><span class="comment">#        &#125;</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到server内容进行修改，具体内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  markhoo.com <span class="number">0.0.0.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> = /favicon.ico &#123; <span class="attribute">access_log</span> <span class="literal">off</span>; <span class="attribute">log_not_found</span> <span class="literal">off</span>; &#125;</span><br><span class="line">        <span class="attribute">location</span> /static/ &#123;</span><br><span class="line">        <span class="attribute">root</span> /home/markhoo/sites/markhoo.com/myblog;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://unix:/home/markhoo/sites/markhoo.com/myblog/myblog.sock;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意修改自己的IP地址或域名，还有文件路径<br>server_domain_or_IP 代表你的IP地址或域名</p><ul><li>这里的域名为 markhoo.com，其次一定要添加 0.0.0.0 否则无法访问，两个之间用空格隔开。</li><li>所有URL 带有 /static 的请求均由 Nginx 处理，alias 指明了静态文件的存放目录。</li><li>其它请求转发给 Django 处理。proxy_pass 后面使用了 unix 套接字，其作用是防止端口冲突，这里就不再详述。</li></ul><p>修改所涉及到的vim命令使用方法：使用 ‘vi (文件名称)’ 是打开文件，然后点击键盘 ‘i’ 键切换到输入模式。修改完需要退出vim编辑器，先按键盘 ‘Esc’ 键，然后输入 ‘:wq’ 保存退出。如果不想修改又无法退出可以用 ‘:q!’ 强制退出，这样不会保存你修改的内容。<br>更多的vi、vim命令的具体使用方法可以自行到搜索引擎搜索学习，这里也不一一讲解了。</p><p>修改nginx的权限</p><blockquote><p>usermod -a -G root nginx<br>chmod 710 /home/<br>nginx -t</p></blockquote><p>如果没有报错，就行下一步操作</p><p>开启nginx服务并开机自启</p><blockquote><p>systemctl start nginx<br>systemctl enable nginx</p></blockquote><p>现在，一切配置完成！你可以访问你的域名了！</p>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> Gunicorn </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>xadmin 插件制作</title>
      <link href="/2018/08/03/xadmin/"/>
      <url>/2018/08/03/xadmin/</url>
      <content type="html"><![CDATA[<p>官网太慢甚至打不开，所以干脆转载过来，方便学习。</p><p>======================</p><h2 id="插件原理"><a href="/2018/08/03/xadmin/#插件原理" class="headerlink" title="插件原理"></a>插件原理</h2><p>xadmin 的插件系统架构设计一定程度上借鉴了 <code>wordpress</code> 的设计。 想要了解 |xadmin| 的插件系统架构首先需要了解 |xadmin| <code>AdminView</code> 的概念。<br>简单来说，就是 |xadmin| 系统中每一个页面都是一个 <code>AdminView</code> 对象返回的 <code>HttpResponse</code> 结果。|xadmin| 的插件系统做的事情其实就是在 <code>AdminView</code><br>运行过程中改变其执行的逻辑， 或是改变其返回的结果，起到修改或增强原有功能的效果。下面让我们看看整个插件从制作完成到实际运行的整个过程。</p><p>首先需要创建自己的插件类， 插件类继承 :class:<code>~xadmin.views.BaseAdminPlugin</code> ::</p><pre><code>class HelloWorldPlugin(BaseAdminPlugin):    ...</code></pre><p>开发好的插件首先要注册到 |xadmin| 中， 示例代码如下::</p><pre><code># ListAdminView 是 Model 列表页面xadmin.site.register_plugin(HelloWorldPlugin, ListAdminView)</code></pre><p>其中插件的注册和使用可以参看 :meth:<code>xadmin.sites.AdminSite.register_plugin</code></p><p>当将插件注册到 |xadmin| 后， |xadmin| 在创建 <code>AdminView</code> 实例的时候会将该插件放入实例的 :attr:<code>plugins</code> 属性。当 <code>AdminView</code> 在处理请求<br>时，会首先逐个调用 :attr:<code>plugins</code> 中插件的 :meth:<code>~xadmin.views.BaseAdminPlugin.init_request</code> 方法，插件在该方法中一般进行初始化的操作并且返回一个 Boolean 值告诉 <code>AdminView</code><br>是否需要加载该插件。当 :meth:<code>~xadmin.views.BaseAdminPlugin.init_request</code> 方法返回值为 <code>False</code> 时， <code>AdminView</code> 不会加载该插件。实例如下::</p><pre><code>class HelloWorldPlugin(BaseAdminPlugin):    say_hello = False    # 初始化方法根据 ``say_hello`` 属性值返回    def init_request(self, *args, **kwargs):        return bool(self.say_hello)</code></pre><p>在以上实例中，插件根据自身的 <code>say_hello</code> 属性来决定是否让自己被加载。您可能会迷惑， <code>say_hello</code> 属性看起来一直会是 <code>False</code> 呀，那样这个插件不是永远不会被加载？<br>其实 |xadmin| 在创建插件实例的时候会将 <code>OptionClass</code> 的同名属性替换插件的属性。这样，在不同的 <code>OptionClass</code> 下会有不同的插件结果，实例如下::</p><pre><code>class SomeModelAdmin(object):    say_hello = True    ...site.register(SomeModel, SomeModelAdmin)</code></pre><p>理解以上内容后，让我们再看看插件具体是如何起作用的。在 <code>AdminView</code> 的执行过程中，可以被插件截获或修改的方法使用 :func:<code>~xadmin.views.base.filter_hook</code> 装饰，实例如下::</p><pre><code>class ListAdminView(ModelAdminView):    # 可以被插件截获或修改的方法使用该装饰器装饰    @filter_hook    def get_context(self):        ...</code></pre><p>使用 :func:<code>~xadmin.views.base.filter_hook</code> 装饰的方法执行过程中会根据一定原则执行插件中的同名方法，具体信息查考该装饰器的文档内容。</p><p>.. autofunction:: xadmin.views.base.filter_hook</p><p>根据该装饰器的执行原则，如果我们想修改上面示例中 <code>ListAdminView</code> 的 <code>get_context</code> 的返回值，可以在插件中实现如下代码::</p><pre><code>class HelloWorldPlugin(BaseAdminPlugin):    # 在插件中加入同名方法，修改 ``ListAdminView`` 的 ``get_context`` 返回的值    def get_context(self, context):        context.update({&apos;hello_target&apos;: &apos;World!!&apos;})        return context</code></pre><p>如果我们希望插件在 <code>AdminView</code> 的方法前执行，或是完全使用自己的方法替代 <code>AdminView</code> 的方法可以这样::</p><pre><code>class HelloWorldPlugin(BaseAdminPlugin):    # 第一个参数为 ``__`` 。这样 ``__`` 即为 ``ListAdminView`` 的 ``get_context`` 方法本身，注意，这时还没有执行这个方法。    def get_context(self, __):        context = {&apos;hello_target&apos;: &apos;World!!&apos;}        #我们可以在任何时候执行 ``AdminView`` 的方法，或是根本不执行        context.update(__())        return context</code></pre><p>至此，加入的插件就实现了对 <code>AdminView</code> 方法的完全控制。</p><p><strong>模板插件</strong></p><p>我们知道，Django 中一个完整的 View 是包含模板的，模板用来生成 View 最终返回的 HTML 内容。当然，插件也可以在模板中插入自己的内容。我们来看看具体如何实现。</p><p>首先让我们来看看 |xadmin| 中的模板代码示例片段 (change_list.html):</p><p>.. code-block:: html</p><pre><code>{% load xadmin %}...&lt;form id=&quot;changelist-form&quot; action=&quot;&quot; method=&quot;post&quot;{% view_block 'result_list_form' %}&gt;{% csrf_token %}  {% view_block 'results_top' %}  &lt;div class=&quot;results&quot;&gt;    {% if results %}    ...</code></pre><p>其中的 <code>view_block</code> Tag 即为插件的 <strong>插入点</strong> 。插件可以在自己的插件类中使用 <code>block_</code> + <code>插入点名称</code> 方法将 HTML 片段插入到页面的这个位置，示例如下:</p><p>.. code-block:: python</p><pre><code>class HelloWorldPlugin(BaseAdminPlugin):    # context 即为 TemplateContext， nodes 参数包含了其他插件的返回内容。    # 您可以直接返回 HTML 片段，或是将内容加入到 nodes 参数中    def block_results_top(self, context, nodes):        return s&quot;&lt;div class=&apos;info&apos;&gt;Hello %s&lt;/div&gt;&quot; % context[&apos;hello_target&apos;]</code></pre><h2 id="插件实例"><a href="/2018/08/03/xadmin/#插件实例" class="headerlink" title="插件实例"></a>插件实例</h2><p>下面让我们来看一个 |xadmin| 中完整的插件实例::</p><pre><code>from django.template import loaderfrom xadmin.sites import sitefrom xadmin.views import BaseAdminPlugin, ListAdminViewREFRESH_VAR = &apos;_refresh&apos;# 该插件实现了一个列表页面刷新器的效果class RefreshPlugin(BaseAdminPlugin):    # 用户可以定制刷新的频率，可以传入多个值。该属性会被 ``OptionClass`` 的同名属性替换    refresh_times = []    def init_request(self, *args, **kwargs):        # 根据用户是否制定了刷新器来决定是否启动该插件        return bool(self.refresh_times)    # 插件拦截了返回 Media 的方法，加入自己需要的 js 文件。    def get_media(self, media):        if self.request.GET.get(REFRESH_VAR):            # 放页面处于自动刷新状态时，加入自己的 js 制定刷新逻辑            media.add_js([self.static(&apos;xadmin/js/refresh.js&apos;)])        return media    # Block Views    # 在页面中插入 HTML 片段，显示刷新选项。    def block_top_toolbar(self, context, nodes):        current_refresh = self.request.GET.get(REFRESH_VAR)        context.update({            &apos;has_refresh&apos;: bool(current_refresh),            &apos;clean_refresh_url&apos;: self.admin_view.get_query_string(remove=(REFRESH_VAR,)),            &apos;current_refresh&apos;: current_refresh,            &apos;refresh_times&apos;: [{                &apos;time&apos;: r,                &apos;url&apos;: self.admin_view.get_query_string({REFRESH_VAR: r}),                &apos;selected&apos;: str(r) == current_refresh,            } for r in self.refresh_times],        })        # 可以将 HTML 片段加入 nodes 参数中        nodes.append(loader.render_to_string(&apos;xadmin/blocks/refresh.html&apos;, context_instance=context))# 注册插件site.register_plugin(RefreshPlugin, ListAdminView)</code></pre><p>最后不要忘记在适当的地方加载该代码， 让其执行。一般情况下，你可以将其写到 adminx.py 文件中，这样，只要您的 APP 加入到 Django Settings 的 INSTALL_APPS 中，<br>|xadmin| 就会自动执行 app 下的 adminx.py 文件。</p><h2 id="插件开发"><a href="/2018/08/03/xadmin/#插件开发" class="headerlink" title="插件开发"></a>插件开发</h2><p>了解了插件的运行原理后我们就可以开发自己的插件了。首先我们需要了解插件类中的实用方法。因为插件是继承 :class:<code>~xadmin.views.BaseAdminPlugin</code> 类，而该类继承自<br>:class:<code>~xadmin.views.BaseAdminObject</code>，所以这两个类的方法都可以在插件中使用。</p><p>|xadmin| 在创建插件时会自动注入以下属性到插件实例中:</p><pre><code>* request : Http Request* user : 当前 User 对象* args : View 方法的 args 参数* kwargs : View 方法的 kwargs 参数* admin_view : ``AdminView`` 实例* admin_site : |xadmin| 的 ``admin_site`` 对象实例</code></pre><p>如果 <code>AdminView</code> 是 :class:<code>~xadmin.views.ModelAdminView</code> 的子类，还会自动注入以下属性:</p><pre><code>* model : Model 对象* opts : Model 的 _meta 属性</code></pre><p>接下来您应该考虑打算制作什么功能的插件了。不同功能的插件额能需要注册到不同的 <code>AdminView</code> 上，|xadmin| 系统中<br>主要的 <code>AdminView</code> 有:</p><pre><code>* :class:`~xadmin.views.BaseAdminView` : 所有 ``AdminView`` 的基础类，注册在该 View 上的插件可以影响所有的 ``AdminView``* :class:`~xadmin.views.CommAdminView` : 用户已经登陆后显示的 View，也是所有登陆后 View 的基础类。该 View主要作用是创建了 |xadmin| 的通用元素，例如：系统菜单，用户信息等。插件可以通过注册该 View 来修改这些信息。* :class:`~xadmin.views.ModelAdminView` : 基于 Model 的 ``AdminView`` 的基础类，注册的插件可以影响所有基于 Model 的 View。* :class:`~xadmin.views.ListAdminView` : Model 列表页面 View。* :class:`~xadmin.views.ModelFormAdminView` : Model 编辑页面 View。* :class:`~xadmin.views.CreateAdminView` : Model 创建页面 View。* :class:`~xadmin.views.UpdateAdminView` : Model 修改页面 View。* :class:`~xadmin.views.DeleteAdminView` : Model 删除页面 View。* :class:`~xadmin.views.DetailAdminView` : Model 详情页面 View。</code></pre><p>选择好目标 <code>AdminView</code> 后就要在自己的插件中编写方法来修改或增强这些 <code>AdminView</code> 。其中每个 <code>AdminView</code> 可以<br>拦截的方法及其介绍请参看各 <code>AdminView</code> 的文档。</p><h2 id="插件规范"><a href="/2018/08/03/xadmin/#插件规范" class="headerlink" title="插件规范"></a>插件规范</h2><p><strong>文档模板</strong>::</p><pre><code>&quot;&quot;&quot;Name======作者----该插件的作者信息功能----描述插件的主要功能截图----.. image:: /images/plugins/action.png使用----描述插件的使用方法,  以及使用示例.版本----描述插件的版本信息API---.. autoclass:: XXX&quot;&quot;&quot;</code></pre>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> xadmin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>更换pip源到国内镜像加速python pypi包的安装</title>
      <link href="/2018/07/28/pippypi/"/>
      <url>/2018/07/28/pippypi/</url>
      <content type="html"><![CDATA[<p>昨晚安装Django的时候总是安装到一半就报错，而且速度很慢，问题主要是国外的源连接不稳定会中断所致。后来就想到了切换到国内源。想到可能还会有同学碰到类似的问题，特此记录分享一下</p><h1 id="pip国内的一些镜像"><a href="/2018/07/28/pippypi/#pip国内的一些镜像" class="headerlink" title="pip国内的一些镜像"></a>pip国内的一些镜像</h1><p>公网：<a href="http://e.pypi.python.org/simple" target="_blank" rel="noopener">http://e.pypi.python.org/simple</a><br>教育网：<a href="http://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">http://pypi.tuna.tsinghua.edu.cn/simple</a><br>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>豆瓣(douban) <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a><br>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>华中理工大学<a href="http://pypi.hustunique.com/simple" target="_blank" rel="noopener">http://pypi.hustunique.com/simple</a><br>山东理工大学<a href="http://pypi.sdutlinux.org/simple" target="_blank" rel="noopener">http://pypi.sdutlinux.org/simple</a>  </p><h1 id="修改源方法："><a href="/2018/07/28/pippypi/#修改源方法：" class="headerlink" title="修改源方法："></a>修改源方法：</h1><h2 id="临时使用："><a href="/2018/07/28/pippypi/#临时使用：" class="headerlink" title="临时使用："></a>临时使用：</h2><p>可以在使用pip的时候在后面加上-i参数，指定pip源  </p><blockquote><p>pip install scrapy -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p></blockquote><p>指定需要安装的库requirements.txt</p><blockquote><p>pip install -r “/home/admin/$APP_NAME/conf/requirements.txt” -i  “<a href="http://mirrors.aliyun.com/pypi/simple&quot;" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple&quot;</a> –trusted-host “mirrors.aliyun.com” &amp;&amp; \ #通过阿里云镜像安装三方库</p></blockquote><h2 id="永久修改："><a href="/2018/07/28/pippypi/#永久修改：" class="headerlink" title="永久修改："></a>永久修改：</h2><h3 id="Linux"><a href="/2018/07/28/pippypi/#Linux" class="headerlink" title="Linux:"></a>Linux:</h3><p>修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url = http<span class="variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br></pre></td></tr></table></figure></p><h3 id="Windows"><a href="/2018/07/28/pippypi/#Windows" class="headerlink" title="Windows:"></a>Windows:</h3><p>直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini，内容如下<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url = http<span class="variable">s:</span>//pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://pip.pypa.io/en/latest/configuration/" target="_blank" rel="noopener">https://pip.pypa.io/en/latest/configuration/</a></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python学习资源</title>
      <link href="/2018/07/22/Pyziyuan/"/>
      <url>/2018/07/22/Pyziyuan/</url>
      <content type="html"><![CDATA[<p>GitHub star过万的Python学习资源。有空慢慢翻译，或者使用翻译插件查看</p><p>A curated list of awesome Python frameworks, libraries, software and resources.</p><p>Inspired by <a href="https://github.com/ziadoz/awesome-php" target="_blank" rel="noopener">awesome-php</a></p><hr><h2 id="Admin-Panels"><a href="/2018/07/22/Pyziyuan/#Admin-Panels" class="headerlink" title="Admin Panels"></a>Admin Panels</h2><p><em>Libraries for administrative interfaces.</em></p><ul><li><a href="https://github.com/ajenti/ajenti" target="_blank" rel="noopener">Ajenti</a> - The admin panel your servers deserve.</li><li><a href="http://djangosuit.com/" target="_blank" rel="noopener">django-suit</a> - Alternative Django Admin-Interface (free only for Non-commercial use).</li><li><a href="https://github.com/sshwsfc/xadmin" target="_blank" rel="noopener">django-xadmin</a> - Drop-in replacement of Django admin comes with lots of goodies.</li><li><a href="https://github.com/flask-admin/flask-admin" target="_blank" rel="noopener">flask-admin</a> - Simple and extensible administrative interface framework for Flask.</li><li><a href="https://github.com/mher/flower" target="_blank" rel="noopener">flower</a> - Real-time monitor and web admin for Celery.</li><li><a href="http://grappelliproject.com" target="_blank" rel="noopener">Grappelli</a> - A jazzy skin for the Django Admin-Interface.</li><li><a href="https://github.com/wooey/wooey" target="_blank" rel="noopener">Wooey</a> - A Django app which creates automatic web UIs for Python scripts.</li></ul><h2 id="Algorithms-and-Design-Patterns"><a href="/2018/07/22/Pyziyuan/#Algorithms-and-Design-Patterns" class="headerlink" title="Algorithms and Design Patterns"></a>Algorithms and Design Patterns</h2><p><em>Python implementation of algorithms and design patterns.</em></p><ul><li><a href="https://github.com/keon/algorithms" target="_blank" rel="noopener">algorithms</a> - Minimal examples of data structures and algorithms in Python.</li><li><a href="https://github.com/tylerlaberge/PyPattyrn" target="_blank" rel="noopener">PyPattyrn</a> - A simple yet effective library for implementing common design patterns.</li><li><a href="https://github.com/faif/python-patterns" target="_blank" rel="noopener">python-patterns</a> - A collection of design patterns in Python.</li><li><a href="http://www.grantjenks.com/docs/sortedcontainers/" target="_blank" rel="noopener">sortedcontainers</a> - Fast, pure-Python implementation of SortedList, SortedDict, and SortedSet types.</li><li><a href="https://github.com/soravux/scoop" target="_blank" rel="noopener">SCOOP</a> - Scalable Concurrent Operations in Python.</li></ul><h2 id="Anti-spam"><a href="/2018/07/22/Pyziyuan/#Anti-spam" class="headerlink" title="Anti-spam"></a>Anti-spam</h2><p><em>Libraries for fighting spam.</em></p><ul><li><a href="https://github.com/mbi/django-simple-captcha" target="_blank" rel="noopener">django-simple-captcha</a> - A simple and highly customizable Django app to add captcha images to any Django form.</li><li><a href="https://github.com/moqada/django-simple-spam-blocker" target="_blank" rel="noopener">django-simple-spam-blocker</a> - Simple spam blocker for Django.</li></ul><h2 id="Asset-Management"><a href="/2018/07/22/Pyziyuan/#Asset-Management" class="headerlink" title="Asset Management"></a>Asset Management</h2><p><em>Tools for managing, compressing and minifying website assets.</em></p><ul><li><a href="https://github.com/django-compressor/django-compressor" target="_blank" rel="noopener">django-compressor</a> - Compresses linked and inline JavaScript or CSS into a single cached file.</li><li><a href="https://github.com/jazzband/django-pipeline" target="_blank" rel="noopener">django-pipeline</a> - An asset packaging library for Django.</li><li><a href="https://github.com/jschneier/django-storages" target="_blank" rel="noopener">django-storages</a> - A collection of custom storage back ends for Django.</li><li><a href="http://www.fanstatic.org/en/latest/" target="_blank" rel="noopener">fanstatic</a> - Packages, optimizes, and serves static file dependencies as Python packages.</li><li><a href="http://wimleers.com/fileconveyor" target="_blank" rel="noopener">fileconveyor</a> - A daemon to detect and sync files to CDNs, S3 and FTP.</li><li><a href="https://github.com/miracle2k/flask-assets" target="_blank" rel="noopener">flask-assets</a> - Helps you integrate webassets into your Flask app.</li><li><a href="https://github.com/jaysonsantos/jinja-assets-compressor" target="_blank" rel="noopener">jinja-assets-compressor</a> - A Jinja extension to compile and compress your assets.</li><li><a href="https://github.com/miracle2k/webassets" target="_blank" rel="noopener">webassets</a> - Bundles, optimizes, and manages unique cache-busting URLs for static resources.</li></ul><h2 id="Audio"><a href="/2018/07/22/Pyziyuan/#Audio" class="headerlink" title="Audio"></a>Audio</h2><p><em>Libraries for manipulating audio.</em></p><ul><li><a href="https://github.com/danilobellini/audiolazy" target="_blank" rel="noopener">audiolazy</a> - Expressive Digital Signal Processing (DSP) package for Python.</li><li><a href="https://github.com/beetbox/audioread" target="_blank" rel="noopener">audioread</a> - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding.</li><li><a href="http://beets.io/" target="_blank" rel="noopener">beets</a> - A music library manager and <a href="https://musicbrainz.org/" target="_blank" rel="noopener">MusicBrainz</a> tagger.</li><li><a href="https://github.com/worldveil/dejavu" target="_blank" rel="noopener">dejavu</a> - Audio fingerprinting and recognition.</li><li><a href="https://github.com/StreetVoice/django-elastic-transcoder" target="_blank" rel="noopener">django-elastic-transcoder</a> - Django + <a href="https://aws.amazon.com/elastictranscoder/" target="_blank" rel="noopener">Amazon Elastic Transcoder</a>.</li><li><a href="http://eyed3.nicfit.net/" target="_blank" rel="noopener">eyeD3</a> - A tool for working with audio files, specifically MP3 files containing ID3 metadata.</li><li><a href="https://nedbatchelder.com/code/modules/id3reader.py" target="_blank" rel="noopener">id3reader</a> - A Python module for reading MP3 meta data.</li><li><a href="https://github.com/globocom/m3u8" target="_blank" rel="noopener">m3u8</a> - A module for parsing m3u8 file.</li><li><a href="http://bspaans.github.io/python-mingus/" target="_blank" rel="noopener">mingus</a> - An advanced music theory and notation package with MIDI file and playback support.</li><li><a href="https://github.com/quodlibet/mutagen" target="_blank" rel="noopener">mutagen</a> - A Python module to handle audio metadata.</li><li><a href="https://github.com/tyiannak/pyAudioAnalysis" target="_blank" rel="noopener">pyAudioAnalysis</a> - Python Audio Analysis Library: Feature Extraction, Classification, Segmentation and Applications</li><li><a href="https://github.com/jiaaro/pydub" target="_blank" rel="noopener">pydub</a> - Manipulate audio with a simple and easy high level interface.</li><li><a href="https://github.com/echonest/pyechonest" target="_blank" rel="noopener">pyechonest</a> - Python client for the <a href="http://static.echonest.com/enspex/" target="_blank" rel="noopener">Echo Nest</a> API.</li><li><a href="http://scikits.appspot.com/talkbox" target="_blank" rel="noopener">talkbox</a> - A Python library for speech/signal processing.</li><li><a href="https://github.com/Parisson/TimeSide" target="_blank" rel="noopener">TimeSide</a> - Open web audio processing framework.</li><li><a href="https://github.com/devsnd/tinytag" target="_blank" rel="noopener">tinytag</a> - A library for reading music meta data of MP3, OGG, FLAC and Wave files.</li></ul><h2 id="Authentication"><a href="/2018/07/22/Pyziyuan/#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p><em>Libraries for implementing authentications schemes.</em></p><ul><li>OAuth<ul><li><a href="https://github.com/authomatic/authomatic" target="_blank" rel="noopener">Authomatic</a> - Simple but powerful framework agnostic authentication/authorization client.</li><li><a href="https://github.com/pennersr/django-allauth" target="_blank" rel="noopener">django-allauth</a> - Authentication app for Django that “just works.”</li><li><a href="https://github.com/evonove/django-oauth-toolkit" target="_blank" rel="noopener">django-oauth-toolkit</a> - OAuth 2 goodies for Django.</li><li><a href="https://github.com/lepture/flask-oauthlib" target="_blank" rel="noopener">Flask-OAuthlib</a> - OAuth 1.0/a, 2.0 implementation of client and provider for Flask.</li><li><a href="https://github.com/idan/oauthlib" target="_blank" rel="noopener">OAuthLib</a> - A generic and thorough implementation of the OAuth request-signing logic.</li><li><a href="https://github.com/joestump/python-oauth2" target="_blank" rel="noopener">python-oauth2</a> - A fully tested, abstract interface to creating OAuth clients and servers.</li><li><a href="https://github.com/omab/python-social-auth" target="_blank" rel="noopener">python-social-auth</a> - An easy-to-setup social authentication mechanism.</li><li><a href="https://github.com/litl/rauth" target="_blank" rel="noopener">rauth</a> - A Python library for OAuth 1.0/a, 2.0, and Ofly.</li><li><a href="https://github.com/demianbrecht/sanction" target="_blank" rel="noopener">sanction</a> - A dead simple OAuth2 client implementation.</li></ul></li><li>Others<ul><li><a href="https://github.com/demonware/jose" target="_blank" rel="noopener">jose</a> - JavaScript Object Signing and Encryption draft implementation.</li><li><a href="https://github.com/jpadilla/pyjwt" target="_blank" rel="noopener">PyJWT</a> - Implementation of the JSON Web Token draft 01.</li><li><a href="https://github.com/brianloveswords/python-jws" target="_blank" rel="noopener">python-jws</a> - Implementation of JSON Web Signatures draft 02.</li><li><a href="https://github.com/davedoesdev/python-jwt" target="_blank" rel="noopener">python-jwt</a> - Module for generating and verifying JSON Web Tokens.</li></ul></li></ul><h2 id="Build-Tools"><a href="/2018/07/22/Pyziyuan/#Build-Tools" class="headerlink" title="Build Tools"></a>Build Tools</h2><p><em>Compile software from source code.</em></p><ul><li><a href="http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html" target="_blank" rel="noopener">BitBake</a> - A make-like build tool for embedded Linux.</li><li><a href="http://www.buildout.org/en/latest/" target="_blank" rel="noopener">buildout</a> - A build system for creating, assembling and deploying applications from multiple parts.</li><li><a href="https://github.com/platformio/platformio-core" target="_blank" rel="noopener">PlatformIO</a> - A console tool to build code with different development platforms.</li><li><a href="https://github.com/pybuilder/pybuilder" target="_blank" rel="noopener">PyBuilder</a> - A continuous build tool written in pure Python.</li><li><a href="http://www.scons.org/" target="_blank" rel="noopener">SCons</a> - A software construction tool.</li></ul><h2 id="Built-in-Classes-Enhancement"><a href="/2018/07/22/Pyziyuan/#Built-in-Classes-Enhancement" class="headerlink" title="Built-in Classes Enhancement"></a>Built-in Classes Enhancement</h2><p><em>Libraries for enhancing Python built-in classes.</em></p><ul><li><a href="https://github.com/python-attrs/attrs" target="_blank" rel="noopener">attrs</a> - Replacement for <code>__init__</code>, <code>__eq__</code>, <code>__repr__</code>, etc. boilerplate in class definitions.</li><li><a href="https://github.com/jab/bidict" target="_blank" rel="noopener">bidict</a> - Efficient, Pythonic bidirectional map data structures and related functionality..</li><li><a href="https://github.com/cdgriffith/Box" target="_blank" rel="noopener">Box</a> - Python dictionaries with advanced dot notation access.</li><li><a href="https://github.com/carlosescri/DottedDict" target="_blank" rel="noopener">dotted</a> - A library that provides a method of accessing lists and dicts with a dotted path notation.</li></ul><h2 id="CMS"><a href="/2018/07/22/Pyziyuan/#CMS" class="headerlink" title="CMS"></a>CMS</h2><p><em>Content Management Systems.</em></p><ul><li><a href="https://www.django-cms.org/en/" target="_blank" rel="noopener">django-cms</a> - An Open source enterprise CMS based on the Django.</li><li><a href="http://djedi-cms.org/" target="_blank" rel="noopener">djedi-cms</a> - A lightweight but yet powerful Django CMS with plugins, inline editing and performance in mind.</li><li><a href="http://www.feincms.org/" target="_blank" rel="noopener">FeinCMS</a> - One of the most advanced Content Management Systems built on Django.</li><li><a href="http://kotti.pylonsproject.org/" target="_blank" rel="noopener">Kotti</a> - A high-level, Pythonic web application framework built on Pyramid.</li><li><a href="http://mezzanine.jupo.org/" target="_blank" rel="noopener">Mezzanine</a> - A powerful, consistent, and flexible content management platform.</li><li><a href="http://opps.github.io/opps/" target="_blank" rel="noopener">Opps</a> - A Django-based CMS for magazines, newspapers websites and portals with high-traffic.</li><li><a href="https://plone.org/" target="_blank" rel="noopener">Plone</a> - A CMS built on top of the open source application server Zope.</li><li><a href="http://quokkaproject.org/" target="_blank" rel="noopener">Quokka</a> - Flexible, extensible, small CMS powered by Flask and MongoDB.</li><li><a href="https://wagtail.io/" target="_blank" rel="noopener">Wagtail</a> - A Django content management system.</li><li><a href="https://wid.gy/" target="_blank" rel="noopener">Widgy</a> - Last CMS framework, based on Django.</li></ul><h2 id="Caching"><a href="/2018/07/22/Pyziyuan/#Caching" class="headerlink" title="Caching"></a>Caching</h2><p><em>Libraries for caching data.</em></p><ul><li><a href="https://github.com/bbangert/beaker" target="_blank" rel="noopener">Beaker</a> - A library for caching and sessions for use with web applications and stand-alone Python scripts and applications.</li><li><a href="http://www.grantjenks.com/docs/diskcache/" target="_blank" rel="noopener">DiskCache</a> - SQLite and file backed cache backend with faster lookups than memcached and redis.</li><li><a href="https://github.com/django-cache-machine/django-cache-machine" target="_blank" rel="noopener">django-cache-machine</a> - Automatic caching and invalidation for Django models.</li><li><a href="https://github.com/Suor/django-cacheops" target="_blank" rel="noopener">django-cacheops</a> - A slick ORM cache with automatic granular event-driven invalidation.</li><li><a href="https://github.com/5monkeys/django-viewlet" target="_blank" rel="noopener">django-viewlet</a> - Render template parts with extended cache control.</li><li><a href="http://dogpilecache.readthedocs.io/en/latest/" target="_blank" rel="noopener">dogpile.cache</a> - dogpile.cache is next generation replacement for Beaker made by same authors.</li><li><a href="https://pypi.python.org/pypi/HermesCache" target="_blank" rel="noopener">HermesCache</a> - Python caching library with tag-based invalidation and dogpile effect prevention.</li><li><a href="https://github.com/jmoiron/johnny-cache" target="_blank" rel="noopener">johnny-cache</a> - A caching framework for Django applications.</li><li><a href="https://github.com/lericson/pylibmc" target="_blank" rel="noopener">pylibmc</a> - A Python wrapper around the <a href="http://libmemcached.org/libMemcached.html" target="_blank" rel="noopener">libmemcached</a> interface.</li></ul><h2 id="ChatOps-Tools"><a href="/2018/07/22/Pyziyuan/#ChatOps-Tools" class="headerlink" title="ChatOps Tools"></a>ChatOps Tools</h2><p><em>Libraries for chatbot development.</em></p><ul><li><a href="http://errbot.io/en/latest/" target="_blank" rel="noopener">Errbot</a> - The easiest and most popular chatbot to implement ChatOps.</li></ul><h2 id="Code-Analysis"><a href="/2018/07/22/Pyziyuan/#Code-Analysis" class="headerlink" title="Code Analysis"></a>Code Analysis</h2><p><em>Tools of static analysis, linters and code quality checkers. See: <a href="https://github.com/mre/awesome-static-analysis" target="_blank" rel="noopener">awesome-static-analysis</a>.</em></p><ul><li>Code Analysis<ul><li><a href="https://pypi.python.org/pypi/flake8" target="_blank" rel="noopener">flake8</a> - A wrapper around pycodestyle, pyflakes and McCabe.</li><li><a href="http://coala.io/" target="_blank" rel="noopener">coala</a> - Language independent and easily extendable code analysis application.</li><li><a href="https://github.com/scottrogowski/code2flow" target="_blank" rel="noopener">code2flow</a> - Turn your Python and JavaScript code into DOT flowcharts.</li><li><a href="https://github.com/landscapeio/prospector" target="_blank" rel="noopener">prospector</a> - A tool to analyse Python code.</li><li><a href="https://github.com/gak/pycallgraph" target="_blank" rel="noopener">pycallgraph</a> - A library that visualises the flow (call graph) of your Python application.</li><li><a href="https://github.com/klen/pylama" target="_blank" rel="noopener">pylama</a> - A code audit tool for Python and JavaScript.</li><li><a href="https://www.pylint.org/" target="_blank" rel="noopener">pylint</a> - A fully customizable source code analyzer.</li></ul></li><li>Static Type Checkers<ul><li><a href="http://mypy-lang.org/" target="_blank" rel="noopener">mypy</a> - Check variable types during compile time.</li><li><a href="https://github.com/facebook/pyre-check" target="_blank" rel="noopener">Pyre</a> - Performant type checking.</li></ul></li><li>Static Type Annotations Generators<ul><li><a href="https://github.com/Instagram/MonkeyType" target="_blank" rel="noopener">MonkeyType</a> - A system for Python that generates static type annotations by collecting runtime types</li></ul></li></ul><h2 id="Command-line-Tools"><a href="/2018/07/22/Pyziyuan/#Command-line-Tools" class="headerlink" title="Command-line Tools"></a>Command-line Tools</h2><p><em>Libraries for building command-line application.</em></p><ul><li>Command-line Application Development<ul><li><a href="https://github.com/peterbrittain/asciimatics" target="_blank" rel="noopener">asciimatics</a> - A package to create full-screen text UIs (from interactive forms to ASCII animations).</li><li><a href="https://github.com/glamp/bashplotlib" target="_blank" rel="noopener">bashplotlib</a> - Making basic plots in the terminal.</li><li><a href="http://builtoncement.com/" target="_blank" rel="noopener">cement</a> - CLI Application Framework for Python.</li><li><a href="http://click.pocoo.org/dev/" target="_blank" rel="noopener">click</a> - A package for creating beautiful command line interfaces in a composable way.</li><li><a href="https://docs.openstack.org/developer/cliff/" target="_blank" rel="noopener">cliff</a> - A framework for creating command-line programs with multi-level commands.</li><li><a href="https://github.com/kennethreitz/clint" target="_blank" rel="noopener">clint</a> - Python Command-line Application Tools.</li><li><a href="https://pypi.python.org/pypi/colorama" target="_blank" rel="noopener">colorama</a> - Cross-platform colored terminal text.</li><li><a href="http://docopt.org/" target="_blank" rel="noopener">docopt</a> - Pythonic command line arguments parser.</li><li><a href="https://github.com/chriskiehl/Gooey" target="_blank" rel="noopener">Gooey</a> - Turn command line programs into a full GUI application with one line</li><li><a href="https://github.com/google/python-fire" target="_blank" rel="noopener">Python-Fire</a> - A library for creating command line interfaces from absolutely any Python object.</li><li><a href="https://github.com/jonathanslenders/python-prompt-toolkit" target="_blank" rel="noopener">python-prompt-toolkit</a> - A library for building powerful interactive command lines.</li></ul></li><li>Productivity Tools<ul><li><a href="https://github.com/aws/aws-cli" target="_blank" rel="noopener">aws-cli</a> - A universal command-line interface for Amazon Web Services.</li><li><a href="https://github.com/audreyr/cookiecutter" target="_blank" rel="noopener">cookiecutter</a> - A command-line utility that creates projects from cookiecutters (project templates).</li><li><a href="https://github.com/sloria/doitlive" target="_blank" rel="noopener">doitlive</a> - A tool for live presentations in the terminal.</li><li><a href="https://github.com/gleitz/howdoi" target="_blank" rel="noopener">howdoi</a> - Instant coding answers via the command line.</li><li><a href="https://github.com/jakubroztocil/httpie" target="_blank" rel="noopener">httpie</a> - A command line HTTP client, a user-friendly cURL replacement.</li><li><a href="https://github.com/cloudnativelabs/kube-shell" target="_blank" rel="noopener">kube-shell</a> - An integrated shell for working with the Kubernetes CLI.</li><li><a href="https://github.com/dbcli/mycli" target="_blank" rel="noopener">mycli</a> - A Terminal Client for MySQL with AutoCompletion and Syntax Highlighting.</li><li><a href="https://github.com/facebook/PathPicker" target="_blank" rel="noopener">PathPicker</a> - Select files out of bash output.</li><li><a href="https://github.com/mooz/percol" target="_blank" rel="noopener">percol</a> - Adds flavor of interactive selection to the traditional pipe concept on UNIX.</li><li><a href="https://github.com/dbcli/pgcli" target="_blank" rel="noopener">pgcli</a> - Postgres CLI with autocompletion and syntax highlighting.</li><li><a href="https://github.com/donnemartin/saws" target="_blank" rel="noopener">SAWS</a> - A Supercharged AWS CLI.</li><li><a href="https://github.com/nvbn/thefuck" target="_blank" rel="noopener">thefuck</a> - Correcting your previous console command.</li><li><a href="https://github.com/tony/tmuxp" target="_blank" rel="noopener">tmuxp</a> - A <a href="https://github.com/tmux/tmux" target="_blank" rel="noopener">tmux</a> session manager.</li><li><a href="https://github.com/timofurrer/try" target="_blank" rel="noopener">try</a> - A dead simple CLI to try out python packages - it’s never been easier.</li></ul></li></ul><h2 id="Compatibility"><a href="/2018/07/22/Pyziyuan/#Compatibility" class="headerlink" title="Compatibility"></a>Compatibility</h2><p><em>Libraries for migrating from Python 2 to 3.</em></p><ul><li><a href="http://python-future.org/index.html" target="_blank" rel="noopener">Python-Future</a> - The missing compatibility layer between Python 2 and Python 3.</li><li><a href="https://github.com/mitsuhiko/python-modernize" target="_blank" rel="noopener">Python-Modernize</a> - Modernizes Python code for eventual Python 3 migration.</li><li><a href="https://pypi.python.org/pypi/six" target="_blank" rel="noopener">Six</a> - Python 2 and 3 compatibility utilities.</li></ul><h2 id="Computer-Vision"><a href="/2018/07/22/Pyziyuan/#Computer-Vision" class="headerlink" title="Computer Vision"></a>Computer Vision</h2><p><em>Libraries for computer vision.</em></p><ul><li><a href="http://opencv.org/" target="_blank" rel="noopener">OpenCV</a> - Open Source Computer Vision Library.</li><li><a href="https://github.com/openpaperwork/pyocr" target="_blank" rel="noopener">pyocr</a> - A wrapper for Tesseract and Cuneiform.</li><li><a href="https://github.com/madmaze/pytesseract" target="_blank" rel="noopener">pytesseract</a> - Another wrapper for <a href="https://github.com/tesseract-ocr" target="_blank" rel="noopener">Google Tesseract OCR</a>.</li><li><a href="http://simplecv.org/" target="_blank" rel="noopener">SimpleCV</a> - An open source framework for building computer vision applications.</li></ul><h2 id="Concurrency-and-Parallelism"><a href="/2018/07/22/Pyziyuan/#Concurrency-and-Parallelism" class="headerlink" title="Concurrency and Parallelism"></a>Concurrency and Parallelism</h2><p><em>Libraries for concurrent and parallel execution.</em></p><ul><li><a href="http://eventlet.net/" target="_blank" rel="noopener">eventlet</a> - Asynchronous framework with WSGI support.</li><li><a href="http://www.gevent.org/" target="_blank" rel="noopener">gevent</a> - A coroutine-based Python networking library that uses <a href="https://github.com/python-greenlet/greenlet" target="_blank" rel="noopener">greenlet</a>.</li><li><a href="https://docs.python.org/3/library/multiprocessing.html" target="_blank" rel="noopener">multiprocessing</a> - (Python standard library) Process-based “threading” interface.</li><li><a href="https://docs.python.org/3/library/threading.html" target="_blank" rel="noopener">threading</a> - (Python standard library) Higher-level threading interface.</li><li><a href="https://github.com/madisonmay/Tomorrow" target="_blank" rel="noopener">Tomorrow</a> - Magic decorator syntax for asynchronous code.</li><li><a href="https://github.com/MagicStack/uvloop" target="_blank" rel="noopener">uvloop</a> - Ultra fast implementation of asyncio event loop on top of libuv.</li></ul><h2 id="Configuration"><a href="/2018/07/22/Pyziyuan/#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p><em>Libraries for storing and parsing configuration options.</em></p><ul><li><a href="https://www.red-dove.com/config-doc/" target="_blank" rel="noopener">config</a> - Hierarchical config from the author of <a href="https://docs.python.org/3/library/logging.html" target="_blank" rel="noopener">logging</a>.</li><li><a href="http://www.voidspace.org.uk/python/configobj.html" target="_blank" rel="noopener">ConfigObj</a> - INI file parser with validation.</li><li><a href="https://docs.python.org/3/library/configparser.html" target="_blank" rel="noopener">ConfigParser</a> - (Python standard library) INI file parser.</li><li><a href="http://profig.readthedocs.org/en/default/" target="_blank" rel="noopener">profig</a> - Config from multiple formats with value conversion.</li><li><a href="https://github.com/henriquebastos/python-decouple" target="_blank" rel="noopener">python-decouple</a> - Strict separation of settings from code.</li></ul><h2 id="Cryptography"><a href="/2018/07/22/Pyziyuan/#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h2><ul><li><a href="https://cryptography.io/en/latest/" target="_blank" rel="noopener">cryptography</a> - A package designed to expose cryptographic primitives and recipes to Python developers.</li><li><a href="https://github.com/davidaurelio/hashids-python" target="_blank" rel="noopener">hashids</a> - Implementation of <a href="http://hashids.org" target="_blank" rel="noopener">hashids</a> in Python.</li><li><a href="http://www.paramiko.org/" target="_blank" rel="noopener">Paramiko</a> - A Python (2.6+, 3.3+) implementation of the SSHv2 protocol, providing both client and server functionality.</li><li><a href="https://pythonhosted.org/passlib/" target="_blank" rel="noopener">Passlib</a> - Secure password storage/hashing library, very high level.</li><li><a href="https://github.com/pyca/pynacl" target="_blank" rel="noopener">PyNacl</a> - Python binding to the Networking and Cryptography (NaCl) library.</li></ul><h2 id="Data-Analysis"><a href="/2018/07/22/Pyziyuan/#Data-Analysis" class="headerlink" title="Data Analysis"></a>Data Analysis</h2><p><em>Libraries for data analyzing.</em></p><ul><li><a href="https://github.com/blaze/blaze" target="_blank" rel="noopener">Blaze</a> - NumPy and Pandas interface to Big Data.</li><li><a href="https://github.com/mining/mining" target="_blank" rel="noopener">Open Mining</a> - Business Intelligence (BI) in Pandas interface.</li><li><a href="https://orange.biolab.si/" target="_blank" rel="noopener">Orange</a> - Data mining, data visualization, analysis and machine learning through visual programming or scripts.</li><li><a href="http://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> - A library providing high-performance, easy-to-use data structures and data analysis tools.</li><li><a href="https://github.com/ironmussa/Optimus" target="_blank" rel="noopener">Optimus</a> - Cleansing, pre-processing, feature engineering, exploratory data analysis and easy Machine Learning with a PySpark backend. </li></ul><h2 id="Data-Validation"><a href="/2018/07/22/Pyziyuan/#Data-Validation" class="headerlink" title="Data Validation"></a>Data Validation</h2><p><em>Libraries for validating data. Used for forms in many cases.</em></p><ul><li><a href="https://github.com/pyeve/cerberus" target="_blank" rel="noopener">Cerberus</a> - A lightweight and extensible data validation library.</li><li><a href="https://docs.pylonsproject.org/projects/colander/en/latest/" target="_blank" rel="noopener">colander</a> - Validating and deserializing data obtained via XML, JSON, an HTML form post.</li><li><a href="https://github.com/Julian/jsonschema" target="_blank" rel="noopener">jsonschema</a> - An implementation of <a href="http://json-schema.org/" target="_blank" rel="noopener">JSON Schema</a> for Python.</li><li><a href="https://github.com/keleshev/schema" target="_blank" rel="noopener">schema</a> - A library for validating Python data structures.</li><li><a href="https://github.com/schematics/schematics" target="_blank" rel="noopener">Schematics</a> - Data Structure Validation.</li><li><a href="https://github.com/podio/valideer" target="_blank" rel="noopener">valideer</a> - Lightweight extensible data validation and adaptation library.</li><li><a href="https://github.com/alecthomas/voluptuous" target="_blank" rel="noopener">voluptuous</a> - A Python data validation library.</li></ul><h2 id="Data-Visualization"><a href="/2018/07/22/Pyziyuan/#Data-Visualization" class="headerlink" title="Data Visualization"></a>Data Visualization</h2><p><em>Libraries for visualizing data. See: <a href="https://github.com/sorrycc/awesome-javascript#data-visualization" target="_blank" rel="noopener">awesome-javascript</a>.</em></p><ul><li><a href="https://github.com/altair-viz/altair" target="_blank" rel="noopener">Altair</a> - Declarative statistical visualization library for Python.</li><li><a href="https://github.com/bokeh/bokeh" target="_blank" rel="noopener">Bokeh</a> - Interactive Web Plotting for Python.</li><li><a href="https://github.com/bloomberg/bqplot" target="_blank" rel="noopener">bqplot</a> - Interactive Plotting Library for the Jupyter Notebook</li><li><a href="https://github.com/yhat/ggpy" target="_blank" rel="noopener">ggplot</a> - Same API as ggplot2 for R.</li><li><a href="http://matplotlib.org/" target="_blank" rel="noopener">Matplotlib</a> - A Python 2D plotting library.</li><li><a href="http://www.pygal.org/en/latest/" target="_blank" rel="noopener">Pygal</a> - A Python SVG Charts Creator.</li><li><a href="https://pypi.python.org/pypi/pygraphviz" target="_blank" rel="noopener">PyGraphviz</a> - Python interface to <a href="http://www.graphviz.org/" target="_blank" rel="noopener">Graphviz</a>.</li><li><a href="http://www.pyqtgraph.org/" target="_blank" rel="noopener">PyQtGraph</a> - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets.</li><li><a href="https://github.com/mwaskom/seaborn" target="_blank" rel="noopener">Seaborn</a> - Statistical data visualization using Matplotlib.</li><li><a href="https://github.com/vispy/vispy" target="_blank" rel="noopener">VisPy</a> - High-performance scientific visualization based on OpenGL.</li></ul><h2 id="Database"><a href="/2018/07/22/Pyziyuan/#Database" class="headerlink" title="Database"></a>Database</h2><p><em>Databases implemented in Python.</em></p><ul><li><a href="https://pythonhosted.org/pickleDB/" target="_blank" rel="noopener">pickleDB</a> - A simple and lightweight key-value store for Python.</li><li><a href="https://github.com/msiemens/tinydb" target="_blank" rel="noopener">TinyDB</a> - A tiny, document-oriented database.</li><li><a href="http://www.zodb.org/en/latest/" target="_blank" rel="noopener">ZODB</a> - A native object database for Python. A key-value and object graph database.</li></ul><h2 id="Database-Drivers"><a href="/2018/07/22/Pyziyuan/#Database-Drivers" class="headerlink" title="Database Drivers"></a>Database Drivers</h2><p><em>Libraries for connecting and operating databases.</em></p><ul><li>MySQL - <a href="http://shlomi-noach.github.io/awesome-mysql/" target="_blank" rel="noopener">awesome-mysql</a><ul><li><a href="https://github.com/PyMySQL/mysqlclient-python" target="_blank" rel="noopener">mysqlclient</a> - MySQL connector with Python 3 support (<a href="https://sourceforge.net/projects/mysql-python/" target="_blank" rel="noopener">mysql-python</a> fork).</li><li><a href="https://pythonhosted.org/oursql/" target="_blank" rel="noopener">oursql</a> - A better MySQL connector with support for native prepared statements and BLOBs.</li><li><a href="https://github.com/PyMySQL/PyMySQL" target="_blank" rel="noopener">PyMySQL</a> - A pure Python MySQL driver compatible to mysql-python.</li></ul></li><li>PostgreSQL - <a href="https://github.com/dhamaniasad/awesome-postgres" target="_blank" rel="noopener">awesome-postgres</a><ul><li><a href="http://initd.org/psycopg/" target="_blank" rel="noopener">psycopg2</a> - The most popular PostgreSQL adapter for Python.</li><li><a href="https://github.com/gmr/queries" target="_blank" rel="noopener">queries</a> - A wrapper of the psycopg2 library for interacting with PostgreSQL.</li><li><a href="https://github.com/wulczer/txpostgres" target="_blank" rel="noopener">txpostgres</a> - Twisted based asynchronous driver for PostgreSQL.</li></ul></li><li>Other Relational Databases<ul><li><a href="http://rogerbinns.github.io/apsw/" target="_blank" rel="noopener">apsw</a> - Another Python SQLite wrapper.</li><li><a href="https://github.com/pudo/dataset" target="_blank" rel="noopener">dataset</a> - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL.</li><li><a href="http://www.pymssql.org/en/latest/" target="_blank" rel="noopener">pymssql</a> - A simple database interface to Microsoft SQL Server.</li></ul></li><li>NoSQL Databases<ul><li><a href="https://github.com/datastax/python-driver" target="_blank" rel="noopener">cassandra-python-driver</a> - Python driver for Cassandra.</li><li><a href="https://github.com/wbolster/happybase" target="_blank" rel="noopener">HappyBase</a> - A developer-friendly library for Apache HBase.</li><li><a href="https://github.com/wbolster/plyvel" target="_blank" rel="noopener">Plyvel</a> - A fast and feature-rich Python interface to LevelDB.</li><li><a href="http://py2neo.org/2.0/" target="_blank" rel="noopener">py2neo</a> - Python wrapper client for Neo4j’s restful interface.</li><li><a href="https://github.com/pycassa/pycassa" target="_blank" rel="noopener">pycassa</a> - Python Thrift driver for Cassandra.</li><li><a href="https://docs.mongodb.com/ecosystem/drivers/python/" target="_blank" rel="noopener">PyMongo</a> - The official Python client for MongoDB.</li><li><a href="https://github.com/andymccurdy/redis-py" target="_blank" rel="noopener">redis-py</a> - The Redis Python Client.</li><li><a href="https://github.com/driftx/Telephus" target="_blank" rel="noopener">telephus</a> - Twisted based client for Cassandra.</li><li><a href="https://github.com/deldotdr/txRedis" target="_blank" rel="noopener">txRedis</a> - Twisted based client for Redis.</li></ul></li></ul><h2 id="Date-and-Time"><a href="/2018/07/22/Pyziyuan/#Date-and-Time" class="headerlink" title="Date and Time"></a>Date and Time</h2><p><em>Libraries for working with dates and times.</em></p><ul><li><a href="https://github.com/KoffeinFlummi/Chronyk" target="_blank" rel="noopener">Chronyk</a> - A Python 3 library for parsing human-written times and dates.</li><li><a href="https://github.com/dateutil/dateutil" target="_blank" rel="noopener">dateutil</a> - Extensions to the standard Python <a href="https://docs.python.org/3/library/datetime.html" target="_blank" rel="noopener">datetime</a> module.</li><li><a href="https://github.com/myusuf3/delorean/" target="_blank" rel="noopener">delorean</a> - A library for clearing up the inconvenient truths that arise dealing with datetimes.</li><li><a href="https://github.com/zachwill/moment" target="_blank" rel="noopener">moment</a> - A Python library for dealing with dates/times. Inspired by <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a>.</li><li><a href="https://github.com/sdispater/pendulum" target="_blank" rel="noopener">Pendulum</a> - Python datetimes made easy.</li><li><a href="https://github.com/shinux/PyTime" target="_blank" rel="noopener">PyTime</a> - A easy-use Python module which aims to operate date/time/datetime by string.</li><li><a href="https://launchpad.net/pytz" target="_blank" rel="noopener">pytz</a> - World timezone definitions, modern and historical. Brings the <a href="https://en.wikipedia.org/wiki/Tz_database" target="_blank" rel="noopener">tz database</a> into Python.</li><li><a href="https://github.com/dirn/When.py" target="_blank" rel="noopener">when.py</a> - Providing user-friendly functions to help perform common date and time actions.</li><li><a href="https://github.com/kennethreitz/maya" target="_blank" rel="noopener">maya</a> - Datetimes for Humans, Maya is mostly built around the headaches and use-cases around parsing datetime data from websites.</li></ul><h2 id="Debugging-Tools"><a href="/2018/07/22/Pyziyuan/#Debugging-Tools" class="headerlink" title="Debugging Tools"></a>Debugging Tools</h2><p><em>Libraries for debugging code.</em></p><ul><li>pdb-like Debugger<ul><li><a href="https://pypi.python.org/pypi/ipdb" target="_blank" rel="noopener">ipdb</a> - IPython-enabled <a href="https://docs.python.org/3/library/pdb.html" target="_blank" rel="noopener">pdb</a>.</li><li><a href="https://pypi.python.org/pypi/pdbpp/" target="_blank" rel="noopener">pdb++</a> - Another drop-in replacement for pdb.</li><li><a href="https://pypi.python.org/pypi/pudb" target="_blank" rel="noopener">pudb</a> - A full-screen, console-based Python debugger.</li><li><a href="https://github.com/ionelmc/python-remote-pdb" target="_blank" rel="noopener">remote-pdb</a> - Remote vanilla PDB (over TCP sockets).</li><li><a href="https://github.com/Kozea/wdb" target="_blank" rel="noopener">wdb</a> - An improbable web debugger through WebSockets.</li></ul></li><li>Profiler<ul><li><a href="https://github.com/rkern/line_profiler" target="_blank" rel="noopener">line_profiler</a> - Line-by-line profiling.</li><li><a href="https://github.com/fabianp/memory_profiler" target="_blank" rel="noopener">memory_profiler</a> - Monitor Memory usage of Python code.</li><li><a href="https://github.com/uber/pyflame" target="_blank" rel="noopener">Pyflame</a> - Attach this Ptracing Profiler to any processes running Python. Perfect for profiling production webservers.</li><li><a href="https://github.com/what-studio/profiling" target="_blank" rel="noopener">profiling</a> - An interactive Python profiler.</li><li><a href="https://github.com/nvdv/vprof" target="_blank" rel="noopener">vprof</a> - Visual Python profiler.</li></ul></li><li>Others<ul><li><a href="https://github.com/gruns/icecream" target="_blank" rel="noopener">IceCream</a> - Inspect variables, expressions, and program execution with a single, simple function call.</li><li><a href="https://github.com/jazzband/django-debug-toolbar" target="_blank" rel="noopener">django-debug-toolbar</a> - Display various debug information for Django.</li><li><a href="https://github.com/dcramer/django-devserver" target="_blank" rel="noopener">django-devserver</a> - A drop-in replacement for Django’s runserver.</li><li><a href="https://github.com/mgood/flask-debugtoolbar" target="_blank" rel="noopener">flask-debugtoolbar</a> - A port of the django-debug-toolbar to flask.</li><li><a href="https://github.com/ionelmc/python-hunter" target="_blank" rel="noopener">hunter</a> - Hunter is a flexible code tracing toolkit.</li><li><a href="https://github.com/khamidou/lptrace" target="_blank" rel="noopener">lptrace</a> - <a href="http://man7.org/linux/man-pages/man1/strace.1.html" target="_blank" rel="noopener">strace</a> for Python programs.</li><li><a href="https://github.com/ionelmc/python-manhole" target="_blank" rel="noopener">manhole</a> - Debug service that will accept unix domain socket connections and present the stacktraces for all threads and an interactive prompt.</li><li><a href="https://github.com/eliben/pyelftools" target="_blank" rel="noopener">pyelftools</a> - Parsing and analyzing ELF files and DWARF debugging information.</li><li><a href="https://github.com/google/pyringe" target="_blank" rel="noopener">pyringe</a> - Debugger capable of attaching to and injecting code into Python processes.</li></ul></li></ul><h2 id="Deep-Learning"><a href="/2018/07/22/Pyziyuan/#Deep-Learning" class="headerlink" title="Deep Learning"></a>Deep Learning</h2><p><em>Frameworks for Neural Networks and Deep Learning. See: <a href="https://github.com/ChristosChristofidis/awesome-deep-learning" target="_blank" rel="noopener">awesome-deep-learning</a>.</em></p><ul><li><a href="https://github.com/BVLC/caffe" target="_blank" rel="noopener">Caffe</a> - A fast open framework for deep learning..</li><li><a href="https://github.com/fchollet/keras" target="_blank" rel="noopener">Keras</a> - A high-level neural networks library and capable of running on top of either TensorFlow or Theano.</li><li><a href="https://github.com/dmlc/mxnet" target="_blank" rel="noopener">MXNet</a> - A deep learning framework designed for both efficiency and flexibility.</li><li><a href="http://neupy.com/pages/home.html" target="_blank" rel="noopener">Neupy</a> - Running and testing different Artificial Neural Networks algorithms.</li><li><a href="http://pytorch.org/" target="_blank" rel="noopener">Pytorch</a> - Tensors and Dynamic neural networks in Python with strong GPU acceleration.</li><li><a href="https://github.com/SerpentAI/SerpentAI" target="_blank" rel="noopener">Serpent.AI</a> - Game agent framework. Use any video game as a deep learning sandbox.</li><li><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">TensorFlow</a> - The most popular Deep Learning framework created by Google.</li><li><a href="https://github.com/Theano/Theano" target="_blank" rel="noopener">Theano</a> - A library for fast numerical computation.</li></ul><h2 id="DevOps-Tools"><a href="/2018/07/22/Pyziyuan/#DevOps-Tools" class="headerlink" title="DevOps Tools"></a>DevOps Tools</h2><p><em>Software and libraries for DevOps.</em></p><ul><li><a href="https://github.com/ansible/ansible" target="_blank" rel="noopener">Ansible</a> - A radically simple IT automation platform.</li><li><a href="http://cloudinit.readthedocs.io/en/latest/" target="_blank" rel="noopener">Cloud-Init</a> - A multi-distribution package that handles early initialization of a cloud instance.</li><li><a href="https://github.com/sebastien/cuisine" target="_blank" rel="noopener">cuisine</a> - Chef-like functionality for Fabric.</li><li><a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">Docker Compose</a> - Fast, isolated development environments using <a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a>.</li><li><a href="http://www.fabfile.org/" target="_blank" rel="noopener">Fabric</a> - A simple, Pythonic tool for remote execution and deployment.</li><li><a href="https://github.com/fabtools/fabtools" target="_blank" rel="noopener">Fabtools</a> - Tools for writing awesome Fabric files.</li><li><a href="https://github.com/nickstenning/honcho" target="_blank" rel="noopener">honcho</a> - A Python clone of <a href="https://github.com/ddollar/foreman" target="_blank" rel="noopener">Foreman</a>, for managing Procfile-based applications.</li><li><a href="https://www.openstack.org/" target="_blank" rel="noopener">OpenStack</a> - Open source software for building private and public clouds.</li><li><a href="https://github.com/pexpect/pexpect" target="_blank" rel="noopener">pexpect</a> - Controlling interactive programs in a pseudo-terminal like GNU expect.</li><li><a href="https://github.com/giampaolo/psutil" target="_blank" rel="noopener">psutil</a> - A cross-platform process and system utilities module.</li><li><a href="https://github.com/saltstack/salt" target="_blank" rel="noopener">SaltStack</a> - Infrastructure automation and management system.</li><li><a href="https://github.com/Supervisor/supervisor" target="_blank" rel="noopener">supervisor</a> - Supervisor process control system for UNIX.</li></ul><h2 id="Distribution"><a href="/2018/07/22/Pyziyuan/#Distribution" class="headerlink" title="Distribution"></a>Distribution</h2><p><em>Libraries to create packaged executables for release distribution.</em></p><ul><li><a href="https://github.com/spotify/dh-virtualenv" target="_blank" rel="noopener">dh-virtualenv</a> - Build and distribute a virtualenv as a Debian package.</li><li><a href="http://nuitka.net/" target="_blank" rel="noopener">Nuitka</a> - Compile scripts, modules, packages to an executable or extension module.</li><li><a href="http://pythonhosted.org/py2app/" target="_blank" rel="noopener">py2app</a> - Freezes Python scripts (Mac OS X).</li><li><a href="http://www.py2exe.org/" target="_blank" rel="noopener">py2exe</a> - Freezes Python scripts (Windows).</li><li><a href="https://github.com/pyinstaller/pyinstaller" target="_blank" rel="noopener">PyInstaller</a> - Converts Python programs into stand-alone executables (cross-platform).</li><li><a href="http://pynsist.readthedocs.io/en/latest/" target="_blank" rel="noopener">pynsist</a> - A tool to build Windows installers, installers bundle Python itself.</li></ul><h2 id="Documentation"><a href="/2018/07/22/Pyziyuan/#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><p><em>Libraries for generating project documentation.</em></p><ul><li><a href="http://www.sphinx-doc.org/en/latest/" target="_blank" rel="noopener">Sphinx</a> - Python Documentation generator.<ul><li><a href="https://github.com/yoloseem/awesome-sphinxdoc" target="_blank" rel="noopener">awesome-sphinxdoc</a></li></ul></li><li><a href="http://www.mkdocs.org/" target="_blank" rel="noopener">MkDocs</a> - Markdown friendly documentation generator.</li><li><a href="https://github.com/BurntSushi/pdoc" target="_blank" rel="noopener">pdoc</a> - Epydoc replacement to auto generate API documentation for Python libraries.</li><li><a href="https://github.com/pycco-docs/pycco" target="_blank" rel="noopener">Pycco</a> - The literate-programming-style documentation generator.</li></ul><h2 id="Downloader"><a href="/2018/07/22/Pyziyuan/#Downloader" class="headerlink" title="Downloader"></a>Downloader</h2><p><em>Libraries for downloading.</em></p><ul><li><a href="https://github.com/s3tools/s3cmd" target="_blank" rel="noopener">s3cmd</a> - A command line tool for managing Amazon S3 and CloudFront.</li><li><a href="https://github.com/bloomreach/s4cmd" target="_blank" rel="noopener">s4cmd</a> - Super S3 command line tool, good for higher performance.</li><li><a href="http://you-get.org/" target="_blank" rel="noopener">you-get</a> - A YouTube/Youku/Niconico video downloader written in Python 3.</li><li><a href="http://rg3.github.io/youtube-dl/" target="_blank" rel="noopener">youtube-dl</a> - A small command-line program to download videos from YouTube.</li></ul><h2 id="E-commerce"><a href="/2018/07/22/Pyziyuan/#E-commerce" class="headerlink" title="E-commerce"></a>E-commerce</h2><p><em>Frameworks and libraries for e-commerce and payments.</em></p><ul><li><a href="https://github.com/lxneng/alipay" target="_blank" rel="noopener">alipay</a> - Unofficial Alipay API for Python.</li><li><a href="https://github.com/stephenmcd/cartridge" target="_blank" rel="noopener">Cartridge</a> - A shopping cart app built using the Mezzanine.</li><li><a href="http://oscarcommerce.com/" target="_blank" rel="noopener">django-oscar</a> - An open-source e-commerce framework for Django.</li><li><a href="https://github.com/awesto/django-shop" target="_blank" rel="noopener">django-shop</a> - A Django based shop system.</li><li><a href="https://github.com/agiliq/merchant" target="_blank" rel="noopener">merchant</a> - A Django app to accept payments from various payment processors.</li><li><a href="https://github.com/carlospalol/money" target="_blank" rel="noopener">money</a> - Money class with optional CLDR-backed locale-aware formatting and an extensible currency exchange solution.</li><li><a href="https://github.com/Alir3z4/python-currencies" target="_blank" rel="noopener">python-currencies</a> - Display money format and its filthy currencies.</li><li><a href="https://github.com/MicroPyramid/forex-python" target="_blank" rel="noopener">forex-python</a> - Foreign exchange rates, Bitcoin price index and currency conversion.</li><li><a href="http://getsaleor.com/" target="_blank" rel="noopener">saleor</a> - An e-commerce storefront for Django.</li><li><a href="https://www.shuup.com/en/" target="_blank" rel="noopener">shoop</a> - An open source E-Commerce platform based on Django.</li></ul><h2 id="Editor-Plugins-and-IDEs"><a href="/2018/07/22/Pyziyuan/#Editor-Plugins-and-IDEs" class="headerlink" title="Editor Plugins and IDEs"></a>Editor Plugins and IDEs</h2><ul><li>Emacs<ul><li><a href="https://github.com/jorgenschaefer/elpy" target="_blank" rel="noopener">Elpy</a> - Emacs Python Development Environment.</li></ul></li><li>Sublime Text<ul><li><a href="https://github.com/DamnWidget/anaconda" target="_blank" rel="noopener">Anaconda</a> - Anaconda turns your Sublime Text 3 in a full featured Python development IDE.</li><li><a href="https://github.com/srusskih/SublimeJEDI" target="_blank" rel="noopener">SublimeJEDI</a> - A Sublime Text plugin to the awesome auto-complete library Jedi.</li></ul></li><li>Vim<ul><li><a href="https://github.com/davidhalter/jedi-vim" target="_blank" rel="noopener">Jedi-vim</a> - Vim bindings for the Jedi auto-completion library for Python.</li><li><a href="https://github.com/python-mode/python-mode" target="_blank" rel="noopener">Python-mode</a> - An all in one plugin for turning Vim into a Python IDE.</li><li><a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="noopener">YouCompleteMe</a> - Includes <a href="https://github.com/davidhalter/jedi" target="_blank" rel="noopener">Jedi</a>-based completion engine for Python.</li></ul></li><li>Visual Studio<ul><li><a href="https://github.com/Microsoft/PTVS" target="_blank" rel="noopener">PTVS</a> - Python Tools for Visual Studio.</li></ul></li><li>Visual Studio Code<ul><li><a href="https://github.com/DonJayamanne/pythonVSCode" target="_blank" rel="noopener">Python</a> - An extension with rich support for the Python language, with features including linting, IntelliSense, formatting, refactoring, debugging, unit tests, and jupyter support.</li><li><a href="https://github.com/MagicStack/MagicPython" target="_blank" rel="noopener">Magic Python</a> - Cutting edge Python syntax highlighter for Sublime Text, Atom, and Visual Studio Code. Used by GitHub to highlight your Python code!</li></ul></li><li>IDE<ul><li><a href="http://www.liclipse.com/" target="_blank" rel="noopener">LiClipse</a> - Free polyglot IDE based on Eclipse. Uses PyDev for Python support.</li><li><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm</a> - Commercial Python IDE by JetBrains. Has free community edition available.</li><li><a href="https://github.com/spyder-ide/spyder" target="_blank" rel="noopener">Spyder</a> - Open Source Python IDE.</li></ul></li></ul><h2 id="Email"><a href="/2018/07/22/Pyziyuan/#Email" class="headerlink" title="Email"></a>Email</h2><p><em>Libraries for sending and parsing email.</em></p><ul><li><a href="http://tomekwojcik.github.io/envelopes/" target="_blank" rel="noopener">envelopes</a> - Mailing for human beings.</li><li><a href="https://github.com/mailgun/flanker" target="_blank" rel="noopener">flanker</a> - A email address and Mime parsing library.</li><li><a href="https://github.com/martinrusev/imbox" target="_blank" rel="noopener">imbox</a> - Python IMAP for Humans.</li><li><a href="https://github.com/kennethreitz/inbox.py" target="_blank" rel="noopener">inbox.py</a> - Python SMTP Server for Humans.</li><li><a href="https://github.com/zedshaw/lamson" target="_blank" rel="noopener">lamson</a> - Pythonic SMTP Application Server.</li><li><a href="https://github.com/marrow/mailer" target="_blank" rel="noopener">Marrow Mailer</a> - High-performance extensible mail delivery framework.</li><li><a href="https://github.com/modoboa/modoboa" target="_blank" rel="noopener">modoboa</a> - A mail hosting and management platform including a modern and simplified Web UI.</li><li><a href="https://github.com/nylas/sync-engine" target="_blank" rel="noopener">Nylas Sync Engine</a> - Providing a RESTful API on top of a powerful email sync platform.</li><li><a href="https://github.com/kootenpv/yagmail" target="_blank" rel="noopener">yagmail</a> - Yet another Gmail/SMTP client.</li></ul><h2 id="Environment-Management"><a href="/2018/07/22/Pyziyuan/#Environment-Management" class="headerlink" title="Environment Management"></a>Environment Management</h2><p><em>Libraries for Python version and environment management.</em></p><ul><li><a href="https://github.com/kennethreitz/pipenv" target="_blank" rel="noopener">Pipenv</a> - Sacred Marriage of Pipfile, Pip, &amp; Virtualenv.</li><li><a href="https://github.com/qw3rtman/p" target="_blank" rel="noopener">p</a> - Dead simple interactive Python version management.</li><li><a href="https://github.com/pyenv/pyenv" target="_blank" rel="noopener">pyenv</a> - Simple Python version management.</li><li><a href="https://docs.python.org/3/library/venv.html" target="_blank" rel="noopener">venv</a> - (Python standard library in Python 3.3+) Creating lightweight virtual environments.</li><li><a href="https://pypi.python.org/pypi/virtualenv" target="_blank" rel="noopener">virtualenv</a> - A tool to create isolated Python environments.</li><li><a href="https://pypi.python.org/pypi/virtualenvwrapper" target="_blank" rel="noopener">virtualenvwrapper</a> - A set of extensions to virtualenv.</li></ul><h2 id="Files"><a href="/2018/07/22/Pyziyuan/#Files" class="headerlink" title="Files"></a>Files</h2><p><em>Libraries for file manipulation and MIME type detection.</em></p><ul><li><a href="https://docs.python.org/3/library/imghdr.html" target="_blank" rel="noopener">imghdr</a> - (Python standard library) Determine the type of an image.</li><li><a href="https://docs.python.org/3/library/mimetypes.html" target="_blank" rel="noopener">mimetypes</a> - (Python standard library) Map filenames to MIME types.</li><li><a href="https://github.com/jaraco/path.py" target="_blank" rel="noopener">path.py</a> - A module wrapper for <a href="https://docs.python.org/3/library/os.path.html" target="_blank" rel="noopener">os.path</a>.</li><li><a href="https://pathlib.readthedocs.org/en/pep428/" target="_blank" rel="noopener">pathlib</a> - (Python standard library in Python 3.4+) An cross-platform, object-oriented path library.</li><li><a href="https://github.com/ahupp/python-magic" target="_blank" rel="noopener">python-magic</a> - A Python interface to the libmagic file type identification library.</li><li><a href="https://github.com/mikeorr/Unipath" target="_blank" rel="noopener">Unipath</a> - An object-oriented approach to file/directory operations.</li><li><a href="https://github.com/gorakhargosh/watchdog" target="_blank" rel="noopener">watchdog</a> - API and shell utilities to monitor file system events.</li></ul><h2 id="Foreign-Function-Interface"><a href="/2018/07/22/Pyziyuan/#Foreign-Function-Interface" class="headerlink" title="Foreign Function Interface"></a>Foreign Function Interface</h2><p><em>Libraries for providing foreign function interface.</em></p><ul><li><a href="https://pypi.python.org/pypi/cffi" target="_blank" rel="noopener">cffi</a> - Foreign Function Interface for Python calling C code.</li><li><a href="https://docs.python.org/3/library/ctypes.html" target="_blank" rel="noopener">ctypes</a> - (Python standard library) Foreign Function Interface for Python calling C code.</li><li><a href="https://mathema.tician.de/software/pycuda/" target="_blank" rel="noopener">PyCUDA</a> - A Python wrapper for Nvidia’s CUDA API.</li><li><a href="http://www.swig.org/Doc1.3/Python.html" target="_blank" rel="noopener">SWIG</a> - Simplified Wrapper and Interface Generator.</li></ul><h2 id="Forms"><a href="/2018/07/22/Pyziyuan/#Forms" class="headerlink" title="Forms"></a>Forms</h2><p><em>Libraries for working with forms.</em></p><ul><li><a href="https://github.com/Pylons/deform" target="_blank" rel="noopener">Deform</a> - Python HTML form generation library influenced by the formish form generation library.</li><li><a href="https://github.com/dyve/django-bootstrap3" target="_blank" rel="noopener">django-bootstrap3</a> - Bootstrap 3 integration with Django.</li><li><a href="https://github.com/django-crispy-forms/django-crispy-forms" target="_blank" rel="noopener">django-crispy-forms</a> - A Django app which lets you create beautiful forms in a very elegant and DRY way.</li><li><a href="https://github.com/WiserTogether/django-remote-forms" target="_blank" rel="noopener">django-remote-forms</a> - A platform independent Django form serializer.</li><li><a href="https://github.com/wtforms/wtforms" target="_blank" rel="noopener">WTForms</a> - A flexible forms validation and rendering library.</li></ul><h2 id="Functional-Programming"><a href="/2018/07/22/Pyziyuan/#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h2><p><em>Functional Programming with Python.</em></p><ul><li><a href="https://github.com/pytoolz/cytoolz/" target="_blank" rel="noopener">CyToolz</a> - Cython implementation of Toolz: High performance functional utilities.</li><li><a href="https://github.com/kachayev/fn.py" target="_blank" rel="noopener">fn.py</a> - Functional programming in Python: implementation of missing features to enjoy FP.</li><li><a href="https://github.com/Suor/funcy" target="_blank" rel="noopener">funcy</a> - A fancy and practical functional tools.</li><li><a href="https://github.com/pytoolz/toolz" target="_blank" rel="noopener">Toolz</a> - A collection of functional utilities for iterators, functions, and dictionaries.</li></ul><h2 id="GUI"><a href="/2018/07/22/Pyziyuan/#GUI" class="headerlink" title="GUI"></a>GUI</h2><p><em>Libraries for working with graphical user interface applications.</em></p><ul><li><a href="https://docs.python.org/3/library/curses.html" target="_blank" rel="noopener">curses</a> - Built-in wrapper for <a href="http://www.gnu.org/software/ncurses/" target="_blank" rel="noopener">ncurses</a> used to create terminal GUI applications.</li><li><a href="https://github.com/ChrisKnott/Eel" target="_blank" rel="noopener">Eel</a> - Little library for making simple Electron-like offline HTML/JS GUI apps, with full access to Python capabilities and libraries.</li><li><a href="https://github.com/nucleic/enaml" target="_blank" rel="noopener">enaml</a> - Creating beautiful user-interfaces with Declaratic Syntax like QML.</li><li><a href="https://github.com/zoofIO/flexx" target="_blank" rel="noopener">Flexx</a> - Flexx is a pure Python toolkit for creating GUI’s, that uses web technology for its rendering.</li><li><a href="https://kivy.org/" target="_blank" rel="noopener">kivy</a> - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS.</li><li><a href="https://bitbucket.org/pyglet/pyglet/wiki/Home" target="_blank" rel="noopener">pyglet</a> - A cross-platform windowing and multimedia library for Python.</li><li><a href="https://wiki.gnome.org/Projects/PyGObject" target="_blank" rel="noopener">PyGObject</a> - Python Bindings for GLib/GObject/GIO/GTK+ (GTK+3).</li><li><a href="https://riverbankcomputing.com/software/pyqt/intro" target="_blank" rel="noopener">PyQt</a> - Python bindings for the <a href="https://www.qt.io/" target="_blank" rel="noopener">Qt</a> cross-platform application and UI framework, with support for both Qt v4 and Qt v5 frameworks.</li><li><a href="https://wiki.qt.io/PySide" target="_blank" rel="noopener">PySide</a> - Python bindings for the <a href="http://www.qt.io/" target="_blank" rel="noopener">Qt</a> cross-platform application and UI framework, supporting the Qt v4 framework.</li><li><a href="https://github.com/r0x0r/pywebview/" target="_blank" rel="noopener">pywebview</a> - A lightweight cross-platform native wrapper around a webview component that allows to display HTML content in its own native dedicated window.</li><li><a href="https://wiki.python.org/moin/TkInter" target="_blank" rel="noopener">Tkinter</a> - Tkinter is Python’s de-facto standard GUI package.</li><li><a href="https://github.com/pybee/toga" target="_blank" rel="noopener">Toga</a> - A Python native, OS native GUI toolkit.</li><li><a href="http://urwid.org/" target="_blank" rel="noopener">urwid</a> - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc.</li><li><a href="https://wxpython.org/" target="_blank" rel="noopener">wxPython</a> - A blending of the wxWidgets C++ class library with the Python.</li></ul><h2 id="Game-Development"><a href="/2018/07/22/Pyziyuan/#Game-Development" class="headerlink" title="Game Development"></a>Game Development</h2><p><em>Awesome game development libraries.</em></p><ul><li><a href="http://cocos2d.org/" target="_blank" rel="noopener">Cocos2d</a> - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications. It is based on pyglet.</li><li><a href="https://www.panda3d.org/" target="_blank" rel="noopener">Panda3D</a> - 3D game engine developed by Disney and maintained by Carnegie Mellon’s Entertainment Technology Center. Written in C++, completely wrapped in Python.</li><li><a href="http://www.pygame.org/news.html" target="_blank" rel="noopener">Pygame</a> - Pygame is a set of Python modules designed for writing games.</li><li><a href="http://www.ogre3d.org/tikiwiki/PyOgre" target="_blank" rel="noopener">PyOgre</a> - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D.</li><li><a href="http://pyopengl.sourceforge.net/" target="_blank" rel="noopener">PyOpenGL</a> - Python ctypes bindings for OpenGL and it’s related APIs.</li><li><a href="http://pysdl2.readthedocs.io/en/rel_0_9_5/" target="_blank" rel="noopener">PySDL2</a> - A ctypes based wrapper for the SDL2 library.</li><li><a href="https://www.renpy.org/" target="_blank" rel="noopener">RenPy</a> - A Visual Novel engine.</li></ul><h2 id="Geolocation"><a href="/2018/07/22/Pyziyuan/#Geolocation" class="headerlink" title="Geolocation"></a>Geolocation</h2><p><em>Libraries for geocoding addresses and working with latitudes and longitudes.</em></p><ul><li><a href="https://github.com/SmileyChris/django-countries" target="_blank" rel="noopener">django-countries</a> - A Django app that provides country choices for use with forms, flag icons static files, and a country field for models.</li><li><a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/" target="_blank" rel="noopener">GeoDjango</a> - A world-class geographic web framework.</li><li><a href="https://github.com/maxmind/geoip-api-python" target="_blank" rel="noopener">GeoIP</a> - Python API for MaxMind GeoIP Legacy Database.</li><li><a href="https://github.com/frewsxcv/python-geojson" target="_blank" rel="noopener">geojson</a> - Python bindings and utilities for GeoJSON.</li><li><a href="https://github.com/geopy/geopy" target="_blank" rel="noopener">geopy</a> - Python Geocoding Toolbox.</li><li><a href="https://github.com/appliedsec/pygeoip" target="_blank" rel="noopener">pygeoip</a> - Pure Python GeoIP API.</li></ul><h2 id="HTML-Manipulation"><a href="/2018/07/22/Pyziyuan/#HTML-Manipulation" class="headerlink" title="HTML Manipulation"></a>HTML Manipulation</h2><p><em>Libraries for working with HTML and XML.</em></p><ul><li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="noopener">BeautifulSoup</a> - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML.</li><li><a href="https://github.com/mozilla/bleach" target="_blank" rel="noopener">bleach</a> - A whitelist-based HTML sanitization and text linkification library.</li><li><a href="https://pypi.python.org/pypi/cssutils/" target="_blank" rel="noopener">cssutils</a> - A CSS library for Python.</li><li><a href="https://github.com/html5lib/html5lib-python" target="_blank" rel="noopener">html5lib</a> - A standards-compliant library for parsing and serializing HTML documents and fragments.</li><li><a href="http://lxml.de/" target="_blank" rel="noopener">lxml</a> - A very fast, easy-to-use and versatile library for handling HTML and XML.</li><li><a href="https://github.com/pallets/markupsafe" target="_blank" rel="noopener">MarkupSafe</a> - Implements a XML/HTML/XHTML Markup safe string for Python.</li><li><a href="https://github.com/gawel/pyquery" target="_blank" rel="noopener">pyquery</a> - A jQuery-like library for parsing HTML.</li><li><a href="https://github.com/stchris/untangle" target="_blank" rel="noopener">untangle</a> - Converts XML documents to Python objects for easy access.</li><li><a href="http://weasyprint.org" target="_blank" rel="noopener">WeasyPrint</a> - A visual rendering engine for HTML and CSS that can export to PDF.</li><li><a href="https://xmldataset.readthedocs.io/en/latest/" target="_blank" rel="noopener">xmldataset</a> - Simple XML Parsing.</li><li><a href="https://github.com/martinblech/xmltodict" target="_blank" rel="noopener">xmltodict</a> - Working with XML feel like you are working with JSON.</li></ul><h2 id="HTTP"><a href="/2018/07/22/Pyziyuan/#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p><em>Libraries for working with HTTP.</em></p><ul><li><a href="https://github.com/kennethreitz/grequests" target="_blank" rel="noopener">grequests</a> - requests + gevent for asynchronous HTTP requests.</li><li><a href="https://github.com/httplib2/httplib2" target="_blank" rel="noopener">httplib2</a> - Comprehensive HTTP client library.</li><li><a href="http://docs.python-requests.org/en/latest/" target="_blank" rel="noopener">requests</a> - HTTP Requests for Humans™.</li><li><a href="https://github.com/twisted/treq" target="_blank" rel="noopener">treq</a> - Python requests like API built on top of Twisted’s HTTP client.</li><li><a href="https://github.com/shazow/urllib3" target="_blank" rel="noopener">urllib3</a> - A HTTP library with thread-safe connection pooling, file post support, sanity friendly.</li></ul><h2 id="Hardware"><a href="/2018/07/22/Pyziyuan/#Hardware" class="headerlink" title="Hardware"></a>Hardware</h2><p><em>Libraries for programming with hardware.</em></p><ul><li><a href="http://inotool.org/" target="_blank" rel="noopener">ino</a> - Command line toolkit for working with <a href="https://www.arduino.cc/" target="_blank" rel="noopener">Arduino</a>.</li><li><a href="https://github.com/boppreh/keyboard" target="_blank" rel="noopener">keyboard</a> - Hook and simulate global keyboard events on Windows and Linux.</li><li><a href="https://github.com/boppreh/mouse" target="_blank" rel="noopener">mouse</a> - Hook and simulate global mouse events on Windows and Linux.</li><li><a href="http://www.pingo.io/" target="_blank" rel="noopener">Pingo</a> - Pingo provides a uniform API to program devices like the Raspberry Pi, pcDuino, Intel Galileo, etc.</li><li><a href="https://github.com/SavinaRoja/PyUserInput" target="_blank" rel="noopener">PyUserInput</a> - A module for cross-platform control of the mouse and keyboard.</li><li><a href="https://github.com/secdev/scapy" target="_blank" rel="noopener">scapy</a> - A brilliant packet manipulation library.</li><li><a href="https://github.com/rockymeza/wifi" target="_blank" rel="noopener">wifi</a> - A Python library and command line tool for working with WiFi on Linux.</li></ul><h2 id="Image-Processing"><a href="/2018/07/22/Pyziyuan/#Image-Processing" class="headerlink" title="Image Processing"></a>Image Processing</h2><p><em>Libraries for manipulating images.</em></p><ul><li><a href="https://github.com/rossgoodwin/hmap" target="_blank" rel="noopener">hmap</a> - Image histogram remapping.</li><li><a href="https://sourceforge.net/projects/imgseek/" target="_blank" rel="noopener">imgSeek</a> - A project for searching a collection of images using visual similarity.</li><li><a href="https://github.com/hhatto/nude.py" target="_blank" rel="noopener">nude.py</a> - Nudity detection.</li><li><a href="https://github.com/daboth/pagan" target="_blank" rel="noopener">pagan</a> - Retro identicon (Avatar) generation based on input string and hash.</li><li><a href="https://github.com/python-pillow/Pillow" target="_blank" rel="noopener">pillow</a> - Pillow is the friendly <a href="http://www.pythonware.com/products/pil/" target="_blank" rel="noopener">PIL</a> fork.</li><li><a href="https://pythonhosted.org/pyBarcode/" target="_blank" rel="noopener">pyBarcode</a> - Create barcodes in Python without needing PIL.</li><li><a href="https://github.com/ajkumar25/pygram" target="_blank" rel="noopener">pygram</a> - Instagram-like image filters.</li><li><a href="https://github.com/lincolnloop/python-qrcode" target="_blank" rel="noopener">python-qrcode</a> - A pure Python QR Code generator.</li><li><a href="https://github.com/fogleman/Quads" target="_blank" rel="noopener">Quads</a> - Computer art based on quadtrees.</li><li><a href="http://scikit-image.org/" target="_blank" rel="noopener">scikit-image</a> - A Python library for (scientific) image processing.</li><li><a href="https://github.com/thumbor/thumbor" target="_blank" rel="noopener">thumbor</a> - A smart imaging service. It enables on-demand crop, re-sizing and flipping of images.</li><li><a href="https://github.com/dahlia/wand" target="_blank" rel="noopener">wand</a> - Python bindings for <a href="http://www.imagemagick.org/script/magick-wand.php" target="_blank" rel="noopener">MagickWand</a>, C API for ImageMagick.</li></ul><h2 id="Implementations"><a href="/2018/07/22/Pyziyuan/#Implementations" class="headerlink" title="Implementations"></a>Implementations</h2><p><em>Implementations of Python.</em></p><ul><li><a href="https://github.com/metawilm/cl-python" target="_blank" rel="noopener">CLPython</a> - Implementation of the Python programming language written in Common Lisp.</li><li><a href="https://github.com/python/cpython" target="_blank" rel="noopener">CPython</a> - <strong>Default, most widely used implementation of the Python programming language written in C.</strong></li><li><a href="http://cython.org/" target="_blank" rel="noopener">Cython</a> - Optimizing Static Compiler for Python. Uses type mixins to compile Python into C or C++ modules resulting in large performance gains</li><li><a href="https://github.com/google/grumpy" target="_blank" rel="noopener">Grumpy</a> - More compiler than interpreter as more powerful CPython2.7 replacement (alpha).</li><li><a href="https://github.com/IronLanguages/ironpython3" target="_blank" rel="noopener">IronPython</a> - Implementation of the Python programming language written in C# targeting the .NET Framework and Mono.</li><li><a href="https://hg.python.org/jython" target="_blank" rel="noopener">Jython</a> - Implementation of Python programming language written in Java for the Java virtual machine (JVM).</li><li><a href="https://github.com/micropython/micropython" target="_blank" rel="noopener">MicroPython</a> - MicroPython - a lean and efficient Python programming language implementation for microcontrollers and constrained systems</li><li><a href="http://numba.pydata.org/" target="_blank" rel="noopener">Numba</a> - Python JIT compiler to LLVM aimed at scientific Python.</li><li><a href="https://github.com/Maratyszcza/PeachPy" target="_blank" rel="noopener">PeachPy</a> - x86-64 assembler embedded in Python. Can be used as inline assembler for Python or as a stand-alone assembler for Windows, Linux, OS X, Native Client and Go.</li><li><a href="https://github.com/Microsoft/Pyjion" target="_blank" rel="noopener">Pyjion</a> - A JIT for Python based upon CoreCLR.</li><li><a href="https://bitbucket.org/pypy/pypy" target="_blank" rel="noopener">PyPy</a> - Implementation of the Python programming language written in RPython and translated into C. PyPy focuses on speed, efficiency and compatibility with the original CPython interpreter. The interpreter uses black magic to make Python very fast without having to add in additional type information.</li><li><a href="https://github.com/ebranca/owasp-pysec" target="_blank" rel="noopener">PySec</a> - Hardened version of python that makes it easier for security professionals and developers to write applications more resilient to attacks and manipulations.</li><li><a href="https://github.com/dropbox/pyston" target="_blank" rel="noopener">Pyston</a> - A Python implementation built using LLVM and modern JIT techniques with the goal of achieving good performance.</li><li><a href="https://bitbucket.org/stackless-dev/stackless/wiki/Home" target="_blank" rel="noopener">Stackless Python</a> - An enhanced version of the Python programming language which allows programmers to reap the benefits of thread-based programming without the performance and complexity problems associated with conventional threads.</li></ul><h2 id="Interactive-Interpreter"><a href="/2018/07/22/Pyziyuan/#Interactive-Interpreter" class="headerlink" title="Interactive Interpreter"></a>Interactive Interpreter</h2><p><em>Interactive Python interpreters (REPL).</em></p><ul><li><a href="https://github.com/bpython/bpython" target="_blank" rel="noopener">bpython</a> - A fancy interface to the Python interpreter.</li><li><a href="https://jupyter.org" target="_blank" rel="noopener">Jupyter Notebook (IPython)</a> - A rich toolkit to help you make the most out of using Python interactively.<ul><li><a href="https://github.com/markusschanta/awesome-jupyter" target="_blank" rel="noopener">awesome-jupyter</a></li></ul></li><li><a href="https://github.com/jonathanslenders/ptpython" target="_blank" rel="noopener">ptpython</a> - Advanced Python REPL built on top of the <a href="https://github.com/jonathanslenders/python-prompt-toolkit" target="_blank" rel="noopener">python-prompt-toolkit</a>.</li></ul><h2 id="Internationalization"><a href="/2018/07/22/Pyziyuan/#Internationalization" class="headerlink" title="Internationalization"></a>Internationalization</h2><p><em>Libraries for working with i18n.</em></p><ul><li><a href="http://babel.pocoo.org/en/latest/" target="_blank" rel="noopener">Babel</a> - An internationalization library for Python.</li><li><a href="https://github.com/ovalhub/pyicu" target="_blank" rel="noopener">PyICU</a> - A wrapper of International Components for Unicode C++ library (<a href="http://site.icu-project.org/" target="_blank" rel="noopener">ICU</a>).</li></ul><h2 id="Job-Scheduler"><a href="/2018/07/22/Pyziyuan/#Job-Scheduler" class="headerlink" title="Job Scheduler"></a>Job Scheduler</h2><p><em>Libraries for scheduling jobs.</em></p><ul><li><a href="http://apscheduler.readthedocs.io/en/latest/" target="_blank" rel="noopener">APScheduler</a> - A light but powerful in-process task scheduler that lets you schedule functions.</li><li><a href="https://github.com/thauber/django-schedule" target="_blank" rel="noopener">django-schedule</a> - A calendaring app for Django.</li><li><a href="http://pydoit.org/" target="_blank" rel="noopener">doit</a> - A task runner and build tool.</li><li><a href="https://github.com/gunnery/gunnery" target="_blank" rel="noopener">gunnery</a> - Multipurpose task execution tool for distributed systems with web-based interface.</li><li><a href="http://pythonhosted.org/joblib/index.html" target="_blank" rel="noopener">Joblib</a> - A set of tools to provide lightweight pipelining in Python.</li><li><a href="https://github.com/fengsp/plan" target="_blank" rel="noopener">Plan</a> - Writing crontab file in Python like a charm.</li><li><a href="https://github.com/dbader/schedule" target="_blank" rel="noopener">schedule</a> - Python job scheduling for humans.</li><li><a href="https://github.com/knipknap/SpiffWorkflow" target="_blank" rel="noopener">Spiff</a> - A powerful workflow engine implemented in pure Python.</li><li><a href="https://docs.openstack.org/developer/taskflow/" target="_blank" rel="noopener">TaskFlow</a> - A Python library that helps to make task execution easy, consistent and reliable.</li></ul><h2 id="Logging"><a href="/2018/07/22/Pyziyuan/#Logging" class="headerlink" title="Logging"></a>Logging</h2><p><em>Libraries for generating and working with logs.</em></p><ul><li><a href="https://github.com/ScatterHQ/eliot" target="_blank" rel="noopener">Eliot</a> - Logging for complex &amp; distributed systems.</li><li><a href="http://logbook.readthedocs.io/en/stable/" target="_blank" rel="noopener">logbook</a> - Logging replacement for Python.</li><li><a href="https://docs.python.org/3/library/logging.html" target="_blank" rel="noopener">logging</a> - (Python standard library) Logging facility for Python.</li><li><a href="https://github.com/getsentry/raven-python" target="_blank" rel="noopener">raven</a> - Python client for Sentry, a log/error tracking, crash reporting and aggregation platform for web applications.</li></ul><h2 id="Machine-Learning"><a href="/2018/07/22/Pyziyuan/#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h2><p><em>Libraries for Machine Learning. See: <a href="https://github.com/josephmisiti/awesome-machine-learning#python" target="_blank" rel="noopener">awesome-machine-learning</a>.</em></p><ul><li><a href="https://github.com/h2oai/h2o-3" target="_blank" rel="noopener">H2O</a> - Open Source Fast Scalable Machine Learning Platform.</li><li><a href="https://github.com/benhamner/Metrics" target="_blank" rel="noopener">Metrics</a> - Machine learning evaluation metrics.</li><li><a href="https://github.com/numenta/nupic" target="_blank" rel="noopener">NuPIC</a> - Numenta Platform for Intelligent Computing.</li><li><a href="http://scikit-learn.org/" target="_blank" rel="noopener">scikit-learn</a> - The most popular Python library for Machine Learning.</li><li><a href="http://spark.apache.org/docs/latest/ml-guide.html" target="_blank" rel="noopener">Spark ML</a> - <a href="http://spark.apache.org/" target="_blank" rel="noopener">Apache Spark</a>‘s scalable Machine Learning library.</li><li><a href="https://github.com/josephreisinger/vowpal_porpoise" target="_blank" rel="noopener">vowpal_porpoise</a> - A lightweight Python wrapper for <a href="https://github.com/JohnLangford/vowpal_wabbit/" target="_blank" rel="noopener">Vowpal Wabbit</a>.</li><li><a href="https://github.com/dmlc/xgboost" target="_blank" rel="noopener">xgboost</a> - A scalable, portable, and distributed gradient boosting library.</li></ul><h2 id="MapReduce"><a href="/2018/07/22/Pyziyuan/#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><p><em>Frameworks and libraries for MapReduce.</em></p><ul><li><a href="https://pypi.python.org/pypi/pyspark/" target="_blank" rel="noopener">PySpark</a> - Apache Spark Python API.</li><li><a href="https://github.com/spotify/luigi" target="_blank" rel="noopener">luigi</a> - A module that helps you build complex pipelines of batch jobs.</li><li><a href="https://github.com/Yelp/mrjob" target="_blank" rel="noopener">mrjob</a> - Run MapReduce jobs on Hadoop or Amazon Web Services.</li><li><a href="https://github.com/Parsely/streamparse" target="_blank" rel="noopener">streamparse</a> - Run Python code against real-time streams of data. Integrates with <a href="http://storm.apache.org/" target="_blank" rel="noopener">Apache Storm</a>.</li><li><a href="https://dask.pydata.org/en/latest/" target="_blank" rel="noopener">dask</a> - A flexible parallel computing library for analytic computing.</li></ul><h2 id="Microsoft-Windows"><a href="/2018/07/22/Pyziyuan/#Microsoft-Windows" class="headerlink" title="Microsoft Windows"></a>Microsoft Windows</h2><p><em>Python programming on Microsoft Windows.</em></p><ul><li><a href="http://python-xy.github.io/" target="_blank" rel="noopener">Python(x,y)</a> - Scientific-applications-oriented Python Distribution based on Qt and Spyder.</li><li><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">pythonlibs</a> - Unofficial Windows binaries for Python extension packages.</li><li><a href="https://github.com/pythonnet/pythonnet" target="_blank" rel="noopener">PythonNet</a> - Python Integration with the .NET Common Language Runtime (CLR).</li><li><a href="https://sourceforge.net/projects/pywin32/" target="_blank" rel="noopener">PyWin32</a> - Python Extensions for Windows.</li><li><a href="https://winpython.github.io/" target="_blank" rel="noopener">WinPython</a> - Portable development environment for Windows 7/8.</li></ul><h2 id="Miscellaneous"><a href="/2018/07/22/Pyziyuan/#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><p><em>Useful libraries or tools that don’t fit in the categories above.</em></p><ul><li><a href="https://github.com/jek/blinker" target="_blank" rel="noopener">blinker</a> - A fast Python in-process signal/event dispatching system.</li><li><a href="https://github.com/pallets/itsdangerous" target="_blank" rel="noopener">itsdangerous</a> - Various helpers to pass trusted data to untrusted environments.</li><li><a href="https://github.com/mitsuhiko/pluginbase" target="_blank" rel="noopener">pluginbase</a> - A simple but flexible plugin system for Python.</li><li><a href="https://github.com/PacketPerception/pychievements" target="_blank" rel="noopener">Pychievements</a> - A framework for creating and tracking achievements.</li><li><a href="http://www.tryton.org/" target="_blank" rel="noopener">Tryton</a> - A general purpose business framework.</li></ul><h2 id="Natural-Language-Processing"><a href="/2018/07/22/Pyziyuan/#Natural-Language-Processing" class="headerlink" title="Natural Language Processing"></a>Natural Language Processing</h2><p><em>Libraries for working with human languages.</em></p><ul><li><a href="https://github.com/RaRe-Technologies/gensim" target="_blank" rel="noopener">gensim</a> - Topic Modelling for Humans.</li><li><a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">Jieba</a> - Chinese text segmentation.</li><li><a href="https://github.com/saffsd/langid.py" target="_blank" rel="noopener">langid.py</a> - Stand-alone language identification system.</li><li><a href="http://www.nltk.org/" target="_blank" rel="noopener">NLTK</a> - A leading platform for building Python programs to work with human language data.</li><li><a href="http://www.clips.ua.ac.be/pattern" target="_blank" rel="noopener">Pattern</a> - A web mining module for the Python.</li><li><a href="https://github.com/aboSamoor/polyglot" target="_blank" rel="noopener">polyglot</a> - Natural language pipeline supporting hundreds of languages.</li><li><a href="https://github.com/isnowfy/snownlp" target="_blank" rel="noopener">SnowNLP</a> - A library for processing Chinese text.</li><li><a href="https://spacy.io/" target="_blank" rel="noopener">spaCy</a> - A library for industrial-strength natural language processing in Python and Cython.</li><li><a href="https://github.com/sloria/TextBlob" target="_blank" rel="noopener">TextBlob</a> - Providing a consistent API for diving into common NLP tasks.</li><li><a href="https://github.com/PetrochukM/PyTorch-NLP" target="_blank" rel="noopener">PyTorch-NLP</a> - A toolkit enabling rapid deep learning NLP prototyping for research.</li></ul><h2 id="Network-Virtualization"><a href="/2018/07/22/Pyziyuan/#Network-Virtualization" class="headerlink" title="Network Virtualization"></a>Network Virtualization</h2><p><em>Tools and libraries for Virtual Networking and SDN (Software Defined Networking).</em></p><ul><li><a href="http://mininet.org/" target="_blank" rel="noopener">Mininet</a> - A popular network emulator and API written in Python.</li><li><a href="https://github.com/noxrepo/pox" target="_blank" rel="noopener">POX</a> - An open source development platform for Python-based Software Defined Networking (SDN) control applications, such as OpenFlow SDN controllers.</li><li><a href="http://frenetic-lang.org/pyretic/" target="_blank" rel="noopener">Pyretic</a> - A member of the Frenetic family of SDN programming languages that provides powerful abstractions over network switches or emulators.</li><li><a href="https://github.com/sdn-ixp/internet2award" target="_blank" rel="noopener">SDX Platform</a> - SDN based IXP implementation that leverages Mininet, POX and Pyretic.</li></ul><h2 id="Networking"><a href="/2018/07/22/Pyziyuan/#Networking" class="headerlink" title="Networking"></a>Networking</h2><p><em>Libraries for networking programming.</em></p><ul><li><a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="noopener">asyncio</a> - (Python standard library) Asynchronous I/O, event loop, coroutines and tasks.</li><li><a href="https://github.com/dieseldev/diesel" target="_blank" rel="noopener">diesel</a> - Greenlet-based event I/O Framework for Python.</li><li><a href="https://github.com/quantmind/pulsar" target="_blank" rel="noopener">pulsar</a> - Event-driven concurrent framework for Python.</li><li><a href="http://zeromq.github.io/pyzmq/" target="_blank" rel="noopener">pyzmq</a> - A Python wrapper for the ZeroMQ message library.</li><li><a href="https://twistedmatrix.com/trac/" target="_blank" rel="noopener">Twisted</a> - An event-driven networking engine.</li><li><a href="https://github.com/smira/txZMQ" target="_blank" rel="noopener">txZMQ</a> - Twisted based wrapper for the ZeroMQ message library.</li><li><a href="https://github.com/napalm-automation/napalm" target="_blank" rel="noopener">NAPALM</a> - Cross-vendor API to manipulate network devices.</li></ul><h2 id="News-Feed"><a href="/2018/07/22/Pyziyuan/#News-Feed" class="headerlink" title="News Feed"></a>News Feed</h2><p><em>Libraries for building user’s activities.</em></p><ul><li><a href="https://github.com/justquick/django-activity-stream" target="_blank" rel="noopener">django-activity-stream</a> - Generating generic activity streams from the actions on your site.</li><li><a href="https://github.com/tschellenbach/Stream-Framework" target="_blank" rel="noopener">Stream-Framework</a> - Building newsfeed and notification systems using Cassandra and Redis.</li></ul><h2 id="ORM"><a href="/2018/07/22/Pyziyuan/#ORM" class="headerlink" title="ORM"></a>ORM</h2><p><em>Libraries that implement Object-Relational Mapping or data mapping techniques.</em></p><ul><li>Relational Databases<ul><li><a href="https://docs.djangoproject.com/en/dev/topics/db/models/" target="_blank" rel="noopener">Django Models</a> - A part of Django.</li><li><a href="http://www.sqlalchemy.org/" target="_blank" rel="noopener">SQLAlchemy</a> - The Python SQL Toolkit and Object Relational Mapper.<ul><li><a href="https://github.com/dahlia/awesome-sqlalchemy" target="_blank" rel="noopener">awesome-sqlalchemy</a></li></ul></li><li><a href="https://orator-orm.com" target="_blank" rel="noopener">Orator</a> -  The Orator ORM provides a simple yet beautiful ActiveRecord implementation.</li><li><a href="https://github.com/coleifer/peewee" target="_blank" rel="noopener">Peewee</a> - A small, expressive ORM.</li><li><a href="https://ponyorm.com/" target="_blank" rel="noopener">PonyORM</a> - ORM that provides a generator-oriented interface to SQL.</li><li><a href="https://github.com/web2py/pydal/" target="_blank" rel="noopener">pyDAL</a> - A pure Python Database Abstraction Layer.</li><li><a href="https://pypi.python.org/pypi/python-sql" target="_blank" rel="noopener">python-sql</a> - Write SQL queries pythonically.</li></ul></li><li>NoSQL Databases<ul><li><a href="https://github.com/django-nonrel/mongodb-engine" target="_blank" rel="noopener">django-mongodb-engine</a> - Django MongoDB Backend.</li><li><a href="https://github.com/stevearc/flywheel" target="_blank" rel="noopener">flywheel</a> - Object mapper for Amazon DynamoDB.</li><li><a href="https://github.com/stephenmcd/hot-redis" target="_blank" rel="noopener">hot-redis</a> - Rich Python data types for Redis.</li><li><a href="http://mongoengine.org/" target="_blank" rel="noopener">MongoEngine</a> - A Python Object-Document-Mapper for working with MongoDB.</li><li><a href="https://github.com/pynamodb/PynamoDB" target="_blank" rel="noopener">PynamoDB</a> - A Pythonic interface for <a href="https://aws.amazon.com/dynamodb/" target="_blank" rel="noopener">Amazon DynamoDB</a>.</li><li><a href="https://github.com/kiddouk/redisco" target="_blank" rel="noopener">redisco</a> - A Python Library for Simple Models and Containers Persisted in Redis.</li></ul></li><li>Others<ul><li><a href="https://github.com/terrible-ideas/butterdb" target="_blank" rel="noopener">butterdb</a> - A Python ORM for Google Drive Spreadsheets.</li><li><a href="https://github.com/pudo/dataset" target="_blank" rel="noopener">dataset</a> - A JSON-based database.</li></ul></li></ul><h2 id="Package-Management"><a href="/2018/07/22/Pyziyuan/#Package-Management" class="headerlink" title="Package Management"></a>Package Management</h2><p><em>Libraries for package and dependency management.</em></p><ul><li><a href="https://pip.pypa.io/en/stable/" target="_blank" rel="noopener">pip</a> - The Python package and dependency manager.<ul><li><a href="https://pypi.python.org/pypi" target="_blank" rel="noopener">Python Package Index</a></li></ul></li><li><a href="https://github.com/conda/conda/" target="_blank" rel="noopener">conda</a> - Cross-platform, Python-agnostic binary package manager.</li><li><a href="http://clarete.li/curdling/" target="_blank" rel="noopener">Curdling</a> - Curdling is a command line tool for managing Python packages.</li><li><a href="https://github.com/jazzband/pip-tools" target="_blank" rel="noopener">pip-tools</a> - A set of tools to keep your pinned Python dependencies fresh.</li><li><a href="http://pythonwheels.com/" target="_blank" rel="noopener">wheel</a> - The new standard of Python distribution and are intended to replace eggs.</li></ul><h2 id="Package-Repositories"><a href="/2018/07/22/Pyziyuan/#Package-Repositories" class="headerlink" title="Package Repositories"></a>Package Repositories</h2><p><em>Local PyPI repository server and proxies.</em></p><ul><li><a href="https://github.com/pypa/warehouse" target="_blank" rel="noopener">warehouse</a> - Next generation Python Package Repository (PyPI).<ul><li><a href="https://pypi.org/" target="_blank" rel="noopener">Warehouse</a></li></ul></li><li><a href="https://bitbucket.org/pypa/bandersnatch" target="_blank" rel="noopener">bandersnatch</a> - PyPI mirroring tool provided by Python Packaging Authority (PyPA).</li><li><a href="http://doc.devpi.net/latest/" target="_blank" rel="noopener">devpi</a> - PyPI server and packaging/testing/release tool.</li><li><a href="https://github.com/jazzband/localshop" target="_blank" rel="noopener">localshop</a> - Local PyPI server (custom packages and auto-mirroring of pypi).</li></ul><h2 id="Permissions"><a href="/2018/07/22/Pyziyuan/#Permissions" class="headerlink" title="Permissions"></a>Permissions</h2><p><em>Libraries that allow or deny users access to data or functionality.</em></p><ul><li><a href="https://github.com/neuman/python-carteblanche/" target="_blank" rel="noopener">Carteblanche</a> - Module to align code with thoughts of users and designers. Also magically handles navigation and permissions.</li><li><a href="https://github.com/django-guardian/django-guardian" target="_blank" rel="noopener">django-guardian</a> - Implementation of per object permissions for Django 1.2+</li><li><a href="https://github.com/dfunckt/django-rules" target="_blank" rel="noopener">django-rules</a> - A tiny but powerful app providing object-level permissions to Django, without requiring a database.</li></ul><h2 id="Processes"><a href="/2018/07/22/Pyziyuan/#Processes" class="headerlink" title="Processes"></a>Processes</h2><p><em>Libraries for starting and communicating with OS processes.</em></p><ul><li><a href="https://github.com/kennethreitz/delegator.py" target="_blank" rel="noopener">delegator.py</a> - <a href="https://docs.python.org/3.6/library/subprocess.html" target="_blank" rel="noopener">Subprocesses</a> for Humans™ 2.0.</li><li><a href="http://sarge.readthedocs.io/en/latest/" target="_blank" rel="noopener">sarge</a> - Yet another wrapper for subprocess.</li><li><a href="https://github.com/amoffat/sh" target="_blank" rel="noopener">sh</a> - A full-fledged subprocess replacement for Python.</li></ul><h2 id="Queue"><a href="/2018/07/22/Pyziyuan/#Queue" class="headerlink" title="Queue"></a>Queue</h2><p><em>Libraries for working with event and task queues.</em></p><ul><li><a href="http://www.celeryproject.org/" target="_blank" rel="noopener">celery</a> - An asynchronous task queue/job queue based on distributed message passing.</li><li><a href="https://github.com/coleifer/huey" target="_blank" rel="noopener">huey</a> - Little multi-threaded task queue.</li><li><a href="https://github.com/pricingassistant/mrq" target="_blank" rel="noopener">mrq</a> - Mr. Queue - A distributed worker task queue in Python using Redis &amp; gevent.</li><li><a href="http://python-rq.org/" target="_blank" rel="noopener">rq</a> - Simple job queues for Python.</li><li><a href="https://github.com/rdegges/simpleq" target="_blank" rel="noopener">simpleq</a> - A simple, infinitely scalable, Amazon SQS based queue.</li></ul><h2 id="Recommender-Systems"><a href="/2018/07/22/Pyziyuan/#Recommender-Systems" class="headerlink" title="Recommender Systems"></a>Recommender Systems</h2><p><em>Libraries for building recommender systems.</em></p><ul><li><a href="https://github.com/spotify/annoy" target="_blank" rel="noopener">annoy</a> - Approximate Nearest Neighbors in C++/Python optimized for memory usage.</li><li><a href="https://github.com/ibayer/fastFM" target="_blank" rel="noopener">fastFM</a> - A library for Factorization Machines.</li><li><a href="https://github.com/benfred/implicit" target="_blank" rel="noopener">implicit</a> - A fast Python implementation of collaborative filtering for implicit datasets.</li><li><a href="https://github.com/guestwalk/libffm" target="_blank" rel="noopener">libffm</a> - A library for Field-aware Factorization Machine (FFM).</li><li><a href="https://github.com/lyst/lightfm" target="_blank" rel="noopener">LightFM</a> - A Python implementation of a number of popular recommendation algorithms.</li><li><a href="https://github.com/maciejkula/spotlight" target="_blank" rel="noopener">Spotlight</a> - Deep recommender models using PyTorch.</li><li><a href="http://surpriselib.com" target="_blank" rel="noopener">surprise</a> - A scikit for building and analyzing recommender systems.</li><li><a href="https://github.com/jfkirk/tensorrec" target="_blank" rel="noopener">TensorRec</a> - A Recommendation Engine Framework in TensorFlow.</li></ul><h2 id="RESTful-API"><a href="/2018/07/22/Pyziyuan/#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h2><p><em>Libraries for developing RESTful APIs.</em></p><ul><li>Django<ul><li><a href="http://www.django-rest-framework.org/" target="_blank" rel="noopener">django-rest-framework</a> - A powerful and flexible toolkit to build web APIs.</li><li><a href="http://tastypieapi.org/" target="_blank" rel="noopener">django-tastypie</a> - Creating delicious APIs for Django apps.</li></ul></li><li>Flask<ul><li><a href="https://github.com/pyeve/eve" target="_blank" rel="noopener">eve</a> - REST API framework powered by Flask, MongoDB and good intentions.</li><li><a href="https://github.com/marselester/flask-api-utils" target="_blank" rel="noopener">flask-api-utils</a> - Taking care of API representation and authentication for Flask.</li><li><a href="http://www.flaskapi.org/" target="_blank" rel="noopener">flask-api</a> - Browsable Web APIs for Flask.</li><li><a href="https://github.com/flask-restful/flask-restful" target="_blank" rel="noopener">flask-restful</a> - Quickly building REST APIs for Flask.</li><li><a href="https://github.com/jfinkels/flask-restless" target="_blank" rel="noopener">flask-restless</a> - Generating RESTful APIs for database models defined with SQLAlchemy.</li></ul></li><li>Pyramid<ul><li><a href="https://github.com/Cornices/cornice" target="_blank" rel="noopener">cornice</a> - A RESTful framework for Pyramid.</li></ul></li><li>Framework agnostic<ul><li><a href="http://falconframework.org/" target="_blank" rel="noopener">falcon</a> - A high-performance framework for building cloud APIs and web app backends.</li><li><a href="https://github.com/timothycrosley/hug" target="_blank" rel="noopener">hug</a> - A Python3 framework for cleanly exposing APIs over HTTP and the Command Line with automatic documentation and validation.</li><li><a href="https://github.com/toastdriven/restless" target="_blank" rel="noopener">restless</a> - Framework agnostic REST framework based on lessons learned from Tastypie.</li><li><a href="https://github.com/vertical-knowledge/ripozo" target="_blank" rel="noopener">ripozo</a> - Quickly creating REST/HATEOAS/Hypermedia APIs.</li><li><a href="https://github.com/jeffknupp/sandman" target="_blank" rel="noopener">sandman</a> - Automated REST APIs for existing database-driven systems.</li><li><a href="https://github.com/encode/apistar" target="_blank" rel="noopener">apistar</a> - A smart Web API framework, designed for Python 3.</li></ul></li></ul><h2 id="RPC-Servers"><a href="/2018/07/22/Pyziyuan/#RPC-Servers" class="headerlink" title="RPC Servers"></a>RPC Servers</h2><p><em>RPC-compatible servers.</em></p><ul><li><a href="https://github.com/joshmarshall/jsonrpclib/" target="_blank" rel="noopener">SimpleJSONRPCServer</a> - This library is an implementation of the JSON-RPC specification.</li><li><a href="https://docs.python.org/3/library/xmlrpc.server.html" target="_blank" rel="noopener">SimpleXMLRPCServer</a> - (Python standard library) Simple XML-RPC server implementation, single-threaded.</li><li><a href="https://github.com/0rpc/zerorpc-python" target="_blank" rel="noopener">zeroRPC</a> - zerorpc is a flexible RPC implementation based on <a href="http://zeromq.org/" target="_blank" rel="noopener">ZeroMQ</a> and <a href="http://msgpack.org/" target="_blank" rel="noopener">MessagePack</a>.</li></ul><h2 id="Science"><a href="/2018/07/22/Pyziyuan/#Science" class="headerlink" title="Science"></a>Science</h2><p><em>Libraries for scientific computing.</em></p><ul><li><a href="http://www.astropy.org/" target="_blank" rel="noopener">astropy</a> - A community Python library for Astronomy.</li><li><a href="https://github.com/chapmanb/bcbio-nextgen" target="_blank" rel="noopener">bcbio-nextgen</a> - Providing best-practice pipelines for fully automated high throughput sequencing analysis.</li><li><a href="https://github.com/chapmanb/bcbb" target="_blank" rel="noopener">bccb</a> - Collection of useful code related to biological analysis.</li><li><a href="http://biopython.org/wiki/Main_Page" target="_blank" rel="noopener">Biopython</a> - Biopython is a set of freely available tools for biological computation.</li><li><a href="http://cclib.github.io/" target="_blank" rel="noopener">cclib</a> - A library for parsing and interpreting the results of computational chemistry packages.</li><li><a href="http://colour-science.org/" target="_blank" rel="noopener">Colour</a> - A colour science package implementing a comprehensive number of colour theory transformations and algorithms.</li><li><a href="https://networkx.github.io/" target="_blank" rel="noopener">NetworkX</a> - A high-productivity software for complex networks.</li><li><a href="http://nipy.org" target="_blank" rel="noopener">NIPY</a> - A collection of neuroimaging toolkits.</li><li><a href="http://www.numpy.org/" target="_blank" rel="noopener">NumPy</a> - A fundamental package for scientific computing with Python.</li><li><a href="http://openbabel.org/wiki/Main_Page" target="_blank" rel="noopener">Open Babel</a> - A chemical toolbox designed to speak the many languages of chemical data.</li><li><a href="https://github.com/obspy/obspy/wiki/" target="_blank" rel="noopener">ObsPy</a> - A Python toolbox for seismology.</li><li><a href="http://www.pydy.org/" target="_blank" rel="noopener">PyDy</a> - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion.</li><li><a href="https://github.com/pymc-devs/pymc3" target="_blank" rel="noopener">PyMC</a> - Markov Chain Monte Carlo sampling toolkit.</li><li><a href="http://qutip.org/" target="_blank" rel="noopener">QuTiP</a> - Quantum Toolbox in Python.</li><li><a href="http://www.rdkit.org/" target="_blank" rel="noopener">RDKit</a> - Cheminformatics and Machine Learning Software.</li><li><a href="https://www.scipy.org/" target="_blank" rel="noopener">SciPy</a> - A Python-based ecosystem of open-source software for mathematics, science, and engineering.</li><li><a href="https://github.com/statsmodels/statsmodels" target="_blank" rel="noopener">statsmodels</a> - Statistical modeling and econometrics in Python.</li><li><a href="https://github.com/sympy/sympy" target="_blank" rel="noopener">SymPy</a> - A Python library for symbolic mathematics.</li><li><a href="https://github.com/quantopian/zipline" target="_blank" rel="noopener">Zipline</a> - A Pythonic algorithmic trading library.</li><li><a href="https://bitbucket.org/simpy/simpy" target="_blank" rel="noopener">SimPy</a> -  A process-based discrete-event simulation framework.</li></ul><h2 id="Search"><a href="/2018/07/22/Pyziyuan/#Search" class="headerlink" title="Search"></a>Search</h2><p><em>Libraries and software for indexing and performing search queries on data.</em></p><ul><li><a href="https://github.com/django-haystack/django-haystack" target="_blank" rel="noopener">django-haystack</a> - Modular search for Django.</li><li><a href="https://github.com/elastic/elasticsearch-dsl-py" target="_blank" rel="noopener">elasticsearch-dsl-py</a> - The official high-level Python client for Elasticsearch.</li><li><a href="https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html" target="_blank" rel="noopener">elasticsearch-py</a> - The official low-level Python client for <a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="noopener">Elasticsearch</a>.</li><li><a href="https://github.com/seek-ai/esengine" target="_blank" rel="noopener">esengine</a> - ElasticSearch ODM (Object Document Mapper) for Python.</li><li><a href="https://github.com/django-haystack/pysolr" target="_blank" rel="noopener">pysolr</a> - A lightweight Python wrapper for Apache Solr (incl. SolrCloud awareness).</li><li><a href="https://github.com/edsu/solrpy" target="_blank" rel="noopener">solrpy</a> - A Python client for <a href="http://lucene.apache.org/solr/" target="_blank" rel="noopener">solr</a>.</li><li><a href="http://whoosh.readthedocs.io/en/latest/" target="_blank" rel="noopener">Whoosh</a> - A fast, pure Python search engine library.</li></ul><h2 id="Serialization"><a href="/2018/07/22/Pyziyuan/#Serialization" class="headerlink" title="Serialization"></a>Serialization</h2><p><em>Libraries for serializing complex data types</em></p><ul><li><a href="https://github.com/marshmallow-code/marshmallow" target="_blank" rel="noopener">marshmallow</a> - marshmallow is an ORM/ODM/framework-agnostic library for converting complex datatypes, such as objects, to and from native Python datatypes.</li></ul><h2 id="Serverless-Frameworks"><a href="/2018/07/22/Pyziyuan/#Serverless-Frameworks" class="headerlink" title="Serverless Frameworks"></a>Serverless Frameworks</h2><p><em>Frameworks for developing serverless Python code.</em></p><ul><li><a href="https://github.com/apex/apex" target="_blank" rel="noopener">apex</a> - Build, deploy, and manage <a href="https://aws.amazon.com/lambda/" target="_blank" rel="noopener">AWS Lambda</a> functions with ease.</li><li><a href="https://github.com/nficano/python-lambda" target="_blank" rel="noopener">python-lambda</a> - A toolkit for developing and deploying Python code in AWS Lambda.</li><li><a href="https://github.com/Miserlou/Zappa" target="_blank" rel="noopener">Zappa</a> - A tool for deploying WSGI applications on AWS Lambda and API Gateway.</li></ul><h2 id="Specific-Formats-Processing"><a href="/2018/07/22/Pyziyuan/#Specific-Formats-Processing" class="headerlink" title="Specific Formats Processing"></a>Specific Formats Processing</h2><p><em>Libraries for parsing and manipulating specific text formats.</em></p><ul><li>General<ul><li><a href="https://github.com/kennethreitz/tablib" target="_blank" rel="noopener">tablib</a> - A module for Tabular Datasets in XLS, CSV, JSON, YAML.</li></ul></li><li>Office<ul><li><a href="https://github.com/brianray/mm" target="_blank" rel="noopener">Marmir</a> - Takes Python data structures and turns them into spreadsheets.</li><li><a href="https://openpyxl.readthedocs.io/en/default/" target="_blank" rel="noopener">openpyxl</a> - A library for reading and writing Excel 2010 xlsx/xlsm/xltx/xltm files.</li><li><a href="https://github.com/pyexcel/pyexcel" target="_blank" rel="noopener">pyexcel</a> - Providing one API for reading, manipulating and writing csv, ods, xls, xlsx and xlsm files.</li><li><a href="https://github.com/python-openxml/python-docx" target="_blank" rel="noopener">python-docx</a> - Reads, queries and modifies Microsoft Word 2007/2008 docx files.</li><li><a href="https://github.com/scanny/python-pptx" target="_blank" rel="noopener">python-pptx</a> - Python library for creating and updating PowerPoint (.pptx) files.</li><li><a href="http://relatorio.tryton.org/" target="_blank" rel="noopener">relatorio</a> - Templating OpenDocument files.</li><li><a href="https://github.com/dagwieers/unoconv" target="_blank" rel="noopener">unoconv</a> - Convert between any document format supported by LibreOffice/OpenOffice.</li><li><a href="https://xlsxwriter.readthedocs.io" target="_blank" rel="noopener">XlsxWriter</a> - A Python module for creating Excel .xlsx files.</li><li><a href="https://www.xlwings.org" target="_blank" rel="noopener">xlwings</a> - A BSD-licensed library that makes it easy to call Python from Excel and vice versa.</li><li><a href="https://github.com/python-excel/xlwt" target="_blank" rel="noopener">xlwt</a> / <a href="https://github.com/python-excel/xlrd" target="_blank" rel="noopener">xlrd</a> - Writing and reading data and formatting information from Excel files.</li></ul></li><li>PDF<ul><li><a href="https://github.com/euske/pdfminer" target="_blank" rel="noopener">PDFMiner</a> - A tool for extracting information from PDF documents.</li><li><a href="https://github.com/mstamy2/PyPDF2" target="_blank" rel="noopener">PyPDF2</a> - A library capable of splitting, merging and transforming PDF pages.</li><li><a href="http://www.reportlab.com/opensource/" target="_blank" rel="noopener">ReportLab</a> - Allowing Rapid creation of rich PDF documents.</li></ul></li><li>Markdown<ul><li><a href="https://github.com/lepture/mistune" target="_blank" rel="noopener">Mistune</a> - Fastest and full featured pure Python parsers of Markdown.</li><li><a href="https://github.com/waylan/Python-Markdown" target="_blank" rel="noopener">Python-Markdown</a> - A Python implementation of John Gruber’s Markdown.</li></ul></li><li>YAML<ul><li><a href="http://pyyaml.org/" target="_blank" rel="noopener">PyYAML</a> - YAML implementations for Python.</li></ul></li><li>CSV<ul><li><a href="https://github.com/wireservice/csvkit" target="_blank" rel="noopener">csvkit</a> - Utilities for converting to and working with CSV.</li></ul></li><li>Archive<ul><li><a href="https://github.com/mitsuhiko/unp" target="_blank" rel="noopener">unp</a> - A command line tool that can unpack archives easily.</li></ul></li></ul><h2 id="Static-Site-Generator"><a href="/2018/07/22/Pyziyuan/#Static-Site-Generator" class="headerlink" title="Static Site Generator"></a>Static Site Generator</h2><p><em>Static site generator is a software that takes some text + templates as input and produces HTML files on the output.</em></p><ul><li><a href="https://github.com/eudicots/Cactus" target="_blank" rel="noopener">Cactus</a> - Static site generator for designers.</li><li><a href="http://hyde.github.io/" target="_blank" rel="noopener">Hyde</a> - Jinja2-based static web site generator.</li><li><a href="https://www.getlektor.com/" target="_blank" rel="noopener">Lektor</a> - An easy to use static CMS and blog engine.</li><li><a href="https://www.getnikola.com/" target="_blank" rel="noopener">Nikola</a> - A static website and blog generator.</li><li><a href="https://blog.getpelican.com/" target="_blank" rel="noopener">Pelican</a> - Uses Markdown or ReST for content and Jinja 2 for themes. Supports DVCS, Disqus. AGPL.</li><li><a href="http://tinkerer.me/" target="_blank" rel="noopener">Tinkerer</a> - Tinkerer is a blogging engine/.static website generator powered by Sphinx.</li></ul><h2 id="Tagging"><a href="/2018/07/22/Pyziyuan/#Tagging" class="headerlink" title="Tagging"></a>Tagging</h2><p><em>Libraries for tagging items.</em></p><ul><li><a href="https://github.com/alex/django-taggit" target="_blank" rel="noopener">django-taggit</a> - Simple tagging for Django.</li></ul><h2 id="Template-Engine"><a href="/2018/07/22/Pyziyuan/#Template-Engine" class="headerlink" title="Template Engine"></a>Template Engine</h2><p><em>Libraries and tools for templating and lexing.</em></p><ul><li><a href="https://genshi.edgewall.org/" target="_blank" rel="noopener">Genshi</a> - Python templating toolkit for generation of web-aware output.</li><li><a href="https://github.com/pallets/jinja" target="_blank" rel="noopener">Jinja2</a> - A modern and designer friendly templating language.</li><li><a href="http://www.makotemplates.org/" target="_blank" rel="noopener">Mako</a> - Hyperfast and lightweight templating for the Python platform.</li></ul><h2 id="Testing"><a href="/2018/07/22/Pyziyuan/#Testing" class="headerlink" title="Testing"></a>Testing</h2><p><em>Libraries for testing codebases and generating test data.</em></p><ul><li>Testing Frameworks<ul><li><a href="https://github.com/HypothesisWorks/hypothesis-python" target="_blank" rel="noopener">hypothesis</a> - Hypothesis is an advanced Quickcheck style property based testing library.</li><li><a href="http://nestorsalceda.github.io/mamba/" target="_blank" rel="noopener">mamba</a> - The definitive testing tool for Python. Born under the banner of BDD.</li><li><a href="https://github.com/nose-devs/nose" target="_blank" rel="noopener">nose</a> - A nicer unittest for Python.</li><li><a href="https://github.com/nose-devs/nose2" target="_blank" rel="noopener">nose2</a> - The successor to nose, based on unittest2.</li><li><a href="https://docs.pytest.org/en/latest/" target="_blank" rel="noopener">pytest</a> - A mature full-featured Python testing tool.</li><li><a href="https://github.com/robotframework/robotframework" target="_blank" rel="noopener">Robot Framework</a> - A generic test automation framework.</li><li><a href="https://docs.python.org/3/library/unittest.html" target="_blank" rel="noopener">unittest</a> - (Python standard library) Unit testing framework.</li></ul></li><li>Test Runners<ul><li><a href="https://github.com/CleanCut/green" target="_blank" rel="noopener">green</a> - A clean, colorful test runner.</li><li><a href="https://tox.readthedocs.io/en/latest/" target="_blank" rel="noopener">tox</a> - Auto builds and tests distributions in multiple Python versions</li></ul></li><li>GUI / Web Testing<ul><li><a href="https://github.com/locustio/locust" target="_blank" rel="noopener">locust</a> - Scalable user load testing tool written in Python.</li><li><a href="https://github.com/asweigart/pyautogui" target="_blank" rel="noopener">PyAutoGUI</a> - PyAutoGUI is a cross-platform GUI automation Python module for human beings.</li><li><a href="https://pypi.python.org/pypi/selenium" target="_blank" rel="noopener">Selenium</a> - Python bindings for <a href="http://www.seleniumhq.org/" target="_blank" rel="noopener">Selenium</a> WebDriver.</li><li><a href="https://github.com/seatgeek/sixpack" target="_blank" rel="noopener">sixpack</a> - A language-agnostic A/B Testing framework.</li><li><a href="https://github.com/cobrateam/splinter" target="_blank" rel="noopener">splinter</a> - Open source tool for testing web applications.</li></ul></li><li>Mock<ul><li><a href="https://pypi.python.org/pypi/doublex" target="_blank" rel="noopener">doublex</a> - Powerful test doubles framework for Python.</li><li><a href="https://github.com/spulec/freezegun" target="_blank" rel="noopener">freezegun</a> - Travel through time by mocking the datetime module.</li><li><a href="https://github.com/patrys/httmock" target="_blank" rel="noopener">httmock</a> - A mocking library for requests for Python 2.6+ and 3.2+.</li><li><a href="https://github.com/gabrielfalcao/HTTPretty" target="_blank" rel="noopener">httpretty</a> - HTTP request mock tool for Python.</li><li><a href="https://docs.python.org/3/library/unittest.mock.html" target="_blank" rel="noopener">mock</a> - (Python standard library) A mocking and patching library.</li><li><a href="https://github.com/mindflayer/python-mocket" target="_blank" rel="noopener">Mocket</a> - Socket Mock Framework plus HTTP[S]/asyncio/gevent mocking library with recording/replaying capability.</li><li><a href="https://github.com/getsentry/responses" target="_blank" rel="noopener">responses</a> - A utility library for mocking out the requests Python library.</li><li><a href="https://github.com/kevin1024/vcrpy" target="_blank" rel="noopener">VCR.py</a> - Record and replay HTTP interactions on your tests.</li></ul></li><li>Object Factories<ul><li><a href="https://github.com/FactoryBoy/factory_boy" target="_blank" rel="noopener">factory_boy</a> - A test fixtures replacement for Python.</li><li><a href="https://github.com/klen/mixer" target="_blank" rel="noopener">mixer</a> - Another fixtures replacement. Supported Django, Flask, SQLAlchemy, Peewee and etc.</li><li><a href="https://github.com/vandersonmota/model_mommy" target="_blank" rel="noopener">model_mommy</a> - Creating random fixtures for testing in Django.</li></ul></li><li>Code Coverage<ul><li><a href="https://pypi.python.org/pypi/coverage" target="_blank" rel="noopener">coverage</a> - Code coverage measurement.</li></ul></li><li>Fake Data<ul><li><a href="https://github.com/lk-geimfari/mimesis" target="_blank" rel="noopener">mimesis</a> - is a Python library that help you generate fake data.</li><li><a href="https://github.com/emirozer/fake2db" target="_blank" rel="noopener">fake2db</a> - Fake database generator.</li><li><a href="https://github.com/joke2k/faker" target="_blank" rel="noopener">faker</a> - A Python package that generates fake data.</li><li><a href="https://pypi.python.org/pypi/radar" target="_blank" rel="noopener">radar</a> - Generate random datetime / time.</li></ul></li><li>Error Handler<ul><li><a href="https://github.com/ajalt/fuckitpy" target="_blank" rel="noopener">FuckIt.py</a> - FuckIt.py uses state-of-the-art technology to make sure your Python code runs whether it has any right to or not.</li></ul></li></ul><h2 id="Text-Processing"><a href="/2018/07/22/Pyziyuan/#Text-Processing" class="headerlink" title="Text Processing"></a>Text Processing</h2><p><em>Libraries for parsing and manipulating plain texts.</em></p><ul><li>General<ul><li><a href="https://github.com/chardet/chardet" target="_blank" rel="noopener">chardet</a> - Python 2/3 compatible character encoding detector.</li><li><a href="https://docs.python.org/3/library/difflib.html" target="_blank" rel="noopener">difflib</a> - (Python standard library) Helpers for computing deltas.</li><li><a href="https://github.com/LuminosoInsight/python-ftfy" target="_blank" rel="noopener">ftfy</a> - Makes Unicode text less broken and more consistent automagically.</li><li><a href="https://github.com/seatgeek/fuzzywuzzy" target="_blank" rel="noopener">fuzzywuzzy</a> - Fuzzy String Matching.</li><li><a href="https://github.com/ztane/python-Levenshtein/" target="_blank" rel="noopener">Levenshtein</a> - Fast computation of Levenshtein distance and string similarity.</li><li><a href="https://github.com/vinta/pangu.py" target="_blank" rel="noopener">pangu.py</a> - Spacing texts for CJK and alphanumerics.</li><li><a href="https://github.com/pwaller/pyfiglet" target="_blank" rel="noopener">pyfiglet</a> - An implementation of figlet written in Python.</li><li><a href="https://github.com/mozillazg/python-pinyin" target="_blank" rel="noopener">pypinyin</a> - Convert Chinese hanzi to pinyin.</li><li><a href="https://github.com/skorokithakis/shortuuid" target="_blank" rel="noopener">shortuuid</a> - A generator library for concise, unambiguous and URL-safe UUIDs.</li><li><a href="https://github.com/orsinium/textdistance" target="_blank" rel="noopener">textdistance</a> - Compute distance between sequences. 30+ algorithms, pure python implementation, common interface, optional external libs usage.</li><li><a href="https://pypi.python.org/pypi/Unidecode" target="_blank" rel="noopener">unidecode</a> - ASCII transliterations of Unicode text.</li><li><a href="https://github.com/moskytw/uniout" target="_blank" rel="noopener">uniout</a> - Print readable chars instead of the escaped string.</li><li><a href="https://github.com/lxneng/xpinyin" target="_blank" rel="noopener">xpinyin</a> - A library to translate Chinese hanzi (漢字) to pinyin (拼音).</li></ul></li><li>Slugify<ul><li><a href="https://github.com/dimka665/awesome-slugify" target="_blank" rel="noopener">awesome-slugify</a> - A Python slugify library that can preserve unicode.</li><li><a href="https://github.com/un33k/python-slugify" target="_blank" rel="noopener">python-slugify</a> - A Python slugify library that translates unicode to ASCII.</li><li><a href="https://github.com/mozilla/unicode-slugify" target="_blank" rel="noopener">unicode-slugify</a> - A slugifier that generates unicode slugs with Django as a dependency.</li></ul></li><li>Parser<ul><li><a href="https://github.com/daviddrysdale/python-phonenumbers" target="_blank" rel="noopener">phonenumbers</a> - Parsing, formatting, storing and validating international phone numbers.</li><li><a href="http://www.dabeaz.com/ply/" target="_blank" rel="noopener">PLY</a> - Implementation of lex and yacc parsing tools for Python.</li><li><a href="http://pygments.org/" target="_blank" rel="noopener">Pygments</a> - A generic syntax highlighter.</li><li><a href="http://pyparsing.wikispaces.com/" target="_blank" rel="noopener">pyparsing</a> - A general purpose framework for generating parsers.</li><li><a href="https://github.com/derek73/python-nameparser" target="_blank" rel="noopener">python-nameparser</a> - Parsing human names into their individual components.</li><li><a href="https://github.com/selwin/python-user-agents" target="_blank" rel="noopener">python-user-agents</a> - Browser user agent parser.</li><li><a href="https://github.com/andialbrecht/sqlparse" target="_blank" rel="noopener">sqlparse</a> - A non-validating SQL parser.</li></ul></li></ul><h2 id="Third-party-APIs"><a href="/2018/07/22/Pyziyuan/#Third-party-APIs" class="headerlink" title="Third-party APIs"></a>Third-party APIs</h2><p><em>Libraries for accessing third party services APIs. See: <a href="https://github.com/realpython/list-of-python-api-wrappers" target="_blank" rel="noopener">List of Python API Wrappers and Libraries</a>.</em></p><ul><li><a href="https://libcloud.apache.org/" target="_blank" rel="noopener">apache-libcloud</a> - One Python library for all clouds.</li><li><a href="https://github.com/boto/boto3" target="_blank" rel="noopener">boto3</a> - Python interface to Amazon Web Services.</li><li><a href="https://github.com/istrategylabs/django-wordpress" target="_blank" rel="noopener">django-wordpress</a> - WordPress models and views for Django.</li><li><a href="https://github.com/mobolic/facebook-sdk" target="_blank" rel="noopener">facebook-sdk</a> - Facebook Platform Python SDK.</li><li><a href="https://github.com/jgorset/facepy" target="_blank" rel="noopener">facepy</a> - Facepy makes it really easy to interact with Facebook’s Graph API</li><li><a href="https://github.com/charlierguo/gmail" target="_blank" rel="noopener">gmail</a> - A Pythonic interface for Gmail.</li><li><a href="https://github.com/google/google-api-python-client" target="_blank" rel="noopener">google-api-python-client</a> - Google APIs Client Library for Python.</li><li><a href="https://github.com/burnash/gspread" target="_blank" rel="noopener">gspread</a> - Google Spreadsheets Python API.</li><li><a href="https://github.com/ryanmcgrath/twython" target="_blank" rel="noopener">twython</a> - A Python wrapper for the Twitter API.</li></ul><h2 id="URL-Manipulation"><a href="/2018/07/22/Pyziyuan/#URL-Manipulation" class="headerlink" title="URL Manipulation"></a>URL Manipulation</h2><p><em>Libraries for parsing URLs.</em></p><ul><li><a href="https://github.com/gruns/furl" target="_blank" rel="noopener">furl</a> - A small Python library that makes parsing and manipulating URLs easy.</li><li><a href="https://github.com/codeinthehole/purl" target="_blank" rel="noopener">purl</a> - A simple, immutable URL class with a clean API for interrogation and manipulation.</li><li><a href="https://github.com/ellisonleao/pyshorteners" target="_blank" rel="noopener">pyshorteners</a> - A pure Python URL shortening lib.</li><li><a href="https://github.com/Alir3z4/python-short_url" target="_blank" rel="noopener">short_url</a> - Python implementation for generating Tiny URL and bit.ly-like URLs.</li><li><a href="https://github.com/sloria/webargs" target="_blank" rel="noopener">webargs</a> - A friendly library for parsing HTTP request arguments, with built-in support for popular web frameworks, including Flask, Django, Bottle, Tornado, and Pyramid.</li></ul><h2 id="Video"><a href="/2018/07/22/Pyziyuan/#Video" class="headerlink" title="Video"></a>Video</h2><p><em>Libraries for manipulating video and GIFs.</em></p><ul><li><a href="http://zulko.github.io/moviepy/" target="_blank" rel="noopener">moviepy</a> - A module for script-based movie editing with many formats, including animated GIFs.</li><li><a href="https://github.com/aizvorski/scikit-video" target="_blank" rel="noopener">scikit-video</a> - Video processing routines for SciPy.</li></ul><h2 id="WSGI-Servers"><a href="/2018/07/22/Pyziyuan/#WSGI-Servers" class="headerlink" title="WSGI Servers"></a>WSGI Servers</h2><p><em>WSGI-compatible web servers.</em></p><ul><li><a href="https://pypi.python.org/pypi/bjoern" target="_blank" rel="noopener">bjoern</a> - Asynchronous, very fast and written in C.</li><li><a href="http://www.fapws.org/" target="_blank" rel="noopener">fapws3</a> - Asynchronous (network side only), written in C.</li><li><a href="https://pypi.python.org/pypi/gunicorn" target="_blank" rel="noopener">gunicorn</a> - Pre-forked, partly written in C.</li><li><a href="https://pypi.python.org/pypi/meinheld" target="_blank" rel="noopener">meinheld</a> - Asynchronous, partly written in C.</li><li><a href="https://github.com/hivesolutions/netius" target="_blank" rel="noopener">netius</a> - Asynchronous, very fast.</li><li><a href="https://pypi.python.org/pypi/rocket" target="_blank" rel="noopener">rocket</a> - Multi-threaded.</li><li><a href="https://uwsgi-docs.readthedocs.io/en/latest/" target="_blank" rel="noopener">uWSGI</a> - A project aims at developing a full stack for building hosting services, written in C.</li><li><a href="https://waitress.readthedocs.io/en/latest/" target="_blank" rel="noopener">waitress</a> - Multi-threaded, powers Pyramid.</li><li><a href="http://werkzeug.pocoo.org/" target="_blank" rel="noopener">Werkzeug</a> - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects.</li></ul><h2 id="Web-Content-Extracting"><a href="/2018/07/22/Pyziyuan/#Web-Content-Extracting" class="headerlink" title="Web Content Extracting"></a>Web Content Extracting</h2><p><em>Libraries for extracting web contents.</em></p><ul><li><a href="https://github.com/vinta/Haul" target="_blank" rel="noopener">Haul</a> - An Extensible Image Crawler.</li><li><a href="https://github.com/Alir3z4/html2text" target="_blank" rel="noopener">html2text</a> - Convert HTML to Markdown-formatted text.</li><li><a href="https://github.com/michaelhelmick/lassie" target="_blank" rel="noopener">lassie</a> - Web Content Retrieval for Humans.</li><li><a href="https://github.com/coleifer/micawber" target="_blank" rel="noopener">micawber</a> - A small library for extracting rich content from URLs.</li><li><a href="https://github.com/codelucas/newspaper" target="_blank" rel="noopener">newspaper</a> - News extraction, article extraction and content curation in Python.</li><li><a href="https://github.com/grangier/python-goose" target="_blank" rel="noopener">python-goose</a> - HTML Content/Article Extractor.</li><li><a href="https://github.com/buriy/python-readability" target="_blank" rel="noopener">python-readability</a> - Fast Python port of arc90’s readability tool.</li><li><a href="https://github.com/kennethreitz/requests-html" target="_blank" rel="noopener">requests-html</a> - Pythonic HTML Parsing for Humans.</li><li><a href="https://github.com/Alir3z4/python-sanitize" target="_blank" rel="noopener">sanitize</a> - Bringing sanity to world of messed-up data.</li><li><a href="https://github.com/miso-belica/sumy" target="_blank" rel="noopener">sumy</a> - A module for automatic summarization of text documents and HTML pages.</li><li><a href="https://github.com/deanmalmgren/textract" target="_blank" rel="noopener">textract</a> - Extract text from any document, Word, PowerPoint, PDFs, etc.</li><li><a href="https://github.com/gaojiuli/toapi" target="_blank" rel="noopener">toapi</a> - Every web site provides APIs.</li></ul><h2 id="Web-Crawling-amp-Web-Scraping"><a href="/2018/07/22/Pyziyuan/#Web-Crawling-amp-Web-Scraping" class="headerlink" title="Web Crawling &amp; Web Scraping"></a>Web Crawling &amp; Web Scraping</h2><p><em>Libraries to automate data extraction from websites.</em></p><ul><li><a href="https://github.com/chineking/cola" target="_blank" rel="noopener">cola</a> - A distributed crawling framework.</li><li><a href="https://github.com/matiasb/demiurge" target="_blank" rel="noopener">Demiurge</a> - PyQuery-based scraping micro-framework.</li><li><a href="http://pythonhosted.org/feedparser/" target="_blank" rel="noopener">feedparser</a> - Universal feed parser.</li><li><a href="http://grablib.org/" target="_blank" rel="noopener">Grab</a> - Site scraping framework.</li><li><a href="https://github.com/hickford/MechanicalSoup" target="_blank" rel="noopener">MechanicalSoup</a> - A Python library for automating interaction with websites.</li><li><a href="https://github.com/scrapinghub/portia" target="_blank" rel="noopener">portia</a> - Visual scraping for Scrapy.</li><li><a href="https://github.com/binux/pyspider" target="_blank" rel="noopener">pyspider</a> - A powerful spider system.</li><li><a href="https://github.com/jmcarp/robobrowser" target="_blank" rel="noopener">RoboBrowser</a> - A simple, Pythonic library for browsing the web without a standalone web browser.</li><li><a href="https://scrapy.org/" target="_blank" rel="noopener">Scrapy</a> - A fast high-level screen scraping and web crawling framework.</li></ul><h2 id="Web-Frameworks"><a href="/2018/07/22/Pyziyuan/#Web-Frameworks" class="headerlink" title="Web Frameworks"></a>Web Frameworks</h2><p><em>Full stack web frameworks.</em></p><ul><li><a href="http://bottlepy.org/docs/dev/index.html" target="_blank" rel="noopener">Bottle</a> - A fast, simple and lightweight WSGI micro web-framework.</li><li><a href="https://plot.ly/products/dash/" target="_blank" rel="noopener">Dash</a> - Built on top of Flask, React and Plotly aimed at analytical web applications.<ul><li><a href="https://github.com/Acrotrend/awesome-dash" target="_blank" rel="noopener">awesome-dash</a></li></ul></li><li><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a> - The most popular web framework in Python.<ul><li><a href="https://github.com/rosarior/awesome-django" target="_blank" rel="noopener">awesome-django</a></li></ul></li><li><a href="http://flask.pocoo.org/" target="_blank" rel="noopener">Flask</a> - A microframework for Python.<ul><li><a href="https://github.com/humiaozuzu/awesome-flask" target="_blank" rel="noopener">awesome-flask</a></li></ul></li><li><a href="https://pylonsproject.org/" target="_blank" rel="noopener">Pyramid</a> - A small, fast, down-to-earth, open source Python web framework.<ul><li><a href="https://github.com/uralbash/awesome-pyramid" target="_blank" rel="noopener">awesome-pyramid</a></li></ul></li><li><a href="https://github.com/channelcat/sanic" target="_blank" rel="noopener">Sanic</a> - Web server that’s written to go fast.</li><li><a href="http://www.tornadoweb.org/en/latest/" target="_blank" rel="noopener">Tornado</a> - A Web framework and asynchronous networking library.</li></ul><h2 id="WebSocket"><a href="/2018/07/22/Pyziyuan/#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p><em>Libraries for working with WebSocket.</em></p><ul><li><a href="https://github.com/crossbario/autobahn-python" target="_blank" rel="noopener">AutobahnPython</a> - WebSocket &amp; WAMP for Python on Twisted and <a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="noopener">asyncio</a>.</li><li><a href="https://github.com/crossbario/crossbar/" target="_blank" rel="noopener">Crossbar</a> - Open-source Unified Application Router (Websocket &amp; WAMP for Python on Autobahn).</li><li><a href="https://github.com/django/channels" target="_blank" rel="noopener">django-channels</a> - Developer-friendly asynchrony for Django</li><li><a href="https://github.com/stephenmcd/django-socketio" target="_blank" rel="noopener">django-socketio</a> - WebSockets for Django.</li><li><a href="https://github.com/Lawouach/WebSocket-for-Python" target="_blank" rel="noopener">WebSocket-for-Python</a> - WebSocket client and server library for Python 2 and 3 as well as PyPy.</li></ul><h1 id="Services"><a href="/2018/07/22/Pyziyuan/#Services" class="headerlink" title="Services"></a>Services</h1><p>Online tools and APIs to simplify development.</p><h2 id="Continuous-Integration"><a href="/2018/07/22/Pyziyuan/#Continuous-Integration" class="headerlink" title="Continuous Integration"></a>Continuous Integration</h2><p><em>See: <a href="https://github.com/ciandcd/awesome-ciandcd#online-build-system" target="_blank" rel="noopener">awesome-CIandCD</a>.</em></p><ul><li><a href="https://circleci.com/" target="_blank" rel="noopener">CircleCI</a> - A CI service that can run very fast parallel testing. (GitHub only)</li><li><a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a> - A popular CI service for your open source and <a href="https://travis-ci.com" target="_blank" rel="noopener">private</a> projects. (GitHub only)</li><li><a href="https://vexor.io" target="_blank" rel="noopener">Vexor CI</a> - A continuous integration tool for private apps with pay-per-minute billing model.</li><li><a href="http://www.wercker.com/" target="_blank" rel="noopener">Wercker</a> - A Docker-based platform for building and deploying applications and microservices.</li></ul><h2 id="Code-Quality"><a href="/2018/07/22/Pyziyuan/#Code-Quality" class="headerlink" title="Code Quality"></a>Code Quality</h2><ul><li><a href="https://www.codacy.com/" target="_blank" rel="noopener">Codacy</a> - Automated Code Review to ship better code, faster.</li><li><a href="https://codecov.io/" target="_blank" rel="noopener">Codecov</a> - Code coverage dashboard.</li><li><a href="https://www.codefactor.io/" target="_blank" rel="noopener">CodeFactor</a> - Automated Code Review for Git.</li><li><a href="https://landscape.io/" target="_blank" rel="noopener">Landscape</a> - Hosted continuous Python code metrics.</li></ul><h1 id="Resources"><a href="/2018/07/22/Pyziyuan/#Resources" class="headerlink" title="Resources"></a>Resources</h1><p>Where to discover new Python libraries.</p><h2 id="Podcasts"><a href="/2018/07/22/Pyziyuan/#Podcasts" class="headerlink" title="Podcasts"></a>Podcasts</h2><ul><li><a href="http://frompythonimportpodcast.com/" target="_blank" rel="noopener">From Python Import Podcast</a></li><li><a href="https://podcastinit.com/" target="_blank" rel="noopener">Podcast.init</a></li><li><a href="https://pythonbytes.fm" target="_blank" rel="noopener">Python Bytes</a></li><li><a href="http://pythontesting.net" target="_blank" rel="noopener">Python Testing</a></li><li><a href="http://radiofreepython.com/" target="_blank" rel="noopener">Radio Free Python</a></li><li><a href="https://talkpython.fm/" target="_blank" rel="noopener">Talk Python To Me</a></li></ul><h2 id="Twitter"><a href="/2018/07/22/Pyziyuan/#Twitter" class="headerlink" title="Twitter"></a>Twitter</h2><ul><li><a href="https://twitter.com/codetengu" target="_blank" rel="noopener">@codetengu</a></li><li><a href="https://twitter.com/getpy" target="_blank" rel="noopener">@getpy</a></li><li><a href="https://twitter.com/importpython" target="_blank" rel="noopener">@importpython</a></li><li><a href="https://twitter.com/planetpython" target="_blank" rel="noopener">@planetpython</a></li><li><a href="https://twitter.com/pycoders" target="_blank" rel="noopener">@pycoders</a></li><li><a href="https://twitter.com/pypi" target="_blank" rel="noopener">@pypi</a></li><li><a href="https://twitter.com/pythontrending" target="_blank" rel="noopener">@pythontrending</a></li><li><a href="https://twitter.com/PythonWeekly" target="_blank" rel="noopener">@PythonWeekly</a></li><li><a href="https://twitter.com/talkpython" target="_blank" rel="noopener">@TalkPython</a></li><li><a href="https://twitter.com/realpython" target="_blank" rel="noopener">@realpython</a></li></ul><h2 id="Websites"><a href="/2018/07/22/Pyziyuan/#Websites" class="headerlink" title="Websites"></a>Websites</h2><ul><li><a href="https://www.reddit.com/r/coolgithubprojects/" target="_blank" rel="noopener">/r/CoolGithubProjects</a></li><li><a href="https://www.reddit.com/r/python" target="_blank" rel="noopener">/r/Python</a></li><li><a href="https://python.libhunt.com/" target="_blank" rel="noopener">Awesome Python @LibHunt</a></li><li><a href="https://djangopackages.org/" target="_blank" rel="noopener">Django Packages</a></li><li><a href="https://www.fullstackpython.com/" target="_blank" rel="noopener">Full Stack Python</a></li><li><a href="http://pypi-ranking.info/alltime" target="_blank" rel="noopener">PyPI Ranking</a></li><li><a href="http://python3wos.appspot.com/" target="_blank" rel="noopener">Python 3 Wall of Superpowers</a></li><li><a href="http://www.oss.io/open-source/" target="_blank" rel="noopener">Python Hackers</a></li><li><a href="https://python.zeef.com/alan.richmond" target="_blank" rel="noopener">Python ZEEF</a></li><li><a href="https://www.ctolib.com/python/" target="_blank" rel="noopener">Python 开发社区</a></li><li><a href="https://realpython.com" target="_blank" rel="noopener">Real Python</a></li><li><a href="https://github.com/trending?l=python" target="_blank" rel="noopener">Trending Python repositories on GitHub today</a></li><li><a href="https://www.pyxll.com/blog/tools-for-working-with-excel-and-python/" target="_blank" rel="noopener">PyXLL</a></li></ul><h2 id="Weekly"><a href="/2018/07/22/Pyziyuan/#Weekly" class="headerlink" title="Weekly"></a>Weekly</h2><ul><li><a href="https://weekly.codetengu.com/" target="_blank" rel="noopener">CodeTengu Weekly 碼天狗週刊</a></li><li><a href="http://importpython.com/newsletter/" target="_blank" rel="noopener">Import Python Newsletter</a></li><li><a href="http://pycoders.com/" target="_blank" rel="noopener">Pycoder’s Weekly</a></li><li><a href="http://www.pythonweekly.com/" target="_blank" rel="noopener">Python Weekly</a></li><li><a href="https://realpython.com/python-tricks/" target="_blank" rel="noopener">Python Tricks</a></li></ul><h1 id="Other-Awesome-Lists"><a href="/2018/07/22/Pyziyuan/#Other-Awesome-Lists" class="headerlink" title="Other Awesome Lists"></a>Other Awesome Lists</h1><p>List of lists.</p><ul><li>Monty<ul><li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">awesome</a></li><li><a href="https://github.com/lk-geimfari/awesomo" target="_blank" rel="noopener">awesomo</a></li><li><a href="https://github.com/jnv/lists" target="_blank" rel="noopener">lists</a></li></ul></li><li>Python<ul><li><a href="https://github.com/kirang89/pycrumbs" target="_blank" rel="noopener">pycrumbs</a></li><li><a href="https://github.com/checkcheckzz/python-github-projects" target="_blank" rel="noopener">python-github-projects</a></li><li><a href="https://github.com/rasbt/python_reference" target="_blank" rel="noopener">python_reference</a></li><li><a href="https://github.com/svaksha/pythonidae" target="_blank" rel="noopener">pythonidae</a></li><li><a href="https://www.cybrhome.com/topic/python-podcasts" target="_blank" rel="noopener">Python Podcasts</a></li><li><a href="https://github.com/metakermit/awesome-python-for-social-good" target="_blank" rel="noopener">Python for Social Good</a></li></ul></li></ul><h1 id="Contributing"><a href="/2018/07/22/Pyziyuan/#Contributing" class="headerlink" title="Contributing"></a>Contributing</h1><p>Your contributions are always welcome! Please take a look at the <a href="https://github.com/vinta/awesome-python/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">contribution guidelines</a> first.</p><p>I will keep some pull requests open if I’m not sure whether those libraries are awesome, you could <a href="https://github.com/vinta/awesome-python/pulls" target="_blank" rel="noopener">vote for them</a> by adding :+1: to them. Pull requests will be merged when their votes reach <strong>20</strong>.</p><hr><p>If you have any question about this opinionated list, do not hesitate to contact me <a href="https://twitter.com/vinta" target="_blank" rel="noopener">@vinta</a> on Twitter or open an issue on GitHub.</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言资源大全中文版</title>
      <link href="/2018/07/22/CL/"/>
      <url>/2018/07/22/CL/</url>
      <content type="html"><![CDATA[<h2 id="构建系统"><a href="/2018/07/22/CL/#构建系统" class="headerlink" title="构建系统"></a>构建系统</h2><p>下面是一些 C 项目的自动化构建和测试工具。</p><ul><li>aimake：一个被设计来避免复杂配置的构建工具。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="http://nethack4.org/projects/aimake/" target="_blank" rel="noopener">官网</a></li><li>Autoconf：一个可扩展的 M4 宏指令包，提供命令行脚本来自动配置软件源码包，是 Autotools 的一部分。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://www.gnu.org/software/autoconf/" target="_blank" rel="noopener">官网</a></li><li>Automake：一个自动生成符合 GNU 代码标准的 Makefile.in 文件的工具。需要与 Autoconf 配合使用，它也是 Autotools 的一部分。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://www.gnu.org/software/automake/automake.html" target="_blank" rel="noopener">官网</a></li><li>Jam：一个构建系统，它被设计的比make更加易用。隐式地理解 C 的构建规则。<a href="https://en.wikipedia.org/wiki/Perforce_Jam#License" target="_blank" rel="noopener">Jam License</a>。<a href="https://www.perforce.com/resources/documentation/jam" target="_blank" rel="noopener">官网</a></li><li>Libtool：一个通用库支持脚本，是 Autotools 的一部分。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://gnu.org/software/libtool/" target="_blank" rel="noopener">官网</a></li><li>Meson：一个非常快，用户友好的构建系统，基于 Ninja。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>。<a href="http://mesonbuild.com/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="编译器"><a href="/2018/07/22/CL/#编译器" class="headerlink" title="编译器"></a>编译器</h2><ul><li>Clang：一个基于 LLVM 的 C 的编译器，支持 C11 标准。<a href="http://directory.fsf.org/wiki/License:IllinoisNCSA" target="_blank" rel="noopener">NCSA</a>。<a href="http://clang.llvm.org/" target="_blank" rel="noopener">官网</a></li><li>CompCert：一个经过充分验证的 C 编译器。支持几乎所有的 C89 标准。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL2.1</a> 或更高版本。<a href="https://github.com/AbsInt/CompCert" target="_blank" rel="noopener">官网</a></li><li>GCC：在它的编译器集合中提供了 C 编译器。支持 C11 和 OpenMP 的标准。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://gcc.gnu.org/" target="_blank" rel="noopener">官网</a></li><li>PCC：一个值得尊敬的 C 编译器，支持 C99 标准。<a href="http://pcc.ludd.ltu.se/licenses/" target="_blank" rel="noopener">Various licenses</a>，完全免费。<a href="http://pcc.ludd.ltu.se/" target="_blank" rel="noopener">官网</a></li><li>TCC：一个迷你，速度快的 C 编译器，支持 C99（除了复杂的类型）。 <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">LGPL2.1</a>。<a href="http://bellard.org/tcc/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="加密"><a href="/2018/07/22/CL/#加密" class="headerlink" title="加密"></a>加密</h2><ul><li>GnuTLS：一个安全通信库，实现了 SSL，TLS 和 DTLS。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL2.1</a> 或更高版本。<a href="http://www.gnutls.org/" target="_blank" rel="noopener">官网</a></li><li>libgcrypt：一个通用的密码库，支持多种加密方法。 <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a> （代码），<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL2.1</a> 或更高版本（说明书和工具）。<a href="https://www.gnu.org/software/libgcrypt/" target="_blank" rel="noopener">官网</a></li><li>OpenSSL：一个 SSL 和 TLS 协议的实现，还包括一个加密库。<a href="https://www.openssl.org/source/license.html" target="_blank" rel="noopener">Dual Licensed under the OpenSSL License and the SSLeay License</a>。<a href="https://www.openssl.org/" target="_blank" rel="noopener">官网</a></li><li>libsodium：一个现代，易用的加密库。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/jedisct1/libsodium" target="_blank" rel="noopener">官网</a></li><li>libtomcrypt：一个相当全面，模块化和可移植的工具集。公开领域。<a href="https://github.com/libtom/libtomcrypt" target="_blank" rel="noopener">官网</a></li><li>mbed TLS：一个 C 实现的加密库。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>。<a href="https://tls.mbed.org/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="数据库"><a href="/2018/07/22/CL/#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>下面列出了基于 C API 的数据库和数据存储</p><ul><li>BerkeleyDB：一个高性能的嵌入式键值对数据库。<a href="https://gnu.org/licenses/agpl.html" target="_blank" rel="noopener">GNU AGPLv3</a>。<a href="http://www.oracle.com/us/products/database/berkeley-db/overview/index.html" target="_blank" rel="noopener">官网</a></li><li>Hiredis：一个极简的 Redis 客户端。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="https://github.com/redis/hiredis" target="_blank" rel="noopener">官网</a></li><li>LMDB：一个极快，极简的嵌入式键值对数据存储系统。<a href="http://directory.fsf.org/wiki/License:OpenLDAPv2.7" target="_blank" rel="noopener">newOpenLDAP</a>。<a href="http://symas.com/mdb/" target="_blank" rel="noopener">官网</a></li><li>MariaDB：一个强壮，可扩展和可靠的 SQL 服务器，设计来作为 MySQL 的替代品。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="https://mariadb.com/" target="_blank" rel="noopener">官网</a></li><li>mongo-c-driver：一个高性能的 MongoDB 客户端。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>.<a href="https://github.com/mongodb/mongo-c-driver" target="_blank" rel="noopener">官网</a></li><li>PostgreSQL：一个强大的对象关系数据库系统。<a href="http://opensource.org/licenses/postgresql" target="_blank" rel="noopener">PostgreSQL licence</a>。<a href="http://www.postgresql.org/" target="_blank" rel="noopener">官网</a></li><li>recutils：一个工具和 C 库的集合，用于访问可编辑，纯文本的名为 recfiles 的数据库文件。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://www.gnu.org/software/recutils/" target="_blank" rel="noopener">官网</a></li><li>Redis：一个先进的键值对存储系统。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="http://redis.io/" target="_blank" rel="noopener">官网</a></li><li>sophia：一个现代，可嵌入的键值对数据库。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="https://github.com/pmwkaa/sophia" target="_blank" rel="noopener">官网</a></li><li>SQLite：一个自包含，无服务器，零配置，支持事务的 SQL 数据库引擎，包括 C 接口。公开领域。<a href="http://www.sqlite.org/" target="_blank" rel="noopener">官网</a></li><li>UnQLite：一个自包含，无服务器，零配置，支持事务的 NoSQL 数据库引擎，包括 C 接口。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="http://unqlite.org/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="文档生成"><a href="/2018/07/22/CL/#文档生成" class="headerlink" title="文档生成"></a>文档生成</h2><ul><li>Cxref：生成 C 程序的文档，支持 LaTeX，HTML， RTF 或者 SGML 的格式。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GPL2.1</a><a href="http://www.gedanken.org.uk/software/cxref/" target="_blank" rel="noopener">官网</a></li><li>DocOnce：一种朴素的标签标记语言，可以用来生成多种格式的文档。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">BSD-3clause</a>.<a href="https://hplgit.github.io/doconce/doc/web/index.html" target="_blank" rel="noopener">官网</a></li><li>Doxygen：一个事实上的标准工具，用于从注释的代码中生成 C 文档。能够生成多种格式的文档。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="http://www.stack.nl/~dimitri/doxygen/index.html" target="_blank" rel="noopener">官网</a></li><li>GTK-Doc：一个从注释的代码中生成 C 文档的工具，支持 Autotools <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU GPL2.1</a>（代码）, <a href="https://www.gnu.org/licenses/old-licenses/fdl-1.1.html" target="_blank" rel="noopener">GNU FDL1.1</a>。<a href="http://www.gtk.org/gtk-doc/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="编辑器"><a href="/2018/07/22/CL/#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>这些是特别精致，IDE 类型的编辑器。如果你想要一个程序员的文本编辑器，看别的地方。此外，不管你选择哪一款编辑器，它都支持 C。</p><ul><li>Anjuta DevStudio：GNOME IDE。 <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="http://anjuta.org/" target="_blank" rel="noopener">官网</a></li><li>Code::Blocks：一个可扩展，可配置的 IDE，支持 C。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a>。<a href="http://www.codeblocks.org/" target="_blank" rel="noopener">官网</a></li><li>CodeLite：一个跨平台的 IDE。 <a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="http://www.codelite.org/" target="_blank" rel="noopener">官网</a></li><li>Eclipse：一个用 Java 写成的 IDE。 <a href="http://directory.fsf.org/wiki/License:EPLv1.0" target="_blank" rel="noopener">EPL</a>。<a href="http://www.eclipse.org/ide/" target="_blank" rel="noopener">官网</a></li><li>Geany：一个很小很快的 IDE。 <a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>及更高版本。<a href="http://www.geany.org/" target="_blank" rel="noopener">官网</a></li><li>KDevelop：KDE IDE. <a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="https://www.kdevelop.org/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="环境"><a href="/2018/07/22/CL/#环境" class="headerlink" title="环境"></a>环境</h2><p>下面列出了被设计来引领 Windows 进入支持 C 的 21 世纪的技术。</p><ul><li>Cygwin：被设计用于在 Windows 下模拟 POSIX 兼容环境。<a href="https://cygwin.com/licensing.html" target="_blank" rel="noopener">Various licenses, all free</a>。<a href="https://cygwin.com/" target="_blank" rel="noopener">官网</a></li><li>MinGW-w64：一个 Windows 下极简的 C 开发环境，支持 64 位。<a href="http://mingw.org/license" target="_blank" rel="noopener">Various licenses, all free</a>。<a href="http://mingw-w64.yaxm.org/doku.php/start" target="_blank" rel="noopener">官网</a></li></ul><h2 id="框架"><a href="/2018/07/22/CL/#框架" class="headerlink" title="框架"></a>框架</h2><p>这一节包括提供数据结构的大型库和你所期待“现代”的标准库。</p><ul><li>APR：Apache Portable Runtime；另一个跨平台的实用函数库。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>。<a href="http://apr.apache.org/" target="_blank" rel="noopener">官网</a></li><li>C Algorithms：一个常用算法和数据结构的集合。<a href="https://github.com/fragglet/c-algorithms" target="_blank" rel="noopener">官网</a></li><li>CPL：The Common Pipeline Library；一系列详尽，高效和强壮的软件工具包。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="http://www.eso.org/sci/software/cpl/" target="_blank" rel="noopener">官网</a></li><li>EFL：一个大型实用数据结构和函数的的集合。多种许可证，完全免费。<a href="https://www.enlightenment.org/p.php?p=about/efl" target="_blank" rel="noopener">官网</a></li><li>GLib：一个便携，高效和强大的实用函数和数据结构库。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a>。<a href="https://wiki.gnome.org/Projects/GLib" target="_blank" rel="noopener">官网</a></li><li>GIO：一个现代和易用的 VFS API。[GNU LGPL2.1]。<a href="https://developer.gnome.org/gio/" target="_blank" rel="noopener">官网</a></li><li>GObject：一个 C 的面向对象系统和对象模型。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a>。<a href="https://developer.gnome.org/gobject/stable/" target="_blank" rel="noopener">官网</a></li><li>libnih：一个轻量级的 C 函数和数据结构库。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="https://github.com/keybuk/libnih" target="_blank" rel="noopener">官网</a></li><li>libU：一个提供基本实用函数的迷你库，包括内存分配，字符串处理和日志功能。<a href="http://www.koanlogic.com/libu/" target="_blank" rel="noopener">官网</a></li><li>PBL：一个包括实用函数，特色数据结构等的大型库。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a>及更高版本（库），<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>及更高版本（测试代码）。<a href="http://www.mission-base.com/peter/source/" target="_blank" rel="noopener">官网</a></li><li>qlibc：一个简单且强大的 C 库，当我们想要小且轻的库时，可作为 Glib 的替代品。<a href="https://github.com/wolkykim/qlibc/blob/master/LICENSE" target="_blank" rel="noopener">qLib license</a> (类似于 <a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>)。<a href="https://github.com/wolkykim/qlibc" target="_blank" rel="noopener">官网</a></li><li>stb：一系列单文件 C 库。公共领域。<a href="https://github.com/nothings/stb" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/libcstl/" target="_blank" rel="noopener">libcstl</a>：标准C语言通用数据结构和常用算法库。<a href="http://libcstl.org/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="游戏编程"><a href="/2018/07/22/CL/#游戏编程" class="headerlink" title="游戏编程"></a>游戏编程</h2><h3 id="引擎"><a href="/2018/07/22/CL/#引擎" class="headerlink" title="引擎"></a>引擎</h3><p>这些作为 C 游戏编程代码的例子。</p><ul><li><a href="http://hao.jobbole.com/corange/" target="_blank" rel="noopener">Corange</a>：一个纯 C 的游戏引擎。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="https://github.com/orangeduck/Corange" target="_blank" rel="noopener">官网</a></li><li>Darkplaces：一个 Quake2 引擎的修改版本。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="https://icculus.org/twilight/darkplaces/" target="_blank" rel="noopener">官网</a></li><li>ioquake3：Quake3 引擎，终于免费啦。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="https://github.com/ioquake/ioq3" target="_blank" rel="noopener">官网</a></li><li>Orx：一个便携，轻量级，插件化，数据驱动，面向 2D 的游戏引擎。<a href="http://directory.fsf.org/wiki/License:Zlib" target="_blank" rel="noopener">zlib</a>。<a href="https://bitbucket.org/orx/orx" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/quake2/" target="_blank" rel="noopener">Quake2</a>：Quake2 引擎。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="https://github.com/id-Software/Quake-2" target="_blank" rel="noopener">官网</a></li><li>Spearmint：一个为 FPS 游戏设计的引擎。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a>及更高版本。<a href="https://github.com/zturtleman/spearmint" target="_blank" rel="noopener">官网</a></li></ul><h3 id="资源"><a href="/2018/07/22/CL/#资源" class="headerlink" title="资源"></a>资源</h3><p>这些是筛选过的，对游戏编程有用的库。</p><ul><li>Allegro：一个跨平台，视频游戏开发和多媒体库。<a href="http://directory.fsf.org/wiki/License:Zlib" target="_blank" rel="noopener">zlib</a>。<a href="http://liballeg.org" target="_blank" rel="noopener">官网</a></li><li>Chipmunk2D：一个快且轻量级的 2D 游戏物理库。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/slembcke/Chipmunk2D" target="_blank" rel="noopener">官网</a></li><li>CSFML：一个用 C 封装的 <a href="http://www.sfml-dev.org/index.php" target="_blank" rel="noopener">SFML</a>。<a href="http://directory.fsf.org/wiki/License:Zlib" target="_blank" rel="noopener">zlib</a>。<a href="http://www.sfml-dev.org/download/csfml/" target="_blank" rel="noopener">官网</a></li><li>FreeGLUT：一个替代性的 OpenGL 实用工具包。允许用 OpenGL 上下文创建和管理窗口。<a href="http://directory.fsf.org/wiki/License:X11" target="_blank" rel="noopener">X11</a>。<a href="https://github.com/dcnieho/FreeGLUT" target="_blank" rel="noopener">官网</a></li><li>GLFW：一个使用 OpenGL 上下文创建窗口的多平台库。<a href="http://directory.fsf.org/wiki/License:Zlib" target="_blank" rel="noopener">zlib</a>。<a href="http://www.glfw.org/" target="_blank" rel="noopener">官网</a></li><li>libao：一个有多种输出的跨平台音频库。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>及更高版本。<a href="https://github.com/timonwong/libao" target="_blank" rel="noopener">官网</a></li><li>RetroArch：<a href="http://www.libretro.com/" target="_blank" rel="noopener">libretro</a> 的参考前端。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a>。<a href="https://github.com/libretro/RetroArch" target="_blank" rel="noopener">官网</a></li><li>SDL：一个跨平台库，通过 OpenGL 提供音频，键盘，鼠标，操纵杆和图形硬件的底层访问。<a href="http://directory.fsf.org/wiki/License:Zlib" target="_blank" rel="noopener">zlib</a>。<a href="https://www.libsdl.org/" target="_blank" rel="noopener">官网</a></li><li>SDL2：一个跨平台库，通过 OpenGL 提供音频，键盘，鼠标，操纵杆和图形硬件的底层访问。这是最新版本。<a href="http://directory.fsf.org/wiki/License:Zlib" target="_blank" rel="noopener">zlib</a>。<a href="https://www.libsdl.org/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="通用编程"><a href="/2018/07/22/CL/#通用编程" class="headerlink" title="通用编程"></a>通用编程</h2><ul><li>klib：小且轻量级的常用算法和数据结构实现。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/attractivechaos/klib" target="_blank" rel="noopener">官网</a></li></ul><h2 id="图形"><a href="/2018/07/22/CL/#图形" class="headerlink" title="图形"></a>图形</h2><ul><li>Cairo：一个 2D 图像库。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a> 或者 <a href="https://directory.fsf.org/wiki/License:MPLv1.1" target="_blank" rel="noopener">MPLv1.1</a>。<a href="http://cairographics.org/" target="_blank" rel="noopener">官网</a></li><li>Cogl：一个 GPU 图像和实用 API。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>（依赖使用 <a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a> 许可，库使用 <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">LGPLv2.1</a> 许可）。<a href="https://github.com/rib/cogl-web/wiki" target="_blank" rel="noopener">官网</a></li><li>Clutter：一个基于 OpenGL 的 UI 库。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a>。<a href="https://blogs.gnome.org/clutter/get-it/" target="_blank" rel="noopener">官网</a></li><li>heman：一个迷你图像实用工具库，处理高度图，法线图，距离场等。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/prideout/heman" target="_blank" rel="noopener">官网</a></li><li>libcaca：一个基于终端接口的 ASCII 渲染器。<a href="http://www.wtfpl.net/txt/copying/" target="_blank" rel="noopener">WTFPLv2</a>。<a href="https://github.com/cacalabs/libcaca" target="_blank" rel="noopener">官网</a></li><li>libimagequant：小且轻量级的库，用于高质量的从 RGBA 图像到 8 位像素图的转换。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="https://pngquant.org/lib/" target="_blank" rel="noopener">官网</a></li><li>libjpeg-turbo：一个更快的读写 JPEG 文件库。<a href="http://www.libjpeg-turbo.org/About/License" target="_blank" rel="noopener">Various licences</a>。<a href="http://libjpeg-turbo.virtualgl.org/" target="_blank" rel="noopener">官网</a></li><li>libpng：官方 PNG 参考库。<a href="http://www.libpng.org/pub/png/src/libpng-LICENSE.txt" target="_blank" rel="noopener">libpng license</a>。<a href="https://http://www.libpng.org/" target="_blank" rel="noopener">官网</a></li><li>libxmi：一个光栅化 2D 位图的函数库。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://gnu.org/software/libxmi/" target="_blank" rel="noopener">官网</a></li><li>mozjpeg：一个提升 JPEG 图像质量的编码器。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="https://github.com/mozilla/mozjpeg" target="_blank" rel="noopener">官网</a></li><li>OpenGL：一个高性能图像的工业标准，提供了原生 C语言 绑定。<a href="http://www.sgi.com/tech/opengl/?/license.html" target="_blank" rel="noopener">Various licenses</a>。<a href="https://www.opengl.org/" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/craft/" target="_blank" rel="noopener">Craft</a>：一个利用OpenGL使用C编写的简单MineCraft的克隆。<a href="http://www.michaelfogleman.com/craft/" target="_blank" rel="noopener">官网</a>、<a href="https://github.com/fogleman/Craft" target="_blank" rel="noopener">GitHub</a></li></ul><h2 id="GUI"><a href="/2018/07/22/CL/#GUI" class="headerlink" title="GUI"></a>GUI</h2><p>这些具体来说就是<a href="https://en.wikipedia.org/wiki/Widget_toolkit" target="_blank" rel="noopener">控件工具包</a></p><ul><li>GTK+：一个跨平台的控件工具包。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a>。<a href="http://www.gtk.org/" target="_blank" rel="noopener">官网</a></li><li>IUP：另一个跨平台的控件工具包。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="http://webserver2.tecgraf.puc-rio.br/iup/" target="_blank" rel="noopener">官网</a></li><li>Tk：一个基本控件工具包，Tcl/Tk 的一部分。<a href="http://www.tcl.tk/software/tcltk/license.html" target="_blank" rel="noopener">Tcl/Tk License</a>。<a href="http://www.tcl.tk/" target="_blank" rel="noopener">官网</a></li><li>XForms Toolkit：一个为 XWindow 设计的控件工具包。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a>。<a href="http://xforms-toolkit.org/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="JSON"><a href="/2018/07/22/CL/#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul><li>Jansson：一个编码，解码和处理 JSON 的 C 库。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="http://www.digip.org/jansson/" target="_blank" rel="noopener">官网</a></li><li>jsmn：一个极简的 JSON 解析器。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="http://zserge.com/jsmn.html" target="_blank" rel="noopener">官网</a></li><li>json-c：一个处理 JSON 的库。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/json-c/json-c/wiki" target="_blank" rel="noopener">官网</a></li><li>WJElement：高级 JSON 处理库，支持 JSON Schema。任意版本的 LGPL。<a href="https://github.com/netmail-open/wjelement/" target="_blank" rel="noopener">官网</a></li><li>YAJL：一个很快的 JSON 流解析 C 库。<a href="http://directory.fsf.org/wiki/License:ISC" target="_blank" rel="noopener">ISC</a>。<a href="https://lloyd.github.io/yajl/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="学习、参考和指南"><a href="/2018/07/22/CL/#学习、参考和指南" class="headerlink" title="学习、参考和指南"></a>学习、参考和指南</h2><p>下面列出了学习 C 编程的资源，或者跟 C 编程相关的有用的东西。</p><h3 id="在线"><a href="/2018/07/22/CL/#在线" class="headerlink" title="在线"></a>在线</h3><h4 id="参考"><a href="/2018/07/22/CL/#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://www.securecoding.cert.org/confluence/display/c/SEI+CERT+C+Coding+Standard" target="_blank" rel="noopener">SEI CERT C 编码标准</a></li><li><a href="http://c-faq.com/" target="_blank" rel="noopener">C FAQ：comp.lang.c 常见问题</a></li><li><a href="http://www.etalabs.net/compare_libcs.html" target="_blank" rel="noopener">GNU/Linux 下 C/POSIX 标准库实现的比较</a></li><li><a href="http://www.open-std.org/JTC1/SC22/WG14/" target="_blank" rel="noopener">C11 标准草案</a></li><li><a href="https://www.gnu.org/software/gnu-c-manual/" target="_blank" rel="noopener">GNU C 参考手册</a></li><li><a href="http://kamalatta.ddnss.de/otherdocs/pikestyle.html" target="_blank" rel="noopener">Robert Pike 的 C 笔记</a></li></ul><h4 id="初级"><a href="/2018/07/22/CL/#初级" class="headerlink" title="初级"></a>初级</h4><ul><li><a href="http://home.netcom.com/~tjensen/ptr/pointers.htm" target="_blank" rel="noopener">指针教程</a></li><li><a href="http://blog.jobbole.com/25409/" target="_blank" rel="noopener">C 语言指针 5 分钟教程</a></li><li><a href="http://blog.jobbole.com/44845/" target="_blank" rel="noopener">C 语言内存地址基础</a></li><li><a href="http://blog.jobbole.com/44639/" target="_blank" rel="noopener">C 语言函数指针基础</a></li><li><a href="http://blog.jobbole.com/44863/" target="_blank" rel="noopener">C 语言指针和数组基础</a></li><li><a href="http://nethack4.org/blog/building-c.html" target="_blank" rel="noopener">构建 C 项目</a></li><li><a href="https://en.wikibooks.org/wiki/C_Programming" target="_blank" rel="noopener">C 编程百科全书</a></li><li><a href="https://gist.github.com/eatonphil/21b3d6569f24ad164365" target="_blank" rel="noopener">“有趣”的 C 介绍</a></li><li><a href="https://www.recurse.com/blog/5-learning-c-with-gdb" target="_blank" rel="noopener">用 GDB 学习 C</a></li><li><a href="https://computing.llnl.gov/tutorials/pthreads/" target="_blank" rel="noopener">POSIX 线程编程指南</a> (有点过时，但大部分还是有效和有用的)</li><li><a href="http://www.crasseux.com/books/ctut.pdf" target="_blank" rel="noopener">GNU C 编程指南</a> (在线 PDF)</li><li><a href="http://blog.pkh.me/p/20-templating-in-c.html" target="_blank" rel="noopener">C 语言中的模板</a></li></ul><h4 id="中级"><a href="/2018/07/22/CL/#中级" class="headerlink" title="中级"></a>中级</h4><ul><li><a href="https://blogs.oracle.com/ksplice/entry/8_gdb_tricks_you_should" target="_blank" rel="noopener">8 个你应该知道的 GDB 技巧</a></li><li><a href="http://blog.noctua-software.com/c-tricks.html" target="_blank" rel="noopener">10 个 C99 技巧</a></li><li><a href="http://jvns.ca/blog/2014/12/14/fun-with-threads/" target="_blank" rel="noopener">深入并发：尝试互斥锁和原子操作</a></li><li><a href="https://www.youtube.com/playlist?list=PLLX-Q6B8xqZ8n8bwjGdzBJ25X2utwnoEG" target="_blank" rel="noopener">OpenMP 介绍</a> (视频)</li><li><a href="https://computing.llnl.gov/tutorials/openMP/" target="_blank" rel="noopener">OpenMP 指南</a> (针对 OpenMP3 标准)</li><li><a href="http://www.tedunangst.com/flak/post/memcpy-vs-memmove" target="_blank" rel="noopener">memcpy 与 memmove 的比较</a></li><li><a href="https://computing.llnl.gov/tutorials/mpi/" target="_blank" rel="noopener">MPI 指南</a></li><li><a href="http://proprogramming.org/some-unknown-features-or-tricks-in-c-language/" target="_blank" rel="noopener">C 语言中一些未知特性或者技巧</a></li><li><a href="http://blog.jobbole.com/57822/" target="_blank" rel="noopener">失落的 C 语言结构体封装艺术</a></li><li><a href="http://marek.vavrusa.com/c/memory/2015/02/20/memory/" target="_blank" rel="noopener">C 程序员需要了解的内存知识</a></li><li><a href="http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html" target="_blank" rel="noopener">每个 C 程序员需要知道的未定义行为知识</a></li></ul><h4 id="高级"><a href="/2018/07/22/CL/#高级" class="headerlink" title="高级"></a>高级</h4><ul><li><a href="http://250bpm.com/blog:56" target="_blank" rel="noopener">C 中的高级元编程</a></li><li><a href="http://danluu.com/malloc-tutorial/" target="_blank" rel="noopener">一个快速教程：如何实现和调试 malloc，free，calloc，和 realloc</a></li><li><a href="https://graphics.stanford.edu/~seander/bithacks.html" target="_blank" rel="noopener">位操作技巧</a></li><li><a href="http://kukuruku.co/hub/programming/i-do-not-know-c" target="_blank" rel="noopener">我不懂 C</a></li><li><a href="https://snai.pe/c/c-smart-pointers/" target="_blank" rel="noopener">在 C 语言中实现智能指针</a></li><li><a href="http://www.greenend.org.uk/rjk/tech/inline.html" target="_blank" rel="noopener">C 中的内联函数</a></li><li><a href="http://www.chiark.greenend.org.uk/~sgtatham/mp/" target="_blank" rel="noopener">C 中的自定义控制结构元编程</a></li><li><a href="http://www.samnip.ps/thought/macro-storage-for-inverse-comma" target="_blank" rel="noopener">用 C 的宏解决临时内存问题</a></li><li><a href="https://docs.google.com/presentation/d/1h49gY3TSiayLMXYmRMaAEMl05FaJ-Z6jDOWOz3EsqqQ/edit?pli=1#slide=id.gaf50702c_0153" target="_blank" rel="noopener">C 语言中一些不为人知的角落</a></li><li><a href="http://www.codeproject.com/Articles/6154/Writing-Efficient-C-and-C-Code-Optimization" target="_blank" rel="noopener">编写高效的 C 和 C 代码优化</a></li></ul><h4 id="自学教程"><a href="/2018/07/22/CL/#自学教程" class="headerlink" title="自学教程"></a>自学教程</h4><ul><li><a href="http://www.cppinstitute.org/?page_id=1487" target="_blank" rel="noopener">C 语言认证协会预备课程</a></li></ul><h3 id="实体书"><a href="/2018/07/22/CL/#实体书" class="headerlink" title="实体书"></a>实体书</h3><h4 id="参考资料"><a href="/2018/07/22/CL/#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="http://careferencemanual.com/" target="_blank" rel="noopener">C: A Reference Manual 5E</a>：C99 完全参考手册</li><li><a href="http://shop.oreilly.com/product/9780596004361.do" target="_blank" rel="noopener">C Pocket Reference</a>：C99 简明参考手册</li><li><a href="https://en.wikipedia.org/wiki/The_C_Programming_Language" target="_blank" rel="noopener">The C Programming Language 2E</a>：第一本 C 语言书籍，由 C 的创造者编写。</li></ul><h4 id="初级-1"><a href="/2018/07/22/CL/#初级-1" class="headerlink" title="初级"></a>初级</h4><ul><li><a href="http://www.pearsonhighered.com/educator/product/C-Primer-Plus-6E/9780321928429.page" target="_blank" rel="noopener">C Primer Plus 6E</a>：一个全面的 C11 编程指南。</li><li><a href="http://knking.com/books/c2/index.html" target="_blank" rel="noopener">C Programming: A Modern Approach</a>：一本极好的学习 C 基础的书。</li><li><a href="http://shop.oreilly.com/product/0636920015482.do" target="_blank" rel="noopener">Head First C</a>：一本“深入浅出”风格的学习 C 的书籍。</li></ul><h4 id="中级-1"><a href="/2018/07/22/CL/#中级-1" class="headerlink" title="中级"></a>中级</h4><ul><li><a href="http://shop.oreilly.com/product/0636920033677.do" target="_blank" rel="noopener">21st Century C</a>：一本非常好的 C 语言书籍，可作为第二选择。</li><li><a href="http://shop.oreilly.com/product/0636920028000.do" target="_blank" rel="noopener">Understanding and Using C Pointers</a>：一本深入讨论 C 指针的书。</li><li><a href="http://shop.oreilly.com/product/0636920026136.do" target="_blank" rel="noopener">ZeroMQ</a>：一本介绍如何用 C 使用 ZeroMQ 的书。</li></ul><h4 id="高级-1"><a href="/2018/07/22/CL/#高级-1" class="headerlink" title="高级"></a>高级</h4><ul><li><a href="http://dl.acm.org/citation.cfm?id=179241" target="_blank" rel="noopener">Expert C Programming: Deep C Secrets</a>：一本从有趣，深度和娱乐的视角分析 C 内部结构的书籍。</li></ul><h2 id="多媒体"><a href="/2018/07/22/CL/#多媒体" class="headerlink" title="多媒体"></a>多媒体</h2><ul><li>FFMPEG：一个完整，跨平台的录音，转换和流化视频以及音频的解决方案。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a> 或更高版本，部分是 <a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a> 或更高版本。<a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">官网</a></li><li>GStreamer：一个声音和可视化媒体的框架。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a>。<a href="http://gstreamer.freedesktop.org/" target="_blank" rel="noopener">官网</a></li><li>lodepng：一个简单的 PNG 图像解码器和编码器，不需要其他依赖。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>.<a href="http://lodev.org/lodepng/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="网络编程"><a href="/2018/07/22/CL/#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><ul><li>asnlc：一个把 ASN.1 规范转换为 C 代码的编译器。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="http://lionet.info/asn1c/compiler.html" target="_blank" rel="noopener">官网</a></li><li>czmq：一个 ZeroMQ 的高级绑定。<a href="https://github.com/zeromq/czmq" target="_blank" rel="noopener">官网</a></li><li>GNU adns：一个高级，易用，异步的 DNS 客户端和实用工具。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 及更高版本。<a href="https://gnu.org/software/adns/" target="_blank" rel="noopener">官网</a></li><li>GNU SASL：一个简单身份认证和安全层和一些常见 SASL 机制的实现。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 及更高版本。<a href="https://gnu.org/software/gsasl/" target="_blank" rel="noopener">官网</a></li><li>GnuTLS：一个安全通信库，实现了 SSL，TLS 和 DTLS。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a> 及更高版本。<a href="http://www.gnutls.org/" target="_blank" rel="noopener">官网</a></li><li>gumbo-parser：一个 C99 标准的 HTML5 解析库。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>。<a href="https://github.com/google/gumbo-parser" target="_blank" rel="noopener">官网</a></li><li>http-parser：一个 HTTP 请求回应解析器。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/nodejs/http-parser" target="_blank" rel="noopener">官网</a></li><li>ldns：一个简化 DNS 编程的库。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="http://www.nlnetlabs.nl/projects/ldns/index.html" target="_blank" rel="noopener">官网</a></li><li>libcurl：一个客户端的 URL 转换库，支持多种格式。<a href="http://curl.haxx.se/docs/copyright.html" target="_blank" rel="noopener">curl license</a>。<a href="http://curl.haxx.se/libcurl/" target="_blank" rel="noopener">官网</a></li><li>LibEtPan：一个邮件库，支持 IMAP，SMTP，POP 和 NNTP 网络协议。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="https://github.com/dinhviethoa/libetpan" target="_blank" rel="noopener">官网</a></li><li>libev：一个事件驱动库。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>.<a href="http://software.schmorp.de/pkg/libev.html" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/libevent/" target="_blank" rel="noopener">libevent</a>：一个在网络服务器中事件驱动库的可替代品。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="http://libevent.org/" target="_blank" rel="noopener">官网</a></li><li>libgss：通用安全服务。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://gnu.org/software/gss/" target="_blank" rel="noopener">官网</a></li><li>libhttpd：一个给应用或嵌入式设备添加基本 Web 服务器功能的库。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL2</a>。<a href="http://www.hughes.com.au/products/libhttpd/" target="_blank" rel="noopener">官网</a></li><li>libidn：Stringprep，Punycode 和 IDNA 规范的实现。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://gnu.org/software/libidn/" target="_blank" rel="noopener">官网</a></li><li>libmicrohttpd：一个迷你库，可作为其他应用的一部分，让运行 HTTP 服务器变得简单。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a> 或更高版本。<a href="https://gnu.org/software/libmicrohttpd/" target="_blank" rel="noopener">官网</a></li><li>libsoup：一个 GNOME HTTP 客户端/服务器库，使用了 GObject。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a>。<a href="https://wiki.gnome.org/action/show/Projects/libsoup?action=show&amp;redirect=LibSoup" target="_blank" rel="noopener">官网</a></li><li>lwan：一个实验性，可扩展，高性能的 HTTP 服务器。 <a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="https://github.com/lpereira/lwan" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/mongoose/" target="_blank" rel="noopener">mongoose</a>：基于 C 的嵌入式 Web 服务器。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="https://github.com/cesanta/mongoose" target="_blank" rel="noopener">官网</a></li><li>nanomsg：一个基于 C 的 ZeroMQ 实现。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/nanomsg/nanomsg" target="_blank" rel="noopener">官网</a></li><li>onion：易于使用的 HTTP 服务器库。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>。<a href="https://github.com/davidmoreno/onion" target="_blank" rel="noopener">官网</a></li><li>OpenSSL：一个 SSL 和 TLS 协议的实现，还包括一个加密库。<a href="https://www.openssl.org/source/license.html" target="_blank" rel="noopener">Dual Licensed under the OpenSSL License and the SSLeay License</a>。<a href="https://www.openssl.org/" target="_blank" rel="noopener">官网</a></li><li>oSip：一个基于 C 的 SIO 实现，没有额外的依赖。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPLv2.1</a> 或更高版本。<a href="https://gnu.org/software/osip/" target="_blank" rel="noopener">官网</a></li><li>s2n：一个 C99 标准的 TLS/SSL 协议的实现，简单，快并且以安全优先。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>。<a href="https://github.com/awslabs/s2n" target="_blank" rel="noopener">官网</a></li><li>socket99：BSD 套接字 API 的 C99 封装。<a href="http://directory.fsf.org/wiki/License:ISC" target="_blank" rel="noopener">ISC</a>。<a href="https://github.com/silentbicycle/socket99" target="_blank" rel="noopener">官网</a></li><li>Tox：一个通信平台，被设计为 Skype 杀手。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a>。<a href="https://github.com/irungentoo/toxcore" target="_blank" rel="noopener">官网</a></li><li>twitc：一个与 Twitter OAuth API 交互的迷你 C 库。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/sinemetu1/twitc" target="_blank" rel="noopener">官网</a></li></ul><h3 id="Web框架"><a href="/2018/07/22/CL/#Web框架" class="headerlink" title="Web框架"></a>Web框架</h3><ul><li>balde：一个基于 GLib 的 C 微框架。 <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPLv2.1</a>。<a href="https://github.com/balde/balde" target="_blank" rel="noopener">官网</a></li></ul><h2 id="数值计算"><a href="/2018/07/22/CL/#数值计算" class="headerlink" title="数值计算"></a>数值计算</h2><ul><li>apophenia：一个用于统计和科学计算的库。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="https://github.com/b-k/apophenia" target="_blank" rel="noopener">官网</a></li><li>ATLAS：自动调谐线性代数软件。 <a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="http://math-atlas.sourceforge.net/" target="_blank" rel="noopener">官网</a></li><li>BLAS：Basic Linear Algebra Subprograms；提供向量和矩阵操作的一系列操作。<a href="http://www.netlib.org/blas/#_licensing" target="_blank" rel="noopener">BLAS license</a>。<a href="http://www.netlib.org/blas/" target="_blank" rel="noopener">官网</a></li><li>Cuba：一个计算多维的数值积分的库。 <a href="http://www.gnu.org/licenses/lgpl.html" target="_blank" rel="noopener">GNU LGPLv3</a>。<a href="http://www.feynarts.de/cuba/" target="_blank" rel="noopener">官网</a></li><li>FFTW：The Fastest Fourier Transform in the West；一个高度优化的快速傅立叶变换例程。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a> 或更高版本。<a href="http://www.fftw.org/" target="_blank" rel="noopener">官网</a></li><li>FLINT：Fast Library for Number Theory;一个支持算数，多项式，幂级数和矩阵等。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a> 或更高版本。<a href="http://flintlib.org/" target="_blank" rel="noopener">官网</a></li><li>GLPK：GNU Linear Programming Kit；一个求解大规模线性规划，混合整数规划和其他相关问题。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://gnu.org/software/glpk/" target="_blank" rel="noopener">官网</a></li><li>GMP：GNU Multple Precision Arithmetic Library；一个支持任意精度计算的库。双重许可 <a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a> 和 <a href="http://www.gnu.org/licenses/lgpl.html" target="_blank" rel="noopener">GNU LGPLv3</a>。<a href="https://gmplib.org/" target="_blank" rel="noopener">官网</a></li><li>GNU MPC：一个支持复杂数字计算的库。<a href="http://www.gnu.org/licenses/lgpl.html" target="_blank" rel="noopener">GNU LGPL3</a> 或更高版本。<a href="http://www.multiprecision.org/index.php?prog=mpc&amp;page=home" target="_blank" rel="noopener">官网</a></li><li>GNU MPFR：一个支持任意精度的浮点数计算库。<a href="http://www.gnu.org/licenses/lgpl.html" target="_blank" rel="noopener">GNU LGPL3</a> 或更高版本（大多数最近版本），<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a> 或更高版本（2.4.x 之前）。<a href="http://mpfr.loria.fr/index.html" target="_blank" rel="noopener">官网</a></li><li>GNU MPRIA：一个支持多精度合理区间运算的可扩展数学库。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://gnu.org/software/mpria/" target="_blank" rel="noopener">官网</a></li><li>GSL：The GNU Scientific Library；一个精确的数值计算库。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a>。<a href="http://www.gnu.org/software/gsl/" target="_blank" rel="noopener">官网</a></li><li>KISS FFT：一个非常快的傅里叶变换库。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="http://sourceforge.net/projects/kissfft/" target="_blank" rel="noopener">官网</a></li><li>LAPACKE：一个 <a href="http://www.netlib.org/lapack/" target="_blank" rel="noopener">LAPACK</a> 的 C 接口。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="http://www.netlib.org/lapack/lapacke.html" target="_blank" rel="noopener">官网</a></li><li>PARI/GP：一个数论的计算机代数系统，包括 C 编译器。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a> 或更高版本。<a href="http://pari.math.u-bordeaux.fr/" target="_blank" rel="noopener">官网</a></li><li>PETSc：一系列数据结构和例程，用于计算由偏微分方程建模的应用程序的可扩展并行解。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="http://www.mcs.anl.gov/petsc/" target="_blank" rel="noopener">官网</a></li><li>SLEPc：一个在并行计算机中的解决大型，稀疏特征值问题的软件库。<a href="http://www.gnu.org/licenses/lgpl.html" target="_blank" rel="noopener">LGPL3</a><a href="http://slepc.upv.es/" target="_blank" rel="noopener">官网</a></li><li>Yeppp!：非常快，SIMD 优化的数学库。 <a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="http://www.yeppp.info/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="并行编程"><a href="/2018/07/22/CL/#并行编程" class="headerlink" title="并行编程"></a>并行编程</h2><ul><li>cchan：一个线程间通信通道构建的小型库。公共领域。<a href="http://repo.hu/projects/cchan/" target="_blank" rel="noopener">官网</a></li><li>ck：并发原语，安全内存回收机制和非阻塞数据结构。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="https://github.com/concurrencykit/ck" target="_blank" rel="noopener">官网</a></li><li>mill：用 C 写成的 Go 风格并发。<a href="https://directory.fsf.org/wiki/License:X11" target="_blank" rel="noopener">X11</a><a href="http://libmill.org/" target="_blank" rel="noopener">官网</a></li><li>MPICH：MPI 的另一种实现。<a href="http://git.mpich.org/mpich.git/blob_plain/6aab201f58d71fc97f2c044d250389ba86ac1e3c:/COPYRIGHT" target="_blank" rel="noopener">MPICH licence</a>。<a href="http://www.mpich.org/" target="_blank" rel="noopener">官网</a></li><li>OpenMP：一组 C 编译指令，使其易于并行化代码。标准（许可不适用）。<a href="http://openmp.org/wp/about-openmp/" target="_blank" rel="noopener">官网</a></li><li>OpenMPI：一个消息传输接口实现。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="https://github.com/open-mpi/ompi" target="_blank" rel="noopener">官网</a></li><li>PETSc：一系列数据结构和例程，用于计算由偏微分方程建模的应用程序的可扩展并行解。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="http://www.mcs.anl.gov/petsc/" target="_blank" rel="noopener">官网</a></li><li>pth：一个非抢占式优先级调度多线程执行的可扩展实现。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或者更高版本。<a href="https://gnu.org/software/pth/" target="_blank" rel="noopener">官网</a></li><li>pthreads：POSIX 线程库。标准（没有适用的许可）。<a href="https://en.wikipedia.org/wiki/POSIX_Threads" target="_blank" rel="noopener">官网</a></li><li>SLEPc：一个在并行计算机中的解决大型，稀疏特征值问题的软件库。<a href="http://www.gnu.org/licenses/lgpl.html" target="_blank" rel="noopener">GNU LGPL3</a>。<a href="http://slepc.upv.es/" target="_blank" rel="noopener">官网</a></li><li>TinyCThread：一个可扩展，小型的 C11 标准线程 API 实现。<a href="http://directory.fsf.org/wiki/License:Zlib" target="_blank" rel="noopener">zlib</a>。<a href="https://tinycthread.github.io/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="正则表达式"><a href="/2018/07/22/CL/#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote><p>有些人遇到问题时就会想：“啊，我知道了，我可以使用正则表达式”。于是现在他们有了两个问题。- Jamie Zawinski。</p></blockquote><ul><li>PCRE：与 Perl 5 正则表达式完全相同的实现。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="http://www.pcre.org/" target="_blank" rel="noopener">官网</a></li><li>SLRE：Super Light Regular Expression library;一个 Perl 正则表达式语法子集的迷你实现。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="https://github.com/cesanta/slre" target="_blank" rel="noopener">官网</a></li><li>TRE：一个与 POSIX 一致，充满特色的正则表达式库。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="https://github.com/laurikari/tre/" target="_blank" rel="noopener">官网</a></li><li>PS：关于正则表达式，deerchao 有篇文章不错 《<a href="http://blog.jobbole.com/96708/" target="_blank" rel="noopener">正则表达式 30 分钟入门教程</a>》</li></ul><h2 id="序列化"><a href="/2018/07/22/CL/#序列化" class="headerlink" title="序列化"></a>序列化</h2><ul><li>c-capnproto：一个 Cap’n Proto 序列化协议的实现。 <a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/jmckaskill/c-capnproto" target="_blank" rel="noopener">官网</a></li><li>cmp：一个 <a href="http://msgpack.org/" target="_blank" rel="noopener">MessagePack</a> 序列化协议的实现。 <a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/camgunz/cmp" target="_blank" rel="noopener">官网</a></li><li>libavro：一个 Avro 数据序列化系统的 C 实现。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>。<a href="http://avro.apache.org/docs/current/api/c/index.html#_introduction_to_avro_c" target="_blank" rel="noopener">官网</a></li><li>mpack：另一个 <a href="http://msgpack.org/" target="_blank" rel="noopener">MessagePack</a> 序列化协议的实现。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/ludocode/mpack" target="_blank" rel="noopener">官网</a></li><li>protobuf-c：一个 Google Protocol Buffer 的 C 实现。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="https://github.com/protobuf-c/protobuf-c" target="_blank" rel="noopener">官网</a></li><li>xdr：External Data Representation；数据序列化标准。标准（没有可用许可）。<a href="https://en.wikipedia.org/wiki/External_Data_Representation" target="_blank" rel="noopener">官网</a></li></ul><h2 id="源码集锦"><a href="/2018/07/22/CL/#源码集锦" class="headerlink" title="源码集锦"></a>源码集锦</h2><p>下面包含了一些小型源码集合。如果你想要大型且成熟的，看《框架》那一节。</p><ul><li>CCAN：模仿 Perl 的 CPAN，这是一个大的实用 C 代码集合。完整的列表在 <a href="http://ccodearchive.net/list.html" target="_blank" rel="noopener">这里</a>。多种许可（所有都是免费软件）。<a href="http://ccodearchive.net/" target="_blank" rel="noopener">官网</a></li><li>clib：一个 C 软件包管理器，配备了一堆自己的库。 <a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/clibs/clib" target="_blank" rel="noopener">官网</a></li><li>gnulib：通用 GNU 代码的集合。多种许可证，全部免费。<a href="https://www.gnu.org/software/gnulib/" target="_blank" rel="noopener">官网</a></li><li>libdjb：做各种事情的库的集合。（显然）公共领域。<a href="http://www.fefe.de/djb/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="标准库"><a href="/2018/07/22/CL/#标准库" class="headerlink" title="标准库"></a>标准库</h2><p>下面包括了标准 C 库。</p><ul><li>Bionic：谷歌为 Android 开发的 C 标准库。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="https://github.com/android/platform_bionic" target="_blank" rel="noopener">官网</a></li><li>dietlibc：标准 C 库，可能是最小的二进制文件。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="http://www.fefe.de/dietlibc/" target="_blank" rel="noopener">官网</a></li><li>glibc：GNU C 库。一个 C 标准库的实现。 <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a>。<a href="http://www.gnu.org/software/libc/" target="_blank" rel="noopener">官网</a></li><li>musl：标准 C 库，兼容 POSIX 2008 和 C11，为静态链接设计。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="http://www.musl-libc.org/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="字符串处理"><a href="/2018/07/22/CL/#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><ul><li>bstrlib：更好的字符串处理库。双重许可，<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a> 或 <a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="http://bstring.sourceforge.net/" target="_blank" rel="noopener">官网</a></li><li>ICU：International Components for Unicode；提供 Unicode 支持的库。 <a href="http://source.icu-project.org/repos/icu/icu/trunk/license.html" target="_blank" rel="noopener">ICU license</a>。<a href="http://site.icu-project.org/" target="_blank" rel="noopener">官网</a></li><li>libunistring：处理 Unicode 字符串的 C 库。<a href="http://www.gnu.org/licenses/lgpl.html" target="_blank" rel="noopener">GNU LGPL3</a>。<a href="https://gnu.org/software/libunistring/" target="_blank" rel="noopener">官网</a></li><li>libgiconv：文本转换库。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a>（库），<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a>（编码转换程序）。<a href="https://gnu.org/software/libiconv/" target="_blank" rel="noopener">官网</a></li><li>SDS：Simple Dynamic Strings；一个用简单方式处理 C 字符串的库，而且兼容标准 C 字符串函数。可通过 <a href="https://github.com/clibs/clib" target="_blank" rel="noopener">clib</a> 使用。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="https://github.com/antirez/sds" target="_blank" rel="noopener">官网</a></li><li>shoco：一个小型文本压缩器。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/Ed-von-Schleck/shoco" target="_blank" rel="noopener">官网</a></li><li>smaz：一个高效的字符串压缩库。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>.<a href="https://github.com/Ed-von-Schleck/shoco" target="_blank" rel="noopener">官网</a></li></ul><h2 id="测试工具"><a href="/2018/07/22/CL/#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><ul><li>CHEAT：一个非常简单的单元测试框架。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="https://github.com/Tuplanolla/cheat" target="_blank" rel="noopener">官网</a></li><li>Check：一个 C 的单元测试框架。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.1</a>。<a href="http://check.sourceforge.net/" target="_blank" rel="noopener">官网</a></li><li>CMock：一个 C 的 mock/stub 生成器。<a href="https://github.com/ThrowTheSwitch/CMock" target="_blank" rel="noopener">官网</a></li><li>cmocka：一个支持 mock 对象的单元测试框架。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>。<a href="https://cmocka.org/" target="_blank" rel="noopener">官网</a></li><li>Criterion：一个 KISS 风格，非侵入式的 C 测试框架。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a><a href="https://github.com/Snaipe/Criterion" target="_blank" rel="noopener">官网</a></li><li>CUnit：另一个 C 的单元测试框架。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPL2.0</a>。<a href="http://cunit.sourceforge.net/" target="_blank" rel="noopener">官网</a></li><li>minunit：极小的 C 单元测试框架。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/siu/minunit" target="_blank" rel="noopener">官网</a></li><li>Unity：一个简单的 C 单元测试框架。 <a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/ThrowTheSwitch/Unity" target="_blank" rel="noopener">官网</a></li></ul><h2 id="文本编辑器扩展"><a href="/2018/07/22/CL/#文本编辑器扩展" class="headerlink" title="文本编辑器扩展"></a>文本编辑器扩展</h2><p>在几乎任何像样的文本编辑器支持 C 之际，有一些扩展，让编辑器更加令人愉快。下面是根据编辑器分目录的。</p><h3 id="Emacs"><a href="/2018/07/22/CL/#Emacs" class="headerlink" title="Emacs"></a>Emacs</h3><ul><li>CEDET：Collection of Emacs Development Environment Tools；给 Emacs 提供一种类似 IDE 的特点，是内建的。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="http://cedet.sourceforge.net/" target="_blank" rel="noopener">官网</a></li><li>Flycheck：现代语法检查。对于 C，它可以使用 GCC 或者 Clang 作为后端。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://github.com/flycheck/flycheck" target="_blank" rel="noopener">官网</a></li><li>Yasnippet：一个模板系统，支持 C 的通用代码片段。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://github.com/capitaomorte/yasnippet" target="_blank" rel="noopener">官网</a></li></ul><h3 id="Vim"><a href="/2018/07/22/CL/#Vim" class="headerlink" title="Vim"></a>Vim</h3><ul><li>Syntastic：语法检查和语言分析。<a href="https://github.com/scrooloose/syntastic/blob/master/LICENCE" target="_blank" rel="noopener">Do What The Fuck You Want To license</a>。<a href="https://github.com/scrooloose/syntastic" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/youcompleteme/" target="_blank" rel="noopener">YouCompleteMe</a>：一个 Vim 的代码补全引擎。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a>。<a href="http://valloric.github.io/YouCompleteMe/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="工具"><a href="/2018/07/22/CL/#工具" class="headerlink" title="工具"></a>工具</h2><p>下面是实用的程序列表，包括了帮助你编写和调试 C 代码的库或者编译器，不包括编辑器。</p><ul><li>adlint：一个静态分析器。支持完全的 C89 标准和部分 C99 标准。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://yanoh.github.io/adlint/" target="_blank" rel="noopener">官网</a></li><li>Artistic Style：一个支持 C 的小而快的自动化代码格式化工具。<a href="http://www.gnu.org/licenses/lgpl.html" target="_blank" rel="noopener">GNU LGPL3</a>。<a href="http://astyle.sourceforge.net/" target="_blank" rel="noopener">官网</a></li><li>address-sanitizer：一个很快的内存错误探测器。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>。<a href="https://github.com/google/sanitizers" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/biicode/" target="_blank" rel="noopener">biicode</a>：一个现代的 C 依赖管理器。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://biicode.github.io/biicode/" target="_blank" rel="noopener">官网</a></li><li>c：在命令行中编译和执行 C 脚本，也支持 shebang。 <a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/ryanmjacobs/c" target="_blank" rel="noopener">官网</a></li><li>c99sh：用 hash-bang 运行 C 文件。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="https://github.com/RhysU/c99sh" target="_blank" rel="noopener">官网</a></li><li>CBMC：C Bounded Model Checker；一个检查数组边界，指针安全和用户自定义断言的工具。<a href="https://directory.fsf.org/wiki/License:BSD_4Clause" target="_blank" rel="noopener">Original BSD</a>。<a href="http://www.cprover.org/cbmc/" target="_blank" rel="noopener">官网</a></li><li>cdecl：一个在线服务，能够把 C 的声明翻译成英文，反向也可以。公共领域。<a href="https://github.com/mpv-player/mpv" target="_blank" rel="noopener">官网</a></li><li>cinclude2dot：在 C 项目中使用 Graphviz 的图像包含依赖。任官网 GNU GPL 版本（根据文件中的要求）<a href="https://www.flourish.org/cinclude2dot/" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/complexity/" target="_blank" rel="noopener">Complexity</a>：一个测量 C 代码复杂性的工具。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://www.gnu.org/software/complexity/" target="_blank" rel="noopener">官网</a></li><li>DDD：各种命令行调试器的图形前端。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://www.gnu.org/software/ddd/ddd.html" target="_blank" rel="noopener">官网</a></li><li>fab：让每次构建都最优的构建系统。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a>。<a href="http://fabutil.org/" target="_blank" rel="noopener">官网</a></li><li>GDB：The GNU Project debugger；一个 C 调试器。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="http://www.gnu.org/software/gdb/" target="_blank" rel="noopener">官网</a></li><li>Glade：一个让 TK+ GUIs 开发更快的 RAD 工具。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="https://glade.gnome.org/" target="_blank" rel="noopener">官网</a></li><li>GMSL：GNU Make Standard Library；一个 GNU Make 额外功能的集合。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="http://gmsl.sourceforge.net/" target="_blank" rel="noopener">官网</a></li><li>GNU Global：一个 C 的源码标签工具。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a>。<a href="https://www.gnu.org/software/global/" target="_blank" rel="noopener">官网 Global</a></li><li>gprof：一个性能分析工具。GNU binutils 的一部分。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="http://www.gnu.org/software/binutils/" target="_blank" rel="noopener">官网</a></li><li>Highlight：把源码转化为高亮的格式化文本。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a>。<a href="http://www.andre-simon.de/index.php" target="_blank" rel="noopener">官网</a></li><li>include-what-you-use：帮助程序员发现不必要的包含和提供解决他们的建议。基于 LLVM/Clang（只能与它一起工作）。<a href="http://directory.fsf.org/wiki/License:IllinoisNCSA" target="_blank" rel="noopener">NCSA</a>。<a href="https://github.com/include-what-you-use/include-what-you-use" target="_blank" rel="noopener">官网</a></li><li>indent：自动格式化 C 代码，让它更容易阅读。也能把一种风格的代码转化为另一种。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://www.gnu.org/software/indent/" target="_blank" rel="noopener">官网</a></li><li>Make：一个控制程序的可执行和其他非代码文件的生成的工具。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本（链接到 GNU 的实现)。<a href="https://www.gnu.org/software/make/" target="_blank" rel="noopener">官网</a></li><li>qo：无需分开的配置文件的构建系统。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/andlabs/qo" target="_blank" rel="noopener">官网</a></li><li>rr：记录非确定执行来允许可确定调试的调试器。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="http://rr-project.org/" target="_blank" rel="noopener">官网</a></li><li>tup：一个很快，基于文件，跨平台的构建系统。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="http://gittup.org/tup/index.html" target="_blank" rel="noopener">官网</a></li><li>unifdef：移除 #ifdef 和 #if 指令包含的文本，不会改变文件的其他部分。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a> 和 <a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="http://dotat.at/prog/unifdef/" target="_blank" rel="noopener">官网</a></li><li>Valgrind：各种动态分析工具，包括一个内存泄漏检测工具。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="http://www.valgrind.org/" target="_blank" rel="noopener">官网</a></li></ul><h2 id="其他工具"><a href="/2018/07/22/CL/#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><p>下面是包罗万象的目录，主要是那些不适合放在其他目录的东西。</p><ul><li>ApeTagLibs：APEv2 标签的 C 库。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/jeremyevans/ape_tag_libs/tree/master/c" target="_blank" rel="noopener">官网</a></li><li>bfd：处理二进制对象文件的库。GNU binutils 的一部分。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="http://sourceware.org/binutils/docs/bfd/" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/ccv/" target="_blank" rel="noopener">ccv</a>：基于C语言、带缓存机制的现代计算机视觉核心库。 <a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="https://github.com/liuliu/ccv" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/cf4ocl/" target="_blank" rel="noopener">cf4ocl</a>：The C Framework for OpenCL；一个跨平台面向对象框架，用于开发和用基准问题测试 <a href="https://www.khronos.org/opencl/" target="_blank" rel="noopener">OpenCL</a> 项目。<a href="http://www.gnu.org/licenses/lgpl.html" target="_blank" rel="noopener">GNU LGPL3</a>（库）, <a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a>（其他代码）。<a href="https://fakenmc.github.io/cf4ocl/" target="_blank" rel="noopener">官网</a></li><li>CommonMark：CommonMark 规范的 C 实现。<a href="https://github.com/jgm/CommonMark/blob/master/LICENSE" target="_blank" rel="noopener">Variety of licenses, all free</a>。<a href="https://github.com/jgm/CommonMark" target="_blank" rel="noopener">官网</a></li><li>CException：异常的 C 实现。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/ThrowTheSwitch/CException" target="_blank" rel="noopener">官网</a></li><li>docopt.c：命令行选项解析器的 C 实现。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/docopt/docopt.c" target="_blank" rel="noopener">官网</a></li><li>dyncall：另一个外部函数接口库。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="http://www.dyncall.org/" target="_blank" rel="noopener">官网</a></li><li>FANN：Fast Artifical Neural Network library；一个神经网络的实现。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="http://leenissen.dk/fann/wp/" target="_blank" rel="noopener">官网</a></li><li>Firm：一个 C 库，提供了基于图像中间表示，优化和适合编译器的汇编代码生成。配备了 C 的前端例子，使用相同的许可。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPLv2.1</a>。<a href="http://pp.ipd.kit.edu/firm/Index" target="_blank" rel="noopener">官网</a></li><li>gjrand：随机数字生成的例程库。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a> 或者 <a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPLv3</a>（用户的选择）。<a href="http://sourceforge.net/projects/gjrand/" target="_blank" rel="noopener">官网</a></li><li>GNU FreeIPMI：一个带内和带外的 IPMI 实现。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a>。<a href="https://gnu.org/software/freeipmi/index.html" target="_blank" rel="noopener">官网 FreeIPMI</a></li><li>GNU gperf：一个完美的哈希函数生成器，提供一系列的字符串。输出 C 代码。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://www.gnu.org/software/gperf/" target="_blank" rel="noopener">官网</a></li><li>GNU Libffcall：一个构建外部函数接口库的集合。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://gnu.org/software/libffcall/" target="_blank" rel="noopener">官网</a></li><li>gperftools：一系列测量和提高性能的实用工具集合。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="https://github.com/gperftools/gperftools" target="_blank" rel="noopener">官网</a></li><li>hammer：二进制格式的解析器组合。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GPL2.1</a>.<a href="https://github.com/abiggerhammer/hammer" target="_blank" rel="noopener">官网</a></li><li>Hans Boehm GC：C 的垃圾收集器？如果我用了不要介意。多种许可证，完全免费。<a href="http://www.hboehm.info/gc/" target="_blank" rel="noopener">官网</a></li><li>huffandpuff：一个极小的哈夫曼编码器和解码器。公共领域。<a href="https://github.com/adamierymenko/huffandpuff" target="_blank" rel="noopener">官网</a></li><li>iniparser：一个 .ini 文件的解析器。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/ndevilla/iniparser" target="_blank" rel="noopener">官网</a></li><li>jemalloc：一个 malloc 实现，着重于段错误的避免和可扩展并发支持。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="http://www.canonware.com/jemalloc/" target="_blank" rel="noopener">官网</a></li><li>jwHash：一个很快的哈希表实现。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>。<a href="https://github.com/watmough/jwHash" target="_blank" rel="noopener">官网</a></li><li>kdtree：KD-trees 的简单库。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="https://github.com/jtsiomb/kdtree" target="_blank" rel="noopener">官网</a></li><li>Kitsune：高效，通用的框架，用于软件的动态升级。 <a href="http://www.gnu.org/licenses/lgpl.html" target="_blank" rel="noopener">GNU LGPL3</a> 或更高版本。<a href="http://kitsune-dsu.com/" target="_blank" rel="noopener">官网</a></li><li>libavl：一个包括各种自平衡二叉树的库。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="http://adtinfo.org/libavl.html/index.html" target="_blank" rel="noopener">官网</a></li><li>libbson：BSON 实用库。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>。<a href="https://github.com/mongodb/libbson" target="_blank" rel="noopener">官网</a></li><li>libCello：引入高级语言给 C 的库。<a href="http://libcello.org/" target="_blank" rel="noopener">官网</a></li><li>libcox：一个运行跨平台系统调用和跨系统标准工具的库。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="http://libcox.net/" target="_blank" rel="noopener">官网</a></li><li>libffi：轻量级的外部函数接口库。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/atgreen/libffi" target="_blank" rel="noopener">官网</a></li><li>libgit2：Git 的纯 C 实现。<a href="https://github.com/libgit2/libgit2/blob/master/COPYING" target="_blank" rel="noopener">GNU GPL2 only, with a linking exception</a>。<a href="https://libgit2.github.com/" target="_blank" rel="noopener">官网</a></li><li>libimobiledevice：一个跨平台协议库，用于与 iThings 通信。<a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html" target="_blank" rel="noopener">GNU LGPLv2.1</a> 或更高版本（库），<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a> 或更高版本（工具）。<a href="https://github.com/libimobiledevice/libimobiledevice" target="_blank" rel="noopener">官网</a></li><li>libmpv：音乐播放库。编译的时候加入 <code>./waf configure --disable-cplayer --enable-libmpv-shared</code> 来避免生成音乐播放器。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a> 或更高版本。<a href="https://github.com/mpv-player/mpv" target="_blank" rel="noopener">官网</a></li><li>libnfc：一个平台独立的 NFC 库。<a href="http://www.gnu.org/licenses/lgpl.html" target="_blank" rel="noopener">GNU LGPL3</a>。<a href="https://github.com/nfc-tools/libnfc" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/libphenom/" target="_blank" rel="noopener">libPhenom</a>：事件框架，用于构建高扩展和高性能系统。<a href="http://directory.fsf.org/wiki/License:Apache2.0" target="_blank" rel="noopener">Apache2.0</a>。<a href="http://facebook.github.io/libphenom/index.html" target="_blank" rel="noopener">官网</a>、<a href="https://github.com/facebook/libphenom" target="_blank" rel="noopener">GitHub</a></li><li>libsoundio：跨平台，实时音频输入输出的库，有很多种后端。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/andrewrk/libsoundio" target="_blank" rel="noopener">官网</a></li><li>libucl：通用配置库解析器。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="https://github.com/vstakhov/libucl" target="_blank" rel="noopener">官网</a></li><li>libudp：一个统一设计模式的 C 实现。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://notabug.org/koz.ross/libudp" target="_blank" rel="noopener">官网</a></li><li>libuv：跨平台异步 I/O。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/libuv/libuv" target="_blank" rel="noopener">官网</a></li><li>libYAML：一个 YAML 1.1 解析器和发射器。 <a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="http://www.pyyaml.org/wiki/LibYAML" target="_blank" rel="noopener">官网</a></li><li>lzo：一个很快的数据压缩库。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="http://www.oberhumer.com/opensource/lzo/" target="_blank" rel="noopener">官网</a></li><li>mpc：解析器组合库。<a href="http://directory.fsf.org/wiki?title=License:FreeBSD" title="License:FreeBSD" target="_blank" rel="noopener">FreeBSD</a>。<a href="https://github.com/orangeduck/mpc" target="_blank" rel="noopener">官网</a></li><li>ncurses：彩色的终端 UI 库。<a href="http://www.gnu.org/licenses/gpl.html" target="_blank" rel="noopener">GNU GPL3</a> 或更高版本。<a href="https://gnu.org/software/ncurses/" target="_blank" rel="noopener">官网</a></li><li>nope.c：一个基于 C 语言，超级轻量级的软件平台，用于可扩展服务端和网络应用的开发（想想 C 程序员的 nodejs）。<a href="https://github.com/riolet/nope.c" target="_blank" rel="noopener">官网</a></li><li>pbc：一个协议缓冲库。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/cloudwu/pbc" target="_blank" rel="noopener">官网</a></li><li>rabbitmq-c：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ</a> 的客户端库。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/alanxz/rabbitmq-c" target="_blank" rel="noopener">官网</a></li><li>Ragel：为编译C的状态机的DSL。<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html" target="_blank" rel="noopener">GNU GPL2.1</a>。<a href="http://www.colm.net/open-source/ragel/" target="_blank" rel="noopener">官网</a></li><li>uthash：哈希表实现，允许已经存在的数据结构很容易地存在哈希表里面。<a href="http://troydhanson.github.io/uthash/license.html" target="_blank" rel="noopener">1-clause BSD</a>。<a href="http://troydhanson.github.io/uthash/" target="_blank" rel="noopener">官网</a></li><li>Viola：libCello 的简化版本。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="https://github.com/eatonphil/Viola" target="_blank" rel="noopener">官网</a></li><li>zlib：一个相当漂亮却精致不张扬的压缩库。<a href="http://directory.fsf.org/wiki/License:BSD_3Clause" target="_blank" rel="noopener">3-clause BSD</a>。<a href="https://github.com/madler/zlib" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/sundown/" target="_blank" rel="noopener">Sundown</a>：一个用C编写的符合标准的、快速的、安全的源码解析器。<a href="https://github.com/vmg/sundown" target="_blank" rel="noopener">官网</a></li></ul><h2 id="XML"><a href="/2018/07/22/CL/#XML" class="headerlink" title="XML"></a>XML</h2><blockquote><p>“XML 是垃圾。真的，没有任何借口。XML 对人类不友好的，甚至对于电脑来说也是一场灾难。根官网 -Linus Torvalds</p></blockquote><ul><li><a href="http://hao.jobbole.com/expat/" target="_blank" rel="noopener">Expat</a>：面向流的 XML 解析器。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="http://www.libexpat.org/" target="_blank" rel="noopener">官网</a></li><li>libxml2：一个符合标准，轻量级的 XML 解析器。<a href="http://directory.fsf.org/wiki/License:Expat" target="_blank" rel="noopener">Expat</a>。<a href="http://xmlsoft.org/" target="_blank" rel="noopener">官网</a></li><li><a href="http://hao.jobbole.com/mini-xml/" target="_blank" rel="noopener">mini-xml</a>：小型 XML 读写库。没有 C 标准库的依赖。<a href="http://svn.msweet.org/mxml/trunk/COPYING" target="_blank" rel="noopener">GNU LGPL2.1 with static linking exception</a>。<a href="http://www.msweet.org/projects.php?Z3" target="_blank" rel="noopener">官网</a></li></ul><h2 id="其他资源"><a href="/2018/07/22/CL/#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><h3 id="有影响力的书"><a href="/2018/07/22/CL/#有影响力的书" class="headerlink" title="有影响力的书"></a>有影响力的书</h3><p><em>具有广泛影响且值得阅读的 C 语言经典书籍。</em></p><ul><li>待补充</li></ul><h3 id="知名网站-博客"><a href="/2018/07/22/CL/#知名网站-博客" class="headerlink" title="知名网站/博客"></a>知名网站/博客</h3><p><em>值得关注的 C 语言技术站点和博客。</em></p><h4 id="中文"><a href="/2018/07/22/CL/#中文" class="headerlink" title="中文"></a>中文</h4><ul><li>待补充</li></ul><h4 id="英文"><a href="/2018/07/22/CL/#英文" class="headerlink" title="英文"></a>英文</h4><ul><li>待补充</li></ul><h3 id="微信公众号"><a href="/2018/07/22/CL/#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h3><ul><li>CPP开发者：专注分享 C/C++ 开发相关的技术文章和工具资源。<br><br><img src="http://ww1.sinaimg.cn/small/63918611gw1epb2c4w55aj2046046t8t.jpg" width="150" height="150"></li></ul><p>转自：<a href="https://github.com/jobbole/awesome-c-cn" target="_blank" rel="noopener">https://github.com/jobbole/awesome-c-cn</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>PyCharm2018最新激活码</title>
      <link href="/2018/07/16/PyCharm2018/"/>
      <url>/2018/07/16/PyCharm2018/</url>
      <content type="html"><![CDATA[<p>有一些学习Python的同学，安装PyCharm后不知道怎么激活，或者总是激活不成功，特此写一篇文章分享一下</p><p>激活之前需要先修改hosts文件，在里面增加如下一条代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span> <span class="selector-tag">account</span><span class="selector-class">.jetbrains</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><p>Linux中路径/etc/hosts，默认为只读文件，需要运行 sudo vim hosts 输入密码后进入修改。<br>Windows中路径C:\Windows\System32\drivers\etc\hosts,直接用记事本打开就可以编辑。</p><p>完成以上步骤后，选择PyCharm code激活，粘贴一下代码后点击确认即可激活，亲测有效</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU<span class="regexp">/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/</span>E7Qvj1cupf<span class="regexp">/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/</span>ctZkFK62HYmh8V3AyhUNTzrvK2k+t<span class="regexp">/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/</span><span class="number">2</span>ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ<span class="regexp">/In4q/</span>UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO<span class="regexp">/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/</span><span class="number">78</span>TmVqFl8nOeD5+<span class="number">07</span>B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB<span class="regexp">/xVy/</span>VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE<span class="regexp">/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/</span>GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4<span class="regexp">/+wuC5EtZBfvdl4HT/</span><span class="number">8</span>vzMW<span class="regexp">/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/</span>F4tlK<span class="regexp">/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/</span>OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek<span class="regexp">/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/</span>qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+<span class="number">2</span>yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa<span class="regexp">/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==</span></span><br></pre></td></tr></table></figure><p>按步骤操作有什么问题可以留言或发邮件给我。邮件在个人介绍页</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> IDE </tag>
            
            <tag> PyCharm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python中的小技巧</title>
      <link href="/2018/07/15/Pyxjq/"/>
      <url>/2018/07/15/Pyxjq/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># NO.1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch_if</span><span class="params">(operator, x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> operator == <span class="string">'add'</span>:</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">elif</span> operator == <span class="string">'sub'</span>:</span><br><span class="line">        <span class="keyword">return</span> x - y</span><br><span class="line">    <span class="keyword">elif</span> operator == <span class="string">'mul'</span>:</span><br><span class="line">        <span class="keyword">return</span> x * y</span><br><span class="line">    <span class="keyword">elif</span> operator == <span class="string">'div'</span>:</span><br><span class="line">        <span class="keyword">return</span> x / y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch_dict</span><span class="params">(operator, x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'add'</span>: <span class="keyword">lambda</span>: x + y,</span><br><span class="line">        <span class="string">'sub'</span>: <span class="keyword">lambda</span>: x - y,</span><br><span class="line">        <span class="string">'mul'</span>: <span class="keyword">lambda</span>: x * y,</span><br><span class="line">        <span class="string">'div'</span>: <span class="keyword">lambda</span>: x / y,</span><br><span class="line">    &#125;.get(operator, <span class="keyword">lambda</span>: <span class="keyword">None</span>)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(dispatch_if(<span class="string">'sub'</span>, <span class="number">5</span>, <span class="number">9</span>))</span><br><span class="line">print(dispatch_dict(<span class="string">'mul'</span>, <span class="number">3</span>, <span class="number">7</span>))</span><br><span class="line">print(dispatch_if(<span class="string">'unknown'</span>, <span class="number">2</span>, <span class="number">8</span>))</span><br><span class="line">print(dispatch_dict(<span class="string">'unknown'</span>, <span class="number">2</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># NO.2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">funcs = [myfunc]</span><br><span class="line">print(funcs[<span class="number">0</span>])</span><br><span class="line">print(funcs[<span class="number">0</span>](<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># NO.3</span></span><br><span class="line">my_mapping = &#123;<span class="string">'a'</span>: <span class="number">23</span>, <span class="string">'b'</span>: <span class="number">42</span>, <span class="string">'c'</span>: <span class="number">0xc0ffee</span>&#125;</span><br><span class="line">print(my_mapping)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">print(json.dumps(my_mapping, indent=<span class="number">4</span>, sort_keys=<span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># json.dumps(&#123;all: 'yup'&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># NO.4</span></span><br><span class="line">name_for_userid = &#123;</span><br><span class="line">    <span class="number">382</span>: <span class="string">"Alice"</span>,</span><br><span class="line">    <span class="number">590</span>: <span class="string">"Bob"</span>,</span><br><span class="line">    <span class="number">951</span>: <span class="string">"Dilbert"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(userid)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hi %s!"</span> % name_for_userid.get(userid, <span class="string">"there"</span>)</span><br><span class="line"></span><br><span class="line">print(greeting(<span class="number">951</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># NO.5</span></span><br><span class="line">xs = &#123;<span class="string">'a'</span>: <span class="number">4</span>, <span class="string">'b'</span>: <span class="number">3</span>, <span class="string">'c'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">S = (sorted(xs.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]))</span><br><span class="line">print(S)</span><br><span class="line"><span class="comment"># Or:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">S = sorted(xs.items(), key=operator.itemgetter(<span class="number">1</span>))</span><br><span class="line">print(S)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python面试题目</title>
      <link href="/2018/07/14/pymianshiti/"/>
      <url>/2018/07/14/pymianshiti/</url>
      <content type="html"><![CDATA[<ul><li>暂时整理这么多，有好的答案可以在下面留言，并注明问题序号</li><li>题目有描述错误的也欢迎指正</li><li>部分问题答案可参考:</li></ul><ol><li><a href="https://blog.markhoo.com/2017/11/13/%E5%85%B3%E4%BA%8EPython%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98/">关于Python的面试题</a>(带目录)</li><li><a href="http://www.markhoo.com/index.php/archives/49/" target="_blank" rel="noopener">关于Python的面试题</a>(不带目录)</li></ol><p>注：如果评论模块无法加载，可以到慕课或者本Blog主站下面留言</p><ul><li><a href="https://www.imooc.com/article/43902" target="_blank" rel="noopener">慕课文章页</a></li><li><a href="http://www.markhoo.com/index.php/archives/105/" target="_blank" rel="noopener">Blog主站文章页</a></li></ul><p>======================================</p><ol><li>简要描述Python的垃圾回收机制（garbage collection）？</li><li>这些是什么意思：@classmethod， @staticmethod， @property？</li><li>这两个参数是什么意思： *args， **kwargs？我们为什么要使用它们？</li><li>“猴子补丁” （monkey patching）指的是什么？这种做法好吗？</li><li>解释什么是Python？</li><li>Python中的模块和包是什么？</li><li>Python中的docstring是什么？</li><li>在Python中什么是构造器？</li><li>在Python中什么是silcing？</li><li>Python中的unittest是什么？</li><li>为什么lambda没有语句？</li><li>什么是Python的命名空间？</li><li>Python都有哪些自带的数据结构？</li><li>字典推导式和列表推导式是什么？</li><li>参数按值传递和引用传递是怎样实现的？</li><li>数组和元组之间的区别是什么？</li><li>什么是Python装饰器？</li><li>Python是怎样管理内存的？</li><li>Python是如何被解释的？</li><li>什么是pickling和unpickling？</li><li>什么是PEP8？</li><li>Python是如何进行内存管理的？</li><li>单引号，双引号，三引号的区别？</li><li>Python里关于“堆”这种数据结构的模块是哪个？“堆”有什么优点和缺点？</li><li>写一个类，并让它尽可能多的支持操作符</li><li>说说decorator的用法和它的应用场景，如果可以的话，请写一个decorator</li><li>有一个长度是101的数组，存在1-100的数字，有一个是重复的，如何把重复的找出来？</li><li>Python列表与元组的区别是什么？分别在什么情况下使用？</li><li>介绍一下Python getopt模块？</li><li>打乱一个排好序的list对象alist</li><li>有一个dict对象adict，里面包含了一百万个元素，查找其中的某个元素的平均需要多少次比较？</li><li>Python代码怎么得到列表list的交集与差集</li><li>Python里面如何实现tuple和list的转换？</li><li>Python匹配HTML tag的时候，&lt;.*&gt; 和 &lt;.*?&gt; 有什么区别？</li><li>Python中如何定义一个函数？</li><li>Python里如何反序的迭代一个序列？</li><li>是否遇到过Python的模块间循环引用的问题，如何避免它？</li><li>什么是元类（meta_class）？</li><li>调试Python代码的方法有哪些？</li><li>交叉链表求交点</li><li>合并两个有序列表</li><li>如何1-&gt;2-&gt;3-&gt;4转换成2-&gt;1-&gt;4-&gt;3？</li><li>用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠的覆盖一个2*n的大矩形，总共有多少种方法？</li><li>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法？</li><li>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法？</li><li>解释XSRF和XSS</li><li>网站用户密码保存问题</li><li>Apache和Nginx的区别？</li><li>cookie和session的异同点？</li><li>urllib和urllib2的区别？</li><li>什么是三次握手？</li><li>解释MylSAM和InnoDB</li><li>解释下乐观锁和悲观锁</li><li>__new__ 和 __init__ 的区别是什么？</li><li>Python中重载是什么？</li><li>什么是鸭子类型？</li><li>什么是自省？</li><li>什么是协程？</li><li>什么是GIL线程全局锁？</li><li>Python中的作用域</li><li>如何用Python来发送邮件？</li><li>Python里面如何实现tuple和list的转换？</li><li>Python如何捕获异常？</li><li>写一个简单的Python socket编程</li><li>Python如何copy一个文件？</li><li>如何用Python删除一个文件？</li><li>如何在一个function里面设置一个全局的变量？</li><li>有没有一个工具可以帮助查找Python的bug和进行静态的代码分析？</li><li>proc，lambda，和Proc的区别？</li><li>Python里面如何生成随机数？</li><li>Python里面 secarch() 和 match() 的区别？</li><li>如何用Python来进行查询和替换一个文本字符串？</li><li>介绍一下Python下range()函数的用法</li><li>如何知道一个Python对象的类型？</li><li>Python中pass语句的作用是什么？</li><li>介绍一下except的用法和作用</li><li>Python里面如何拷贝一个对象？</li><li>介绍一下Python Date Time方面的类</li><li>请写出一段Python代码实现删除一个list里面的重复元素</li><li>Python是如何进行类型转换的？</li><li>介绍一下Python的and-or语法</li><li>介绍一下Python中webbrowser的用法</li><li>如何用Python输出一个Fibonacci数列？</li><li>什么是lambda函数？它有什么好处？</li><li>Python下多线程的限制以及多进程中传递参数的方式</li><li>alias的用法，alias与alias_method的区别</li><li>Python如何实现单例模式？</li><li>RE模块中match和search的方法的不同</li></ol>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django学习视频</title>
      <link href="/2018/07/12/Djangoshipin/"/>
      <url>/2018/07/12/Djangoshipin/</url>
      <content type="html"><![CDATA[<h1 id="Django1-11-学习教程"><a href="/2018/07/12/Djangoshipin/#Django1-11-学习教程" class="headerlink" title="Django1.11 学习教程"></a>Django1.11 学习教程</h1><iframe src="//player.bilibili.com/player.html?aid=25609947&cid=43647399&page=1" quality="high" width="900" height="626" align="middle" allowscriptaccess="sameDomain" allowfullscreen="true"> </iframe><h1 id="使用Django-REST-Framework构建Rest-API"><a href="/2018/07/12/Djangoshipin/#使用Django-REST-Framework构建Rest-API" class="headerlink" title="使用Django REST Framework构建Rest API"></a>使用Django REST Framework构建Rest API</h1><iframe src="//player.bilibili.com/player.html?aid=25577527&cid=43573682&page=1" quality="high" width="900" height="626" align="middle" allowscriptaccess="sameDomain" allowfullscreen="true"> </iframe>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> Rest </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用 Python 3.6.2 + Django 1.11.13 重新开发 blog</title>
      <link href="/2018/06/20/kaifablog/"/>
      <url>/2018/06/20/kaifablog/</url>
      <content type="html"><![CDATA[<p>由于最近事儿比较多，计划最晚在12月前用 Python3.6.2 + Django1.11.13 重写一套blog系统并部署。<br>先定个小目标，特此记录一下</p>]]></content>
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>域名 youmei.io 的由来</title>
      <link href="/2018/05/14/youmei/"/>
      <url>/2018/05/14/youmei/</url>
      <content type="html"><![CDATA[<p>对于入手【youmei.io】域名的原因，我是根据以下规则来的，当然最初不是这么想的，只是想要的域名都已经被注册了。。。</p><h1 id="30字口诀："><a href="/2018/05/14/youmei/#30字口诀：" class="headerlink" title="30字口诀："></a>30字口诀：</h1><p>小宝淘乐趣，大多优美妙。一五点微友，好天通万家。金易贝米人，快闪超聚帮。<br>小（小红书、小站教育）<br>宝（余额宝、驾考宝典）<br>淘（淘世界、蜜淘、淘汽档口）<br>乐（分期乐、乐流、乐动力）<br>趣（趣分期、我趣旅行）<br>大（大姨吗、大众点评、大智慧）<br>多（房多多、多盟、多看阅读）<br>优（优信拍、优酷土豆）<br>美（美团、美拍、美丽说、美图秀秀）<br>妙（奇妙清单、妙计旅行）<br>一（一个、一刻、一条、一席）<br>五（58到家、51talk）<br>点（养车点点、点名时间）<br>微（微信、微博、微在、微会）<br>友（友盟、友秘）<br>好（平安好房、好屋中国、好奇心日报）<br>天（天猫、天天果园、天天用车）<br>通（百度股市通、人脉通）<br>万（WIFI万能钥匙、十万个冷笑话）<br>家（汽车之家、河狸家）<br>金（金斧子、金数据）<br>易（网易、易车）<br>贝（贝贝、贝米）<br>米（小米、米聊）<br>人（人人、人人车）<br>快（快手、快的）<br>闪（闪电购、闪银）<br>超（超级课程表、超好玩）<br>聚（聚划算、聚美）<br>帮（阿姨帮、作业帮）<br>取名字总结有：10大“门派”<br>植物学派：蘑菇街、荔枝FM、土豆、IT桔子<br>动物学派：猿题库、功夫熊、小猪短租、小马购车、土巴兔、考拉FM、蜻蜓FM、企鹅吃喝指南、搜狗、搜狐<br>数字学派：51信用卡、58同城，59store<br>叠字学派：陌陌、探探、抱抱、人人、脉脉<br>字母学派：YY，QQ，JJ棋牌、KK唱响<br>拟声学派：滴滴、么么搜、嘟嘟美甲<br>实物学派：豆瓣、穿衣助手、饭本、觅食、团车、爱屋吉屋、药给力<br>创意学派：拉勾网、3W咖啡、托福Easy姐、喜马拉雅、黄油相机、面包旅行、雪球、斗鱼<br>国学学派：凤凰网、知乎、金箍棒、榫卯<br>洋气学派：UCloud，OneAPM，Keep，Fork，MONO，EMIE、NICE、IN、Face++</p><h1 id="其他："><a href="/2018/05/14/youmei/#其他：" class="headerlink" title="其他："></a>其他：</h1><p>衍生学派：找钢网、找塑料、找叉叉<br>同业学派：易果生鲜、一米鲜、每日优鲜、爱鲜蜂<br>游戏学派：三国叉叉、萌叉叉、全民叉叉<br>取名字的关键有：3点friendly需要注意：<br>1.大脑记忆friendly：简而言之，容易记住。<br>2.输入法friendly：按音一次就能打出来，不会有生僻字。<br>3.搜索引擎friendly：搜索结果不会和一些常用或者热门词汇竞争。<br>案例：今日头条、周末去哪儿、学霸君<br>很好奇其他国家的互联网公司起名有什么规律~</p>]]></content>
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装Django时提示pip版本问题解决方法</title>
      <link href="/2018/04/11/Djangopip/"/>
      <url>/2018/04/11/Djangopip/</url>
      <content type="html"><![CDATA[<h1 id="解决问题："><a href="/2018/04/11/Djangopip/#解决问题：" class="headerlink" title="解决问题："></a>解决问题：</h1><p>You are using pip version 9.0.1, however version 10.0.1 is available.<br>You should consider upgrading via the ‘pip install –upgrade pip’ command.</p><h1 id="解决方法"><a href="/2018/04/11/Djangopip/#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>直接运行命令：python -m pip install –upgrade pip 就可以了<br>如果你电脑上安装了两个版本的python，比如Mac上本来自带python2版本，但是你想安装在python3目录内，请把解决方法的运行命令的python改成python3</p>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx django 的配置步骤</title>
      <link href="/2017/12/25/nginxdjango/"/>
      <url>/2017/12/25/nginxdjango/</url>
      <content type="html"><![CDATA[<h2 id="升级并安装-pip"><a href="/2017/12/25/nginxdjango/#升级并安装-pip" class="headerlink" title="升级并安装 pip"></a>升级并安装 pip</h2><p>sudo apt-get update<br>sudo apt-get install python-pip</p><h2 id="安装虚拟环境"><a href="/2017/12/25/nginxdjango/#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h2><p>sudo pip install virtualenv virtualenvwrapper<br>加入到环境变量中<br>当前用户目录下的 Env为虚拟环境存放的目录</p><p>echo “export WORKON_HOME=~/Env” &gt;&gt; ~/.bashrc<br>echo “source /usr/local/bin/virtualenvwrapper.sh” &gt;&gt; ~/.bashrc</p><h2 id="激活配置"><a href="/2017/12/25/nginxdjango/#激活配置" class="headerlink" title="激活配置"></a>激活配置</h2><p>source ~/.bashrc</p><h2 id="创建虚拟环境"><a href="/2017/12/25/nginxdjango/#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p>环境名为:firstsite</p><p>在用户当前目录下创建 Django工程<br>cd ~<br>django-admin.py startproject firstsite</p><h2 id="django-的初始化"><a href="/2017/12/25/nginxdjango/#django-的初始化" class="headerlink" title="django 的初始化"></a>django 的初始化</h2><p>cd ~/firstsite<br>./manage.py migrate<br>./manage.py createsuperuser</p><h2 id="Django静态文件配置"><a href="/2017/12/25/nginxdjango/#Django静态文件配置" class="headerlink" title="Django静态文件配置"></a>Django静态文件配置</h2><p>nano firstsite/settings.py<br>STATIC_ROOT = os.path.join(BASE_DIR, “static/“)<br>./manage.py collectstatic</p><h2 id="安装-uWSGI"><a href="/2017/12/25/nginxdjango/#安装-uWSGI" class="headerlink" title="安装 uWSGI"></a>安装 uWSGI</h2><p>sudo apt-get install python-dev<br>sudo pip install uwsgi</p><h2 id="测试是否能够正常访问-django-项目"><a href="/2017/12/25/nginxdjango/#测试是否能够正常访问-django-项目" class="headerlink" title="测试是否能够正常访问 django 项目"></a>测试是否能够正常访问 django 项目</h2><p>http 指定进程端口8080<br>home指定虚拟环境目录<br>chdir指定 项目工程所在目录<br>uwsgi –http :8080 –home /home/pi/Env/firstsite –chdir /home/pi/firstsite -w firstsite.wsgi</p><h2 id="创建-uwsgi-的配置文件"><a href="/2017/12/25/nginxdjango/#创建-uwsgi-的配置文件" class="headerlink" title="创建 uwsgi 的配置文件"></a>创建 uwsgi 的配置文件</h2><p>sudo mkdir -p /etc/uwsgi/sites<br>cd /etc/uwsgi/sites</p><h2 id="uwsgi-的配置相关内容-重点"><a href="/2017/12/25/nginxdjango/#uwsgi-的配置相关内容-重点" class="headerlink" title="uwsgi 的配置相关内容(重点)"></a>uwsgi 的配置相关内容(重点)</h2><p>[uwsgi]<br>project = firstsite<br>base = /home/pi</p><p>chdir = %(base)/%(project)<br>home = %(base)/Env/%(project)<br>module = %(project).wsgi:application</p><p>master = true<br>processes = 5</p><p>socket = %(base)/%(project)/%(project).sock<br>chmod-socket = 666<br>vacuum = true<br>启动守护进程<br>vim /etc/systemd/system/uwsgi.service</p><p>[Unit]<br>Description=uWSGI Emperor service<br>After=syslog.target</p><p>[Service]<br>ExecStart=/usr/local/bin/uwsgi –emperor /etc/uwsgi/sites<br>Restart=always<br>KillSignal=SIGQUIT<br>Type=notify<br>StandardError=syslog<br>NotifyAccess=all</p><p>[Install]<br>WantedBy=multi-user.target<br>重载守护进程的配置信息<br>sudo systemctl daemon-reload<br>保证系统重启后uwsgi守护进程自动重启<br>sudo systemctl enable uwsgi<br>启动uwsgi进程<br>sudo systemctl start uwsgi<br>nginx 的安装<br>sudo apt-get install nginx<br>nginx的配置<br>sudo nano /etc/nginx/sites-available/firstsite<br>server {<br>listen 80;<br>server_name firstsite.com <a href="http://www.firstsite.com" target="_blank" rel="noopener">www.firstsite.com</a>;</p><p>location = /favicon.ico { access_log off; log_not_found off; }<br>location /static/ {<br>root /home/pi/firstsite;<br>}</p><p>location / {<br>include uwsgi_params;<br>uwsgi_pass unix:/home/pi/firstsite/firstsite.sock;<br>}<br>}<br>nginx配置生效<br>sudo ln -s /etc/nginx/sites-available/firstsite /etc/nginx/sites-enabled<br>检查配置<br>sudo service nginx configtest<br>重启nginx<br>sudo service nginx restart<br>非 debug 模式<br>非 debug 模式需要重启uwsgi 服务</p><p>sudo systemctl restart uwsgi</p>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django使用基础常用命令</title>
      <link href="/2017/11/20/Djangoml/"/>
      <url>/2017/11/20/Djangoml/</url>
      <content type="html"><![CDATA[<p>查看django命令：django-admin 即可显示django的可用命令<br>创建项目命令：django-admin startproject [项目名称] 若没有报错则创建项目成功<br>查看manage.py常用命令：python manage.py 即可显示manage中的可用命令<br>启动项目服务器命令：python manage.py runserver 启动服务器<br>启动项目服务器并修改端口：python manage.py runserver 9999 使用9999端口来启动服务器<br>创建django应用需要进入与manage.py的同级目录进行创建<br>创建命令为：python manage.py startapp [项目名称]<br>创建完成后将应用名称添加到settings.py中的INSTALLED_APPS中完成应用的创建<br>models模型创建完毕后使用manage.py来生成数据表，models模型创建需要在应用目录中的models.py中进行创建<br>创建数据迁移命令：python manage.py makemigrations [应用名称] 进行数据迁移的准备步骤，输入以下命令完成数据迁移操作<br>开始数据迁移命令：python manage.py migrate<br>注：如果不输入应用名称则默认对django中的所有应用进行数据迁移操作<br>数据迁移完成后使用以下命令进行SQL语句查询<br>命令为：python manage.py sqlmigrate [应用名称] [文件id]<br>给django创建一个超级用户<br>命令为：python manage.py createsuperuser<br>浏览器中访问：localhost:8000/admin 进行访问admin页面<br>在应用下admin.py中引入自身的models模块，使用<br>编辑admin.py添加代码：admin.site.register(models.Article)<br>将admin管理后台进行配置升级<br>创建admin配置类<br>    class ArticleAdmin(admin.ModelAdmin)</p><p>注册：admin.site.register(Article,ArticleAdmin )</p>]]></content>
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>两种网易云音乐播放器调用代码 网站可直接调用</title>
      <link href="/2017/11/18/wangyi/"/>
      <url>/2017/11/18/wangyi/</url>
      <content type="html"><![CDATA[<h1 id="第一种："><a href="/2017/11/18/wangyi/#第一种：" class="headerlink" title="第一种："></a>第一种：</h1><h2 id="效果："><a href="/2017/11/18/wangyi/#效果：" class="headerlink" title="效果："></a>效果：</h2><iframe src="//music.163.com/outchain/player?type=2&amp;id=4341314&amp;auto=1&amp;height=66" width="100%" height="86" frameborder="no" marginwidth="0" marginheight="0">&lt;span data-mce-type=”bookmark” style=”display: inline-block; width: 0px; overflow: hidden; line-height: 0;” class=”mce_SELRES_start”&gt;&lt;/span&gt;</iframe><h2 id="代码："><a href="/2017/11/18/wangyi/#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe <span class="attribute">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;amp;id=4341314&amp;amp;auto=1&amp;amp;height=66"</span> <span class="attribute">width</span>=<span class="string">"100%"</span> <span class="attribute">height</span>=<span class="string">"86"</span> <span class="attribute">frameborder</span>=<span class="string">"no"</span> <span class="attribute">marginwidth</span>=<span class="string">"0"</span> <span class="attribute">marginheight</span>=<span class="string">"0"</span>&gt;&amp;lt;span <span class="attribute">data-mce-type</span>=<span class="string">"bookmark"</span> <span class="attribute">style</span>=<span class="string">"display: inline-block; width: 0px; overflow: hidden; line-height: 0;"</span> <span class="attribute">class</span>=<span class="string">"mce_SELRES_start"</span>&amp;gt;&amp;lt;/span&amp;gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h2 id="参数说明："><a href="/2017/11/18/wangyi/#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h2><p>播放器可修改参数：</p><p>width=100% #自适应宽度<br>height=86 #根据自己喜好修改<br>id=4341314 #为歌曲的ID <a href="http://music.163.com/#/song?id=4341314" target="_blank" rel="noopener">http://music.163.com/#/song?id=4341314</a><br>auto=0 #0为不自动播放，1为自动播放</p><h1 id="第二种："><a href="/2017/11/18/wangyi/#第二种：" class="headerlink" title="第二种："></a>第二种：</h1><h2 id="效果：-1"><a href="/2017/11/18/wangyi/#效果：-1" class="headerlink" title="效果："></a>效果：</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="450" src="//music.163.com/outchain/player?type=0&id=967047669&auto=0&height=430"></iframe><h2 id="代码：-1"><a href="/2017/11/18/wangyi/#代码：-1" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe <span class="attribute">frameborder</span>=<span class="string">"no"</span> <span class="attribute">border</span>=<span class="string">"0"</span> <span class="attribute">marginwidth</span>=<span class="string">"0"</span> <span class="attribute">marginheight</span>=<span class="string">"0"</span> <span class="attribute">width</span>=100% <span class="attribute">height</span>=450 <span class="attribute">src</span>=<span class="string">"//music.163.com/outchain/player?type=0&amp;id=967047669&amp;auto=0&amp;height=430"</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网易云音乐 </tag>
            
            <tag> 音乐播放器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Python的面试题以及答案</title>
      <link href="/2017/11/13/pymianshidaan/"/>
      <url>/2017/11/13/pymianshidaan/</url>
      <content type="html"><![CDATA[<h1 id="Python语言特性"><a href="/2017/11/13/pymianshidaan/#Python语言特性" class="headerlink" title="Python语言特性"></a>Python语言特性</h1><h2 id="1-Python的函数参数传递"><a href="/2017/11/13/pymianshidaan/#1-Python的函数参数传递" class="headerlink" title="1 Python的函数参数传递"></a>1 Python的函数参数传递</h2><p>看两个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">fun(a)</span><br><span class="line"><span class="keyword">print</span> a  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span></span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line">fun(a)</span><br><span class="line"><span class="keyword">print</span> a  <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure><p>所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉。</p><p>通过<code>id</code>来看引用<code>a</code>的内存地址可以比较理解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"func_in"</span>,id(a)   <span class="comment"># func_in 41322472</span></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"re-point"</span>,id(a), id(<span class="number">2</span>)   <span class="comment"># re-point 41322448 41322448</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"func_out"</span>,id(a), id(<span class="number">1</span>)  <span class="comment"># func_out 41322472 41322472</span></span><br><span class="line">fun(a)</span><br><span class="line"><span class="keyword">print</span> a  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>注：具体的值在不同电脑上运行时可能不同。</p><p>可以看到，在执行完<code>a = 2</code>之后，<code>a</code>引用中保存的值，即内存地址发生变化，由原来<code>1</code>对象的所在的地址变成了<code>2</code>这个实体对象的内存地址。</p><p>而第2个例子<code>a</code>引用保存的内存值就不会发生变化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"func_in"</span>,id(a)  <span class="comment"># func_in 53629256</span></span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"func_out"</span>,id(a)     <span class="comment"># func_out 53629256</span></span><br><span class="line">fun(a)</span><br><span class="line"><span class="keyword">print</span> a  <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure><p>这里记住的是类型是属于对象的，而不是变量。而对象有两种,“可更改”（mutable）与“不可更改”（immutable）对象。在python中，strings, tuples, 和numbers是不可更改的对象，而 list, dict, set 等则是可以修改的对象。(这就是这个问题的重点)</p><p>当一个引用传递给函数的时候,函数自动复制一份引用,这个函数里的引用和外边的引用没有半毛关系了.所以第一个例子里函数把引用指向了一个不可变对象,当函数返回的时候,外面的引用没半毛感觉.而第二个例子就不一样了,函数内的引用指向的是可变对象,对它的操作就和定位了指针地址一样,在内存里进行修改.</p><p>如果还不明白的话,这里有更好的解释: <a href="http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference" target="_blank" rel="noopener">http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference</a></p><h2 id="2-Python中的元类-metaclass"><a href="/2017/11/13/pymianshidaan/#2-Python中的元类-metaclass" class="headerlink" title="2 Python中的元类(metaclass)"></a>2 Python中的元类(metaclass)</h2><p>这个非常的不常用,但是像ORM这种复杂的结构还是会需要的,详情请看:<a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python" target="_blank" rel="noopener">http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python</a></p><h2 id="3-staticmethod和-classmethod"><a href="/2017/11/13/pymianshidaan/#3-staticmethod和-classmethod" class="headerlink" title="3 @staticmethod和@classmethod"></a>3 @staticmethod和@classmethod</h2><p>Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"executing foo(%s)"</span>%(x)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"executing foo(%s,%s)"</span>%(self,x)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_foo</span><span class="params">(cls,x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"executing class_foo(%s,%s)"</span>%(cls,x)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_foo</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"executing static_foo(%s)"</span>%x</span><br><span class="line"></span><br><span class="line">a=A()</span><br></pre></td></tr></table></figure><p>这里先理解下函数参数里面的self和cls.这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用<code>foo(x)</code>,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关.对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是<code>foo(self, x)</code>,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的<code>a.foo(x)</code>(其实是<code>foo(a, x)</code>).类方法一样,只不过它传递的是类而不是实例,<code>A.class_foo(x)</code>.注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好.</p><p>对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用<code>a.static_foo(x)</code>或者<code>A.static_foo(x)</code>来调用.</p><table><thead><tr><th style="text-align:left">\</th><th style="text-align:left">实例方法</th><th style="text-align:left">类方法</th><th style="text-align:left">静态方法</th></tr></thead><tbody><tr><td style="text-align:left">a = A()</td><td style="text-align:left">a.foo(x)</td><td style="text-align:left">a.class_foo(x)</td><td style="text-align:left">a.static_foo(x)</td></tr><tr><td style="text-align:left">A</td><td style="text-align:left">不可用</td><td style="text-align:left">A.class_foo(x)</td><td style="text-align:left">A.static_foo(x)</td></tr></tbody></table><p>更多关于这个问题:</p><ol><li><a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python" target="_blank" rel="noopener">http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python</a></li><li><a href="https://realpython.com/blog/python/instance-class-and-static-methods-demystified/" target="_blank" rel="noopener">https://realpython.com/blog/python/instance-class-and-static-methods-demystified/</a><h2 id="4-类变量和实例变量"><a href="/2017/11/13/pymianshidaan/#4-类变量和实例变量" class="headerlink" title="4 类变量和实例变量"></a>4 类变量和实例变量</h2></li></ol><p><strong>类变量：</strong></p><blockquote><p>​    是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。</p></blockquote><p><strong>实例变量：</strong></p><blockquote><p>实例化之后，每个实例单独拥有的变量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span>  </span><br><span class="line">    num_of_instance = <span class="number">0</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span>  </span><br><span class="line">        self.name = name  </span><br><span class="line">        Test.num_of_instance += <span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line">    <span class="keyword">print</span> Test.num_of_instance   <span class="comment"># 0</span></span><br><span class="line">    t1 = Test(<span class="string">'jack'</span>)  </span><br><span class="line">    <span class="keyword">print</span> Test.num_of_instance   <span class="comment"># 1</span></span><br><span class="line">    t2 = Test(<span class="string">'lucy'</span>)  </span><br><span class="line">    <span class="keyword">print</span> t1.name , t1.num_of_instance  <span class="comment"># jack 2</span></span><br><span class="line">    <span class="keyword">print</span> t2.name , t2.num_of_instance  <span class="comment"># lucy 2</span></span><br></pre></td></tr></table></figure><blockquote><p>补充的例子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name=<span class="string">"aaa"</span></span><br><span class="line"></span><br><span class="line">p1=Person()</span><br><span class="line">p2=Person()</span><br><span class="line">p1.name=<span class="string">"bbb"</span></span><br><span class="line"><span class="keyword">print</span> p1.name  <span class="comment"># bbb</span></span><br><span class="line"><span class="keyword">print</span> p2.name  <span class="comment"># aaa</span></span><br><span class="line"><span class="keyword">print</span> Person.name  <span class="comment"># aaa</span></span><br></pre></td></tr></table></figure><p>这里<code>p1.name=&quot;bbb&quot;</code>是实例调用了类变量,这其实和上面第一个问题一样,就是函数传参的问题,<code>p1.name</code>一开始是指向的类变量<code>name=&quot;aaa&quot;</code>,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.</p><p>可以看看下面的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name=[]</span><br><span class="line"></span><br><span class="line">p1=Person()</span><br><span class="line">p2=Person()</span><br><span class="line">p1.name.append(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> p1.name  <span class="comment"># [1]</span></span><br><span class="line"><span class="keyword">print</span> p2.name  <span class="comment"># [1]</span></span><br><span class="line"><span class="keyword">print</span> Person.name  <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure><p>参考:<a href="http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block" target="_blank" rel="noopener">http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block</a></p><h2 id="5-Python自省"><a href="/2017/11/13/pymianshidaan/#5-Python自省" class="headerlink" title="5 Python自省"></a>5 Python自省</h2><p>这个也是python彪悍的特性.</p><p>自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line">c = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">print</span> type(a),type(b),type(c) <span class="comment"># &lt;type 'list'&gt; &lt;type 'dict'&gt; &lt;type 'bool'&gt;</span></span><br><span class="line"><span class="keyword">print</span> isinstance(a,list)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="6-字典推导式"><a href="/2017/11/13/pymianshidaan/#6-字典推导式" class="headerlink" title="6 字典推导式"></a>6 字典推导式</h2><p>可能你见过列表推导时,却没有见过字典推导式,在2.7中才加入的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key: value <span class="keyword">for</span> (key, value) <span class="keyword">in</span> iterable&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Python中单下划线和双下划线"><a href="/2017/11/13/pymianshidaan/#7-Python中单下划线和双下划线" class="headerlink" title="7 Python中单下划线和双下划线"></a>7 Python中单下划线和双下划线</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>            self.__superprivate = <span class="string">"Hello"</span></span><br><span class="line"><span class="meta">... </span>            self._semiprivate = <span class="string">", world!"</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mc = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> mc.__superprivate</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: myClass instance has no attribute <span class="string">'__superprivate'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> mc._semiprivate</span><br><span class="line">, world!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> mc.__dict__</span><br><span class="line">&#123;<span class="string">'_MyClass__superprivate'</span>: <span class="string">'Hello'</span>, <span class="string">'_semiprivate'</span>: <span class="string">', world!'</span>&#125;</span><br></pre></td></tr></table></figure><p><code>__foo__</code>:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如<code>__init__()</code>,<code>__del__()</code>,<code>__call__()</code>这些特殊方法</p><p><code>_foo</code>:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；</p><p><code>__foo</code>:这个有真正的意义:解析器用<code>_classname__foo</code>来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,通过对象名._类名__xxx这样的方式可以访问.</p><p>详情见:<a href="http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python" target="_blank" rel="noopener">http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python</a></p><p>或者: <a href="http://www.zhihu.com/question/19754941" target="_blank" rel="noopener">http://www.zhihu.com/question/19754941</a></p><h2 id="8-字符串格式化-和-format"><a href="/2017/11/13/pymianshidaan/#8-字符串格式化-和-format" class="headerlink" title="8 字符串格式化:%和.format"></a>8 字符串格式化:%和.format</h2><p>.format在许多方面看起来更便利.对于<code>%</code>最烦人的是它无法同时传递一个变量和元组.你可能会想下面的代码不会有什么问题:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hi there %s"</span> % <span class="built_in">name</span></span><br></pre></td></tr></table></figure><p>但是,如果name恰好是(1,2,3),它将会抛出一个TypeError异常.为了保证它总是正确的,你必须这样做:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"hi there %s"</span> % (<span class="built_in">name</span>,)   <span class="comment"># 提供一个单元素的数组而不是一个参数</span></span><br></pre></td></tr></table></figure><p>但是有点丑..format就没有这些问题.你给的第二个问题也是这样,.format好看多了.</p><p>你为什么不用它?</p><ul><li>不知道它(在读这个之前)</li><li>为了和Python2.5兼容(譬如logging库建议使用<code>%</code>(<a href="https://github.com/taizilongxu/interview_python/issues/4" target="_blank" rel="noopener">issue #4</a>))</li></ul><p><a href="http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format" target="_blank" rel="noopener">http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format</a></p><h2 id="9-迭代器和生成器"><a href="/2017/11/13/pymianshidaan/#9-迭代器和生成器" class="headerlink" title="9 迭代器和生成器"></a>9 迭代器和生成器</h2><p>这个是stackoverflow里python排名第一的问题,值得一看: <a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python" target="_blank" rel="noopener">http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python</a></p><p>这是中文版: <a href="http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html" target="_blank" rel="noopener">http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html</a></p><p>这里有个关于生成器的创建问题面试官有考：<br>问：  将列表生成式中[]改成() 之后数据结构是否改变？<br>答案：是，从列表变为生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x0000028F8B774200</span>&gt;</span><br></pre></td></tr></table></figure><p>通过列表生成式，可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含百万元素的列表，不仅是占用很大的内存空间，如：我们只需要访问前面的几个元素，后面大部分元素所占的空间都是浪费的。因此，没有必要创建完整的列表（节省大量内存空间）。在Python中，我们可以采用生成器：边循环，边计算的机制—&gt;generator</p><h2 id="10-args-and-kwargs"><a href="/2017/11/13/pymianshidaan/#10-args-and-kwargs" class="headerlink" title="10 *args and **kwargs"></a>10 <code>*args</code> and <code>**kwargs</code></h2><p>用<code>*args</code>和<code>**kwargs</code>只是为了方便并没有强制使用它们.</p><p>当你不确定你的函数里将要传递多少参数时你可以用<code>*args</code>.例如,它可以传递任意数量的参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_everything</span><span class="params">(*args)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> count, thing <span class="keyword">in</span> enumerate(args):</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">print</span> <span class="string">'&#123;0&#125;. &#123;1&#125;'</span>.format(count, thing)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_everything(<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cabbage'</span>)</span><br><span class="line"><span class="number">0.</span> apple</span><br><span class="line"><span class="number">1.</span> banana</span><br><span class="line"><span class="number">2.</span> cabbage</span><br></pre></td></tr></table></figure><p>相似的,<code>**kwargs</code>允许你使用没有事先定义的参数名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">table_things</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> name, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">print</span> <span class="string">'&#123;0&#125; = &#123;1&#125;'</span>.format(name, value)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>table_things(apple = <span class="string">'fruit'</span>, cabbage = <span class="string">'vegetable'</span>)</span><br><span class="line">cabbage = vegetable</span><br><span class="line">apple = fruit</span><br></pre></td></tr></table></figure><p>你也可以混着用.命名参数首先获得参数值然后所有的其他参数都传递给<code>*args</code>和<code>**kwargs</code>.命名参数在列表的最前端.例如:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">table_things</span><span class="params">(titlestring, **kwargs)</span></span></span><br></pre></td></tr></table></figure><p><code>*args</code>和<code>**kwargs</code>可以同时在函数的定义中,但是<code>*args</code>必须在<code>**kwargs</code>前面.</p><p>当调用函数时你也可以用<code>*</code>和<code>**</code>语法.例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_three_things</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'a = &#123;0&#125;, b = &#123;1&#125;, c = &#123;2&#125;'</span>.format(a,b,c)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [<span class="string">'aardvark'</span>, <span class="string">'baboon'</span>, <span class="string">'cat'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_three_things(*mylist)</span><br><span class="line"></span><br><span class="line">a = aardvark, b = baboon, c = cat</span><br></pre></td></tr></table></figure><p>就像你看到的一样,它可以传递列表(或者元组)的每一项并把它们解包.注意必须与它们在函数里的参数相吻合.当然,你也可以在函数定义或者函数调用时用*.</p><p><a href="http://stackoverflow.com/questions/3394835/args-and-kwargs" target="_blank" rel="noopener">http://stackoverflow.com/questions/3394835/args-and-kwargs</a></p><h2 id="11-面向切面编程AOP和装饰器"><a href="/2017/11/13/pymianshidaan/#11-面向切面编程AOP和装饰器" class="headerlink" title="11 面向切面编程AOP和装饰器"></a>11 面向切面编程AOP和装饰器</h2><p>这个AOP一听起来有点懵,同学面阿里的时候就被问懵了…</p><p>装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量函数中与函数功能本身无关的雷同代码并继续重用。概括的讲，<strong>装饰器的作用就是为已经存在的对象添加额外的功能。</strong></p><p>这个问题比较大,推荐: <a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python" target="_blank" rel="noopener">http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python</a></p><p>中文: <a href="http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html" target="_blank" rel="noopener">http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html</a></p><h2 id="12-鸭子类型"><a href="/2017/11/13/pymianshidaan/#12-鸭子类型" class="headerlink" title="12 鸭子类型"></a>12 鸭子类型</h2><p>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p><p>我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。</p><p>比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。</p><p>又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.</p><p>鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的设计模式。</p><h2 id="13-Python中重载"><a href="/2017/11/13/pymianshidaan/#13-Python中重载" class="headerlink" title="13 Python中重载"></a>13 Python中重载</h2><p>引自知乎:<a href="http://www.zhihu.com/question/20053359" target="_blank" rel="noopener">http://www.zhihu.com/question/20053359</a></p><p>函数重载主要是为了解决两个问题。</p><ol><li>可变参数类型。</li><li>可变参数个数。</li></ol><p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。</p><p>好吧，那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。</p><p>那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。</p><p>好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。</p><h2 id="14-新式类和旧式类"><a href="/2017/11/13/pymianshidaan/#14-新式类和旧式类" class="headerlink" title="14 新式类和旧式类"></a>14 新式类和旧式类</h2><p>这个面试官问了,我说了老半天,不知道他问的真正意图是什么.</p><p><a href="http://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python" target="_blank" rel="noopener">stackoverflow</a></p><p>这篇文章很好的介绍了新式类的特性: <a href="http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html" target="_blank" rel="noopener">http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html</a></p><p>新式类很早在2.2就出现了,所以旧式类完全是兼容的问题,Python3里的类全部都是新式类.这里有一个MRO问题可以了解下(新式类是广度优先,旧式类是深度优先),&lt;Python核心编程&gt;里讲的也很多.</p><blockquote><p>一个旧式类的深度优先的例子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"A"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo1</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"C"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.foo1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># A</span></span><br></pre></td></tr></table></figure><p><strong>按照经典类的查找顺序<code>从左到右深度优先</code>的规则，在访问<code>d.foo1()</code>的时候,D这个类是没有的..那么往上查找,先找到B,里面没有,深度优先,访问A,找到了foo1(),所以这时候调用的是A的foo1()，从而导致C重写的foo1()被绕过</strong></p><h2 id="15-new-和-init-的区别"><a href="/2017/11/13/pymianshidaan/#15-new-和-init-的区别" class="headerlink" title="15 __new__和__init__的区别"></a>15 <code>__new__</code>和<code>__init__</code>的区别</h2><p>这个<code>__new__</code>确实很少见到,先做了解吧.</p><ol><li><code>__new__</code>是一个静态方法,而<code>__init__</code>是一个实例方法.</li><li><code>__new__</code>方法会返回一个创建的实例,而<code>__init__</code>什么都不返回.</li><li>只有在<code>__new__</code>返回一个cls的实例时后面的<code>__init__</code>才能被调用.</li><li>当创建一个新实例时调用<code>__new__</code>,初始化一个实例时用<code>__init__</code>.</li></ol><p><a href="http://stackoverflow.com/questions/674304/pythons-use-of-new-and-init" target="_blank" rel="noopener">stackoverflow</a></p><p>ps: <code>__metaclass__</code>是创建类时起作用.所以我们可以分别使用<code>__metaclass__</code>,<code>__new__</code>和<code>__init__</code>来分别在类创建,实例创建和实例初始化的时候做一些小手脚.</p><h2 id="16-单例模式"><a href="/2017/11/13/pymianshidaan/#16-单例模式" class="headerlink" title="16 单例模式"></a>16 单例模式</h2><blockquote><p>​    单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。</p><p><code>__new__()</code>在<code>__init__()</code>之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。单例模式是指创建唯一对象，单例模式设计的类只能实例<br><strong>这个绝对常考啊.绝对要记住1~2个方法,当时面试官是让手写的.</strong></p></blockquote><h3 id="1-使用-new-方法"><a href="/2017/11/13/pymianshidaan/#1-使用-new-方法" class="headerlink" title="1 使用__new__方法"></a>1 使用<code>__new__</code>方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'_instance'</span>):</span><br><span class="line">            orig = super(Singleton, cls)</span><br><span class="line">            cls._instance = orig.__new__(cls, *args, **kw)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(Singleton)</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-共享属性"><a href="/2017/11/13/pymianshidaan/#2-共享属性" class="headerlink" title="2 共享属性"></a>2 共享属性</h3><p>创建实例时把所有实例的<code>__dict__</code>指向同一个字典,这样它们具有相同的属性和方法.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Borg</span><span class="params">(object)</span>:</span></span><br><span class="line">    _state = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kw)</span>:</span></span><br><span class="line">        ob = super(Borg, cls).__new__(cls, *args, **kw)</span><br><span class="line">        ob.__dict__ = cls._state</span><br><span class="line">        <span class="keyword">return</span> ob</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass2</span><span class="params">(Borg)</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-装饰器版本"><a href="/2017/11/13/pymianshidaan/#3-装饰器版本" class="headerlink" title="3 装饰器版本"></a>3 装饰器版本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getinstance</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> getinstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h3 id="4-import方法"><a href="/2017/11/13/pymianshidaan/#4-import方法" class="headerlink" title="4 import方法"></a>4 import方法</h3><p>作为python的模块是天然的单例模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysingleton.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_singleton = My_Singleton()</span><br><span class="line"></span><br><span class="line"><span class="comment"># to use</span></span><br><span class="line"><span class="keyword">from</span> mysingleton <span class="keyword">import</span> my_singleton</span><br><span class="line"></span><br><span class="line">my_singleton.foo()</span><br></pre></td></tr></table></figure><p><strong><a href="http://python.jobbole.com/87294/" target="_blank" rel="noopener">单例模式伯乐在线详细解释</a></strong></p><h2 id="17-Python中的作用域"><a href="/2017/11/13/pymianshidaan/#17-Python中的作用域" class="headerlink" title="17 Python中的作用域"></a>17 Python中的作用域</h2><p>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。</p><p>当 Python 遇到一个变量的话他会按照这样的顺序进行搜索：</p><p>本地作用域（Local）→当前作用域被嵌入的本地作用域（Enclosing locals）→全局/模块作用域（Global）→内置作用域（Built-in）</p><h2 id="18-GIL线程全局锁"><a href="/2017/11/13/pymianshidaan/#18-GIL线程全局锁" class="headerlink" title="18 GIL线程全局锁"></a>18 GIL线程全局锁</h2><p>线程全局锁(Global Interpreter Lock),即Python为了保证线程安全而采取的独立线程运行的限制,说白了就是一个核只能在同一时间运行一个线程.<strong>对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。</strong></p><p>见<a href="http://www.oschina.net/translate/pythons-hardest-problem" target="_blank" rel="noopener">Python 最难的问题</a></p><p>解决办法就是多进程和下面的协程(协程也只是单CPU,但是能减小切换代价提升性能).</p><h2 id="19-协程"><a href="/2017/11/13/pymianshidaan/#19-协程" class="headerlink" title="19 协程"></a>19 协程</h2><p>知乎被问到了,呵呵哒,跪了</p><p>简单点说协程是进程和线程的升级版,进程和线程都面临着内核态和用户态的切换问题而耗费许多切换时间,而协程就是用户自己控制切换的时机,不再需要陷入系统的内核态.</p><p>Python里最常见的yield就是协程的思想!可以查看第九个问题.</p><h2 id="20-闭包"><a href="/2017/11/13/pymianshidaan/#20-闭包" class="headerlink" title="20 闭包"></a>20 闭包</h2><p>闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。</p><p>当一个内嵌函数引用其外部作作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点:</p><ol><li>必须有一个内嵌函数</li><li>内嵌函数必须引用外部函数中的变量</li><li>外部函数的返回值必须是内嵌函数</li></ol><p>感觉闭包还是有难度的,几句话是说不明白的,还是查查相关资料.</p><p>重点是函数运行后并不会被撤销,就像16题的instance字典一样,当函数运行完后,instance并不被销毁,而是继续留在内存空间里.这个功能类似类里的类变量,只不过迁移到了函数上.</p><p>闭包就像个空心球一样,你知道外面和里面,但你不知道中间是什么样.</p><h2 id="21-lambda函数"><a href="/2017/11/13/pymianshidaan/#21-lambda函数" class="headerlink" title="21 lambda函数"></a>21 lambda函数</h2><p>其实就是一个匿名函数,为什么叫lambda?因为和后面的函数式编程有关.</p><p>推荐: <a href="http://www.zhihu.com/question/20125256" target="_blank" rel="noopener">知乎</a></p><h2 id="22-Python函数式编程"><a href="/2017/11/13/pymianshidaan/#22-Python函数式编程" class="headerlink" title="22 Python函数式编程"></a>22 Python函数式编程</h2><p>这个需要适当的了解一下吧,毕竟函数式编程在Python中也做了引用.</p><p>推荐: <a href="http://coolshell.cn/articles/10822.html" target="_blank" rel="noopener">酷壳</a></p><p>python中函数式编程支持:</p><p>filter 函数的功能相当于过滤器。调用一个布尔函数<code>bool_func</code>来迭代遍历每个seq中的元素；返回一个使<code>bool_seq</code>返回值为true的元素的序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">&gt;&gt;&gt;b = filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">5</span>, a)</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> b</span><br><span class="line">&gt;&gt;&gt;[<span class="number">6</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>map函数是对一个序列的每个项依次执行函数，下面是对一个序列每个项都乘以2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = map(<span class="keyword">lambda</span> x:x*<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(a)</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>reduce函数是对一个序列的每个项迭代调用函数，下面是求3的阶乘：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y:x*y,range(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="23-Python里的拷贝"><a href="/2017/11/13/pymianshidaan/#23-Python里的拷贝" class="headerlink" title="23 Python里的拷贝"></a>23 Python里的拷贝</h2><p>引用和copy(),deepcopy()的区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]  <span class="comment">#原始对象</span></span><br><span class="line"></span><br><span class="line">b = a  <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a)  <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a)  <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">5</span>)  <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">'c'</span>)  <span class="comment">#修改对象a中的['a', 'b']数组对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'a = '</span>, a</span><br><span class="line"><span class="keyword">print</span> <span class="string">'b = '</span>, b</span><br><span class="line"><span class="keyword">print</span> <span class="string">'c = '</span>, c</span><br><span class="line"><span class="keyword">print</span> <span class="string">'d = '</span>, d</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">a =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</span><br><span class="line">b =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">5</span>]</span><br><span class="line">c =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</span><br><span class="line">d =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>]]</span><br></pre></td></tr></table></figure><h2 id="24-Python垃圾回收机制"><a href="/2017/11/13/pymianshidaan/#24-Python垃圾回收机制" class="headerlink" title="24 Python垃圾回收机制"></a>24 Python垃圾回收机制</h2><p>Python GC主要使用引用计数（reference counting）来跟踪和回收垃圾。在引用计数的基础上，通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用问题，通过“分代回收”（generation collection）以空间换时间的方法提高垃圾回收效率。</p><h3 id="1-引用计数"><a href="/2017/11/13/pymianshidaan/#1-引用计数" class="headerlink" title="1 引用计数"></a>1 引用计数</h3><p>PyObject是每个对象必有的内容，其中<code>ob_refcnt</code>就是做为引用计数。当一个对象有新的引用时，它的<code>ob_refcnt</code>就会增加，当引用它的对象被删除，它的<code>ob_refcnt</code>就会减少.引用计数为0时，该对象生命就结束了。</p><p>优点:</p><ol><li>简单</li><li>实时性</li></ol><p>缺点:</p><ol><li>维护引用计数消耗资源</li><li>循环引用</li></ol><h3 id="2-标记-清除机制"><a href="/2017/11/13/pymianshidaan/#2-标记-清除机制" class="headerlink" title="2 标记-清除机制"></a>2 标记-清除机制</h3><p>基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。</p><h3 id="3-分代技术"><a href="/2017/11/13/pymianshidaan/#3-分代技术" class="headerlink" title="3 分代技术"></a>3 分代技术</h3><p>分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。</p><p>Python默认定义了三代对象集合，索引数越大，对象存活时间越长。</p><p>举例：<br>当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。</p><h2 id="25-Python的List"><a href="/2017/11/13/pymianshidaan/#25-Python的List" class="headerlink" title="25 Python的List"></a>25 Python的List</h2><p>推荐: <a href="http://www.jianshu.com/p/J4U6rR" target="_blank" rel="noopener">http://www.jianshu.com/p/J4U6rR</a></p><h2 id="26-Python的is"><a href="/2017/11/13/pymianshidaan/#26-Python的is" class="headerlink" title="26 Python的is"></a>26 Python的is</h2><p>is是对比地址,==是对比值</p><h2 id="27-read-readline和readlines"><a href="/2017/11/13/pymianshidaan/#27-read-readline和readlines" class="headerlink" title="27 read,readline和readlines"></a>27 read,readline和readlines</h2><ul><li>read        读取整个文件</li><li>readline    读取下一行,使用生成器方法</li><li>readlines   读取整个文件到一个迭代器以供我们遍历</li></ul><h2 id="28-Python2和3的区别"><a href="/2017/11/13/pymianshidaan/#28-Python2和3的区别" class="headerlink" title="28 Python2和3的区别"></a>28 Python2和3的区别</h2><p>推荐：<a href="http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/" target="_blank" rel="noopener">Python 2.7.x 与 Python 3.x 的主要差异</a></p><h2 id="29-super-init"><a href="/2017/11/13/pymianshidaan/#29-super-init" class="headerlink" title="29 super init"></a>29 super init</h2><p>super() lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven’t already.</p><p>Note that the syntax changed in Python 3.0: you can just say super().<code>__init__</code>() instead of super(ChildB, self).<code>__init__</code>() which IMO is quite a bit nicer.</p><p><a href="http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods" target="_blank" rel="noopener">http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods</a></p><p><a href="http://blog.csdn.net/mrlevo520/article/details/51712440" target="_blank" rel="noopener">Python2.7中的super方法浅见</a></p><h2 id="30-range-and-xrange"><a href="/2017/11/13/pymianshidaan/#30-range-and-xrange" class="headerlink" title="30 range and xrange"></a>30 range and xrange</h2><p>都在循环时使用，xrange内存性能更好。<br>for i in range(0, 20):<br>for i in xrange(0, 20):<br>What is the difference between range and xrange functions in Python 2.X?<br> range creates a list, so if you do range(1, 10000000) it creates a list in memory with 9999999 elements.<br> xrange is a sequence object that evaluates lazily.</p><p><a href="http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x" target="_blank" rel="noopener">http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x</a></p><h1 id="操作系统"><a href="/2017/11/13/pymianshidaan/#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h2 id="1-select-poll和epoll"><a href="/2017/11/13/pymianshidaan/#1-select-poll和epoll" class="headerlink" title="1 select,poll和epoll"></a>1 select,poll和epoll</h2><p>其实所有的I/O都是轮询的方法,只不过实现的层面不同罢了.</p><p>这个问题可能有点深入了,但相信能回答出这个问题是对I/O多路复用有很好的了解了.其中tornado使用的就是epoll的.</p><p><a href="http://www.cnblogs.com/Anker/p/3265058.html" target="_blank" rel="noopener">selec,poll和epoll区别总结</a></p><p>基本上select有3个缺点:</p><ol><li>连接数受限</li><li>查找配对速度慢</li><li>数据由内核拷贝到用户态</li></ol><p>poll改善了第一个缺点</p><p>epoll改了三个缺点.</p><p>关于epoll的: <a href="http://www.cnblogs.com/my_life/articles/3968782.html" target="_blank" rel="noopener">http://www.cnblogs.com/my_life/articles/3968782.html</a></p><h2 id="2-调度算法"><a href="/2017/11/13/pymianshidaan/#2-调度算法" class="headerlink" title="2 调度算法"></a>2 调度算法</h2><ol><li>先来先服务(FCFS, First Come First Serve)</li><li>短作业优先(SJF, Shortest Job First)</li><li>最高优先权调度(Priority Scheduling)</li><li>时间片轮转(RR, Round Robin)</li><li>多级反馈队列调度(multilevel feedback queue scheduling)</li></ol><p>常见的调度算法总结:<a href="http://www.jianshu.com/p/6edf8174c1eb" target="_blank" rel="noopener">http://www.jianshu.com/p/6edf8174c1eb</a></p><p>实时调度算法:</p><ol><li>最早截至时间优先 EDF</li><li>最低松弛度优先 LLF</li></ol><h2 id="3-死锁"><a href="/2017/11/13/pymianshidaan/#3-死锁" class="headerlink" title="3 死锁"></a>3 死锁</h2><p>原因:</p><ol><li>竞争资源</li><li>程序推进顺序不当</li></ol><p>必要条件:</p><ol><li>互斥条件</li><li>请求和保持条件</li><li>不剥夺条件</li><li>环路等待条件</li></ol><p>处理死锁基本方法:</p><ol><li>预防死锁(摒弃除1以外的条件)</li><li>避免死锁(银行家算法)</li><li>检测死锁(资源分配图)</li><li>解除死锁<ol><li>剥夺资源</li><li>撤销进程</li></ol></li></ol><p>死锁概念处理策略详细介绍:<a href="https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/10.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/10.html</a></p><h2 id="4-程序编译与链接"><a href="/2017/11/13/pymianshidaan/#4-程序编译与链接" class="headerlink" title="4 程序编译与链接"></a>4 程序编译与链接</h2><p>推荐: <a href="http://www.ruanyifeng.com/blog/2014/11/compiler.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/11/compiler.html</a></p><p>Bulid过程可以分解为4个步骤:预处理(Prepressing), 编译(Compilation)、汇编(Assembly)、链接(Linking)</p><p>以c语言为例:</p><h3 id="1-预处理"><a href="/2017/11/13/pymianshidaan/#1-预处理" class="headerlink" title="1 预处理"></a>1 预处理</h3><p>预编译过程主要处理那些源文件中的以“#”开始的预编译指令，主要处理规则有：</p><ol><li>将所有的“#define”删除，并展开所用的宏定义</li><li>处理所有条件预编译指令，比如“#if”、“#ifdef”、 “#elif”、“#endif”</li><li>处理“#include”预编译指令，将被包含的文件插入到该编译指令的位置，注：此过程是递归进行的</li><li>删除所有注释</li><li>添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息以及用于编译时产生编译错误或警告时可显示行号</li><li>保留所有的#pragma编译器指令。</li></ol><h3 id="2-编译"><a href="/2017/11/13/pymianshidaan/#2-编译" class="headerlink" title="2 编译"></a>2 编译</h3><p>编译过程就是把预处理完的文件进行一系列的词法分析、语法分析、语义分析及优化后生成相应的汇编代码文件。这个过程是整个程序构建的核心部分。</p><h3 id="3-汇编"><a href="/2017/11/13/pymianshidaan/#3-汇编" class="headerlink" title="3 汇编"></a>3 汇编</h3><p>汇编器是将汇编代码转化成机器可以执行的指令，每一条汇编语句几乎都是一条机器指令。经过编译、链接、汇编输出的文件成为目标文件(Object File)</p><h3 id="4-链接"><a href="/2017/11/13/pymianshidaan/#4-链接" class="headerlink" title="4 链接"></a>4 链接</h3><p>链接的主要内容就是把各个模块之间相互引用的部分处理好，使各个模块可以正确的拼接。<br>链接的主要过程包块 地址和空间的分配（Address and Storage Allocation）、符号决议(Symbol Resolution)和重定位(Relocation)等步骤。</p><h2 id="5-静态链接和动态链接"><a href="/2017/11/13/pymianshidaan/#5-静态链接和动态链接" class="headerlink" title="5 静态链接和动态链接"></a>5 静态链接和动态链接</h2><p>静态链接方法：静态链接的时候，载入代码就会把程序会用到的动态代码或动态代码的地址确定下来<br>静态库的链接可以使用静态链接，动态链接库也可以使用这种方法链接导入库</p><p>动态链接方法：使用这种方式的程序并不在一开始就完成动态链接，而是直到真正调用动态库代码时，载入程序才计算(被调用的那部分)动态代码的逻辑地址，然后等到某个时候，程序又需要调用另外某块动态代码时，载入程序又去计算这部分代码的逻辑地址，所以，这种方式使程序初始化时间较短，但运行期间的性能比不上静态链接的程序</p><h2 id="6-虚拟内存技术"><a href="/2017/11/13/pymianshidaan/#6-虚拟内存技术" class="headerlink" title="6 虚拟内存技术"></a>6 虚拟内存技术</h2><p>虚拟存储器是指具有请求调入功能和置换功能,能从逻辑上对内存容量加以扩充的一种存储系统.</p><h2 id="7-分页和分段"><a href="/2017/11/13/pymianshidaan/#7-分页和分段" class="headerlink" title="7 分页和分段"></a>7 分页和分段</h2><p>分页: 用户程序的地址空间被划分成若干固定大小的区域，称为“页”，相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配。</p><p>分段: 将用户程序地址空间分成若干个大小不等的段，每段可以定义一组相对完整的逻辑信息。存储分配时，以段为单位，段与段在内存中可以不相邻接，也实现了离散分配。</p><h3 id="分页与分段的主要区别"><a href="/2017/11/13/pymianshidaan/#分页与分段的主要区别" class="headerlink" title="分页与分段的主要区别"></a>分页与分段的主要区别</h3><ol><li>页是信息的物理单位,分页是为了实现非连续分配,以便解决内存碎片问题,或者说分页是由于系统管理的需要.段是信息的逻辑单位,它含有一组意义相对完整的信息,分段的目的是为了更好地实现共享,满足用户的需要.</li><li>页的大小固定,由系统确定,将逻辑地址划分为页号和页内地址是由机器硬件实现的.而段的长度却不固定,决定于用户所编写的程序,通常由编译程序在对源程序进行编译时根据信息的性质来划分.</li><li>分页的作业地址空间是一维的.分段的地址空间是二维的.</li></ol><h2 id="8-页面置换算法"><a href="/2017/11/13/pymianshidaan/#8-页面置换算法" class="headerlink" title="8 页面置换算法"></a>8 页面置换算法</h2><ol><li>最佳置换算法OPT:不可能实现</li><li>先进先出FIFO</li><li>最近最久未使用算法LRU:最近一段时间里最久没有使用过的页面予以置换.</li><li>clock算法</li></ol><h2 id="9-边沿触发和水平触发"><a href="/2017/11/13/pymianshidaan/#9-边沿触发和水平触发" class="headerlink" title="9 边沿触发和水平触发"></a>9 边沿触发和水平触发</h2><p>边缘触发是指每当状态变化时发生一个 io 事件，条件触发是只要满足条件就发生一个 io 事件</p><h1 id="数据库"><a href="/2017/11/13/pymianshidaan/#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="1-事务"><a href="/2017/11/13/pymianshidaan/#1-事务" class="headerlink" title="1 事务"></a>1 事务</h2><p>数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。<br>彻底理解数据库事务: <a href="http://www.hollischuang.com/archives/898" target="_blank" rel="noopener">http://www.hollischuang.com/archives/898</a></p><h2 id="2-数据库索引"><a href="/2017/11/13/pymianshidaan/#2-数据库索引" class="headerlink" title="2 数据库索引"></a>2 数据库索引</h2><p>推荐: <a href="http://tech.meituan.com/mysql-index.html" target="_blank" rel="noopener">http://tech.meituan.com/mysql-index.html</a></p><p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></p><p>聚集索引,非聚集索引,B-Tree,B+Tree,最左前缀原理</p><h2 id="3-Redis原理"><a href="/2017/11/13/pymianshidaan/#3-Redis原理" class="headerlink" title="3 Redis原理"></a>3 Redis原理</h2><h3 id="Redis是什么？"><a href="/2017/11/13/pymianshidaan/#Redis是什么？" class="headerlink" title="Redis是什么？"></a>Redis是什么？</h3><ol><li>是一个完全开源免费的key-value内存数据库 </li><li>通常被认为是一个数据结构服务器，主要是因为其有着丰富的数据结构 strings、map、 list、sets、 sorted sets</li></ol><h3 id="Redis数据库"><a href="/2017/11/13/pymianshidaan/#Redis数据库" class="headerlink" title="Redis数据库"></a>Redis数据库</h3><blockquote><p>​    通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作</p></blockquote><ul><li>速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万 </li><li>持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof) </li><li>自动操作：对不同数据类型的操作都是自动的，很安全 </li><li>快速的主–从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。 </li><li>Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。</li></ul><h3 id="Redis缺点"><a href="/2017/11/13/pymianshidaan/#Redis缺点" class="headerlink" title="Redis缺点"></a>Redis缺点</h3><ul><li>是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li><li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li></ul><h2 id="4-乐观锁和悲观锁"><a href="/2017/11/13/pymianshidaan/#4-乐观锁和悲观锁" class="headerlink" title="4 乐观锁和悲观锁"></a>4 乐观锁和悲观锁</h2><p>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作</p><p>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p><p>乐观锁与悲观锁的具体区别: <a href="http://www.cnblogs.com/Bob-FD/p/3352216.html" target="_blank" rel="noopener">http://www.cnblogs.com/Bob-FD/p/3352216.html</a></p><h2 id="5-MVCC"><a href="/2017/11/13/pymianshidaan/#5-MVCC" class="headerlink" title="5 MVCC"></a>5 MVCC</h2><blockquote><p>​    全称是Multi-Version Concurrent Control，即多版本并发控制，在MVCC协议下，每个读操作会看到一个一致性的snapshot，并且可以实现非阻塞的读。MVCC允许数据具有多个版本，这个版本可以是时间戳或者是全局递增的事务ID，在同一个时间点，不同的事务看到的数据是不同的。</p></blockquote><h3 id="MySQL的innodb引擎是如何实现MVCC的"><a href="/2017/11/13/pymianshidaan/#MySQL的innodb引擎是如何实现MVCC的" class="headerlink" title="MySQL的innodb引擎是如何实现MVCC的"></a><a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">MySQL</a>的innodb引擎是如何实现MVCC的</h3><p>innodb会为每一行添加两个字段，分别表示该行<strong>创建的版本</strong>和<strong>删除的版本</strong>，填入的是事务的版本号，这个版本号随着事务的创建不断递增。在repeated read的隔离级别（<a href="http://blog.csdn.net/chosen0ne/article/details/10036775" target="_blank" rel="noopener">事务的隔离级别请看这篇文章</a>）下，具体各种数据库操作的实现：</p><ul><li>select：满足以下两个条件innodb会返回该行数据：<ul><li>该行的创建版本号小于等于当前版本号，用于保证在select操作之前所有的操作已经执行落地。</li><li>该行的删除版本号大于当前版本或者为空。删除版本号大于当前版本意味着有一个并发事务将该行删除了。</li></ul></li><li>insert：将新插入的行的创建版本号设置为当前系统的版本号。</li><li>delete：将要删除的行的删除版本号设置为当前系统的版本号。</li><li>update：不执行原地update，而是转换成insert + delete。将旧行的删除版本号设置为当前版本号，并将新行insert同时设置创建版本号为当前版本号。</li></ul><p>其中，写操作（insert、delete和update）执行时，需要将系统版本号递增。</p><p>​    由于旧数据并不真正的删除，所以必须对这些数据进行清理，innodb会开启一个后台线程执行清理工作，具体的规则是将删除版本号小于当前系统版本的行删除，这个过程叫做purge。</p><p>通过MVCC很好的实现了事务的隔离性，可以达到repeated read级别，要实现serializable还必须加锁。</p><blockquote><p> 参考：<a href="http://blog.csdn.net/chosen0ne/article/details/18093187" target="_blank" rel="noopener">MVCC浅析</a></p></blockquote><h2 id="6-MyISAM和InnoDB"><a href="/2017/11/13/pymianshidaan/#6-MyISAM和InnoDB" class="headerlink" title="6 MyISAM和InnoDB"></a>6 MyISAM和InnoDB</h2><p>MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。</p><p>InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p><p>mysql 数据库引擎: <a href="http://www.cnblogs.com/0201zcr/p/5296843.html" target="_blank" rel="noopener">http://www.cnblogs.com/0201zcr/p/5296843.html</a><br>MySQL存储引擎－－MyISAM与InnoDB区别: <a href="https://segmentfault.com/a/1190000008227211" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008227211</a></p><h1 id="网络"><a href="/2017/11/13/pymianshidaan/#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="1-三次握手"><a href="/2017/11/13/pymianshidaan/#1-三次握手" class="headerlink" title="1 三次握手"></a>1 三次握手</h2><ol><li>客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。</li><li>服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。</li><li>最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。</li></ol><h2 id="2-四次挥手"><a href="/2017/11/13/pymianshidaan/#2-四次挥手" class="headerlink" title="2 四次挥手"></a>2 四次挥手</h2><p><em>注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.</em></p><ol><li>客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.</li><li>服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.</li><li>服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.</li><li>客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.</li></ol><p>图解: <a href="http://blog.csdn.net/whuslei/article/details/6667471" target="_blank" rel="noopener">http://blog.csdn.net/whuslei/article/details/6667471</a></p><h2 id="3-ARP协议"><a href="/2017/11/13/pymianshidaan/#3-ARP协议" class="headerlink" title="3 ARP协议"></a>3 ARP协议</h2><p>地址解析协议(Address Resolution Protocol)，其基本功能为透过目标设备的IP地址，查询目标的MAC地址，以保证通信的顺利进行。它是IPv4网络层必不可少的协议，不过在IPv6中已不再适用，并被邻居发现协议（NDP）所替代。</p><h2 id="4-urllib和urllib2的区别"><a href="/2017/11/13/pymianshidaan/#4-urllib和urllib2的区别" class="headerlink" title="4 urllib和urllib2的区别"></a>4 urllib和urllib2的区别</h2><p>这个面试官确实问过,当时答的urllib2可以Post而urllib不可以.</p><ol><li>urllib提供urlencode方法用来GET查询字符串的产生，而urllib2没有。这是为何urllib常和urllib2一起使用的原因。</li><li>urllib2可以接受一个Request类的实例来设置URL请求的headers，urllib仅可以接受URL。这意味着，你不可以伪装你的User Agent字符串等。</li></ol><h2 id="5-Post和Get"><a href="/2017/11/13/pymianshidaan/#5-Post和Get" class="headerlink" title="5 Post和Get"></a>5 Post和Get</h2><p><a href="http://www.cnblogs.com/nankezhishi/archive/2012/06/09/getandpost.html" target="_blank" rel="noopener">GET和POST有什么区别？及为什么网上的多数答案都是错的</a><br><a href="https://www.zhihu.com/question/31640769?rf=37401322" target="_blank" rel="noopener">知乎回答</a></p><p>get: <a href="http://tools.ietf.org/html/rfc2616#section-9.3" target="_blank" rel="noopener">RFC 2616 - Hypertext Transfer Protocol – HTTP/1.1</a><br>post: <a href="http://tools.ietf.org/html/rfc2616#section-9.5" target="_blank" rel="noopener">RFC 2616 - Hypertext Transfer Protocol – HTTP/1.1</a></p><h2 id="6-Cookie和Session"><a href="/2017/11/13/pymianshidaan/#6-Cookie和Session" class="headerlink" title="6 Cookie和Session"></a>6 Cookie和Session</h2><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">Cookie</th><th style="text-align:left">Session</th></tr></thead><tbody><tr><td style="text-align:left">储存位置</td><td style="text-align:left">客户端</td><td style="text-align:left">服务器端</td></tr><tr><td style="text-align:left">目的</td><td style="text-align:left">跟踪会话，也可以保存用户偏好设置或者保存用户名密码等</td><td style="text-align:left">跟踪会话</td></tr><tr><td style="text-align:left">安全性</td><td style="text-align:left">不安全</td><td style="text-align:left">安全</td></tr></tbody></table><p>session技术是要使用到cookie的，之所以出现session技术，主要是为了安全。</p><h2 id="7-apache和nginx的区别"><a href="/2017/11/13/pymianshidaan/#7-apache和nginx的区别" class="headerlink" title="7 apache和nginx的区别"></a>7 apache和nginx的区别</h2><p>nginx 相对 apache 的优点：</p><ul><li>轻量级，同样起web 服务，比apache 占用更少的内存及资源</li><li>抗并发，nginx 处理请求是异步非阻塞的，支持更多的并发连接，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能</li><li>配置简洁</li><li>高度模块化的设计，编写模块相对简单</li><li>社区活跃</li></ul><p>apache 相对nginx 的优点：</p><ul><li>rewrite ，比nginx 的rewrite 强大</li><li>模块超多，基本想到的都可以找到</li><li>少bug ，nginx 的bug 相对较多</li><li>超稳定</li></ul><h2 id="8-网站用户密码保存"><a href="/2017/11/13/pymianshidaan/#8-网站用户密码保存" class="headerlink" title="8 网站用户密码保存"></a>8 网站用户密码保存</h2><ol><li>明文保存</li><li>明文hash后保存,如md5</li><li>MD5+Salt方式,这个salt可以随机</li><li>知乎使用了Bcrypy(好像)加密</li></ol><h2 id="9-HTTP和HTTPS"><a href="/2017/11/13/pymianshidaan/#9-HTTP和HTTPS" class="headerlink" title="9 HTTP和HTTPS"></a>9 HTTP和HTTPS</h2><table><thead><tr><th style="text-align:left">状态码</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:left">1xx 报告</td><td style="text-align:left">接收到请求，继续进程</td></tr><tr><td style="text-align:left">2xx 成功</td><td style="text-align:left">步骤成功接收，被理解，并被接受</td></tr><tr><td style="text-align:left">3xx 重定向</td><td style="text-align:left">为了完成请求,必须采取进一步措施</td></tr><tr><td style="text-align:left">4xx 客户端出错</td><td style="text-align:left">请求包括错的顺序或不能完成</td></tr><tr><td style="text-align:left">5xx 服务器出错</td><td style="text-align:left">服务器无法完成显然有效的请求</td></tr></tbody></table><p>403: Forbidden<br>404: Not Found</p><p>HTTPS握手,对称加密,非对称加密,TLS/SSL,RSA</p><h2 id="10-XSRF和XSS"><a href="/2017/11/13/pymianshidaan/#10-XSRF和XSS" class="headerlink" title="10 XSRF和XSS"></a>10 XSRF和XSS</h2><ul><li>CSRF(Cross-site request forgery)跨站请求伪造</li><li>XSS(Cross Site Scripting)跨站脚本攻击</li></ul><p>CSRF重点在请求,XSS重点在脚本</p><h2 id="11-幂等-Idempotence"><a href="/2017/11/13/pymianshidaan/#11-幂等-Idempotence" class="headerlink" title="11 幂等 Idempotence"></a>11 幂等 Idempotence</h2><p>HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的<strong>副作用</strong>。(注意是副作用)</p><p><code>GET http://www.bank.com/account/123456</code>，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。<code>GET http://www.news.com/latest-news</code>这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。</p><p>DELETE方法用于删除资源，有副作用，但它应该满足幂等性。比如：<code>DELETE http://www.forum.com/article/4231</code>，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。</p><p>POST所对应的URI并非创建的资源本身，而是资源的接收者。比如：<code>POST http://www.forum.com/articles</code>的语义是在<code>http://www.forum.com/articles</code>下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。</p><p>PUT所对应的URI是要创建或更新的资源本身。比如：<code>PUT http://www.forum/articles/4231</code>的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。</p><h2 id="12-RESTful架构-SOAP-RPC"><a href="/2017/11/13/pymianshidaan/#12-RESTful架构-SOAP-RPC" class="headerlink" title="12 RESTful架构(SOAP,RPC)"></a>12 RESTful架构(SOAP,RPC)</h2><p>推荐: <a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></p><h2 id="13-SOAP"><a href="/2017/11/13/pymianshidaan/#13-SOAP" class="headerlink" title="13 SOAP"></a>13 SOAP</h2><p>SOAP（原为Simple Object Access Protocol的首字母缩写，即简单对象访问协议）是交换数据的一种协议规范，使用在计算机网络Web服务（web service）中，交换带结构信息。SOAP为了简化网页服务器（Web Server）从XML数据库中提取数据时，节省去格式化页面时间，以及不同应用程序之间按照HTTP通信协议，遵从XML格式执行资料互换，使其抽象于语言实现、平台和硬件。</p><h2 id="14-RPC"><a href="/2017/11/13/pymianshidaan/#14-RPC" class="headerlink" title="14 RPC"></a>14 RPC</h2><p>RPC（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。</p><p>总结:服务提供的两大流派.传统意义以方法调用为导向通称RPC。为了企业SOA,若干厂商联合推出webservice,制定了wsdl接口定义,传输soap.当互联网时代,臃肿SOA被简化为http+xml/json.但是简化出现各种混乱。以资源为导向,任何操作无非是对资源的增删改查，于是统一的REST出现了.</p><p>进化的顺序: RPC -&gt; SOAP -&gt; RESTful</p><h2 id="15-CGI和WSGI"><a href="/2017/11/13/pymianshidaan/#15-CGI和WSGI" class="headerlink" title="15 CGI和WSGI"></a>15 CGI和WSGI</h2><p>CGI是通用网关接口，是连接web服务器和应用程序的接口，用户通过CGI来获取动态数据或文件等。<br>CGI程序是一个独立的程序，它可以用几乎所有语言来写，包括perl，c，lua，python等等。</p><p>WSGI, Web Server Gateway Interface，是Python应用程序或框架和Web服务器之间的一种接口，WSGI的其中一个目的就是让用户可以用统一的语言(Python)编写前后端。</p><p>官方说明：<a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="noopener">PEP-3333</a></p><h2 id="16-中间人攻击"><a href="/2017/11/13/pymianshidaan/#16-中间人攻击" class="headerlink" title="16 中间人攻击"></a>16 中间人攻击</h2><p>在GFW里屡见不鲜的,呵呵.</p><p>中间人攻击（Man-in-the-middle attack，通常缩写为MITM）是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。</p><h2 id="17-c10k问题"><a href="/2017/11/13/pymianshidaan/#17-c10k问题" class="headerlink" title="17 c10k问题"></a>17 c10k问题</h2><p>所谓c10k问题，指的是服务器同时支持成千上万个客户端的问题，也就是concurrent 10 000 connection（这也是c10k这个名字的由来）。<br>推荐: <a href="https://my.oschina.net/xianggao/blog/664275" target="_blank" rel="noopener">https://my.oschina.net/xianggao/blog/664275</a></p><h2 id="18-socket"><a href="/2017/11/13/pymianshidaan/#18-socket" class="headerlink" title="18 socket"></a>18 socket</h2><p>推荐: <a href="http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml</a></p><p>Socket=Ip address+ TCP/UDP + port</p><h2 id="19-浏览器缓存"><a href="/2017/11/13/pymianshidaan/#19-浏览器缓存" class="headerlink" title="19 浏览器缓存"></a>19 浏览器缓存</h2><p>推荐: <a href="http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html" target="_blank" rel="noopener">http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html</a></p><p>304 Not Modified</p><h2 id="20-HTTP1-0和HTTP1-1"><a href="/2017/11/13/pymianshidaan/#20-HTTP1-0和HTTP1-1" class="headerlink" title="20 HTTP1.0和HTTP1.1"></a>20 HTTP1.0和HTTP1.1</h2><p>推荐: <a href="http://blog.csdn.net/elifefly/article/details/3964766" target="_blank" rel="noopener">http://blog.csdn.net/elifefly/article/details/3964766</a></p><ol><li>请求头Host字段,一个服务器多个网站</li><li>长链接</li><li>文件断点续传</li><li>身份认证,状态管理,Cache缓存</li></ol><p>HTTP请求8种方法介绍<br>HTTP/1.1协议中共定义了8种HTTP请求方法，HTTP请求方法也被叫做“请求动作”，不同的方法规定了不同的操作指定的资源方式。服务端也会根据不同的请求方法做不同的响应。</p><p>GET</p><p>GET请求会显示请求指定的资源。一般来说GET方法应该只用于数据的读取，而不应当用于会产生副作用的非幂等的操作中。</p><p>GET会方法请求指定的页面信息，并返回响应主体，GET被认为是不安全的方法，因为GET方法会被网络蜘蛛等任意的访问。</p><p>HEAD</p><p>HEAD方法与GET方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应HEAD请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD方法常被用于客户端查看服务器的性能。</p><p>POST</p><p>POST请求会 向指定资源提交数据，请求服务器进行处理，如：表单数据提交、文件上传等，请求数据会被包含在请求体中。POST方法是非幂等的方法，因为这个请求可能会创建新的资源或/和修改现有资源。</p><p>PUT</p><p>PUT请求会身向指定资源位置上传其最新内容，PUT方法是幂等的方法。通过该方法客户端可以将指定资源的最新数据传送给服务器取代指定的资源的内容。</p><p>DELETE</p><p>DELETE请求用于请求服务器删除所请求URI（统一资源标识符，Uniform Resource Identifier）所标识的资源。DELETE请求后指定资源会被删除，DELETE方法也是幂等的。</p><p>CONNECT</p><p>CONNECT方法是HTTP/1.1协议预留的，能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接与非加密的HTTP代理服务器的通信。</p><p>OPTIONS</p><p>OPTIONS请求与HEAD类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用’*’来代替资源名称，向服务器发送OPTIONS请求，可以测试服务器功能是否正常。JavaScript的XMLHttpRequest对象进行CORS跨域资源共享时，就是使用OPTIONS方法发送嗅探请求，以判断是否有对指定资源的访问权限。 允许</p><p>TRACE</p><p>TRACE请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。</p><p>HTTP/1.1之后增加的方法</p><p>在HTTP/1.1标准制定之后，又陆续扩展了一些方法。其中使用中较多的是 PATCH 方法：</p><p>PATCH</p><p>PATCH方法出现的较晚，它在2010年的RFC 5789标准中被定义。PATCH请求与PUT请求类似，同样用于资源的更新。二者有以下两点不同：</p><p>但PATCH一般用于资源的部分更新，而PUT一般用于资源的整体更新。<br>当资源不存在时，PATCH会创建一个新的资源，而PUT只会对已在资源进行更新。</p><h2 id="21-Ajax"><a href="/2017/11/13/pymianshidaan/#21-Ajax" class="headerlink" title="21 Ajax"></a>21 Ajax</h2><p>AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术。</p><h1 id="NIX"><a href="/2017/11/13/pymianshidaan/#NIX" class="headerlink" title="*NIX"></a>*NIX</h1><h2 id="unix进程间通信方式-IPC"><a href="/2017/11/13/pymianshidaan/#unix进程间通信方式-IPC" class="headerlink" title="unix进程间通信方式(IPC)"></a>unix进程间通信方式(IPC)</h2><ol><li>管道（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。</li><li>命名管道（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。</li><li>信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。</li><li>消息（Message）队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺</li><li>共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。</li><li>内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。</li><li>信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。</li><li>套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。</li></ol><h1 id="数据结构"><a href="/2017/11/13/pymianshidaan/#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="1-红黑树"><a href="/2017/11/13/pymianshidaan/#1-红黑树" class="headerlink" title="1 红黑树"></a>1 红黑树</h2><p>红黑树与AVL的比较：</p><p>AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多；</p><p>红黑是用非严格的平衡来换取增删节点时候旋转次数的降低；</p><p>所以简单说，如果你的应用中，搜索的次数远远大于插入和删除，那么选择AVL，如果搜索，插入删除次数几乎差不多，应该选择RB。</p><p>红黑树详解: <a href="https://xieguanglei.github.io/blog/post/red-black-tree.html" target="_blank" rel="noopener">https://xieguanglei.github.io/blog/post/red-black-tree.html</a></p><p>教你透彻了解红黑树: <a href="https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md" target="_blank" rel="noopener">https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md</a></p><h1 id="编程题"><a href="/2017/11/13/pymianshidaan/#编程题" class="headerlink" title="编程题"></a>编程题</h1><h2 id="1-台阶问题-斐波那契"><a href="/2017/11/13/pymianshidaan/#1-台阶问题-斐波那契" class="headerlink" title="1 台阶问题/斐波那契"></a>1 台阶问题/斐波那契</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fib = <span class="keyword">lambda</span> n: n <span class="keyword">if</span> n &lt;= <span class="number">2</span> <span class="keyword">else</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>第二种记忆方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">memo</span><span class="params">(func)</span>:</span></span><br><span class="line">    cache = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">not</span> <span class="keyword">in</span> cache:</span><br><span class="line">            cache[args] = func(*args)</span><br><span class="line">        <span class="keyword">return</span> cache[args]</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@memo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(i<span class="number">-1</span>) + fib(i<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><p>第三种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(n):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h2 id="2-变态台阶问题"><a href="/2017/11/13/pymianshidaan/#2-变态台阶问题" class="headerlink" title="2 变态台阶问题"></a>2 变态台阶问题</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fib = <span class="keyword">lambda</span> n: n <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">2</span> * fib(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="3-矩形覆盖"><a href="/2017/11/13/pymianshidaan/#3-矩形覆盖" class="headerlink" title="3 矩形覆盖"></a>3 矩形覆盖</h2><p>我们可以用<code>2*1</code>的小矩形横着或者竖着去覆盖更大的矩形。请问用n个<code>2*1</code>的小矩形无重叠地覆盖一个<code>2*n</code>的大矩形，总共有多少种方法？</p><blockquote><p>第<code>2*n</code>个矩形的覆盖方法等于第<code>2*(n-1)</code>加上第<code>2*(n-2)</code>的方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> n: <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="4-杨氏矩阵查找"><a href="/2017/11/13/pymianshidaan/#4-杨氏矩阵查找" class="headerlink" title="4 杨氏矩阵查找"></a>4 杨氏矩阵查找</h2><p>在一个m行n列二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>使用Step-wise线性搜索。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">(l, r, c)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> l[r][c]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(l, x)</span>:</span></span><br><span class="line">    m = len(l) - <span class="number">1</span></span><br><span class="line">    n = len(l[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    c = n</span><br><span class="line">    <span class="keyword">while</span> c &gt;= <span class="number">0</span> <span class="keyword">and</span> r &lt;= m:</span><br><span class="line">        value = get_value(l, r, c)</span><br><span class="line">        <span class="keyword">if</span> value == x:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">elif</span> value &gt; x:</span><br><span class="line">            c = c - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> value &lt; x:</span><br><span class="line">            r = r + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h2 id="5-去除列表中的重复元素"><a href="/2017/11/13/pymianshidaan/#5-去除列表中的重复元素" class="headerlink" title="5 去除列表中的重复元素"></a>5 去除列表中的重复元素</h2><p>用集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list(set(l))</span><br></pre></td></tr></table></figure><p>用字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'a'</span>]</span><br><span class="line">l2 = &#123;&#125;.fromkeys(l1).keys()</span><br><span class="line"><span class="keyword">print</span> l2</span><br></pre></td></tr></table></figure><p>用字典并保持顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'a'</span>]</span><br><span class="line">l2 = list(set(l1))</span><br><span class="line">l2.sort(key=l1.index)</span><br><span class="line"><span class="keyword">print</span> l2</span><br></pre></td></tr></table></figure><p>列表推导式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'a'</span>]</span><br><span class="line">l2 = []</span><br><span class="line">[l2.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> l1 <span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">in</span> l2]</span><br></pre></td></tr></table></figure><p>sorted排序并且用列表推导式.</p><p>l = [‘b’,’c’,’d’,’b’,’c’,’a’,’a’]<br>[single.append(i) for i in sorted(l) if i not in single]<br>print single</p><h2 id="6-链表成对调换"><a href="/2017/11/13/pymianshidaan/#6-链表成对调换" class="headerlink" title="6 链表成对调换"></a>6 链表成对调换</h2><p><code>1-&gt;2-&gt;3-&gt;4</code>转换成<code>2-&gt;1-&gt;4-&gt;3</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param a ListNode</span></span><br><span class="line">    <span class="comment"># @return a ListNode</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> head != <span class="keyword">None</span> <span class="keyword">and</span> head.next != <span class="keyword">None</span>:</span><br><span class="line">            next = head.next</span><br><span class="line">            head.next = self.swapPairs(next.next)</span><br><span class="line">            next.next = head</span><br><span class="line">            <span class="keyword">return</span> next</span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h2 id="7-创建字典的方法"><a href="/2017/11/13/pymianshidaan/#7-创建字典的方法" class="headerlink" title="7 创建字典的方法"></a>7 创建字典的方法</h2><h3 id="1-直接创建"><a href="/2017/11/13/pymianshidaan/#1-直接创建" class="headerlink" title="1 直接创建"></a>1 直接创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'earth'</span>, <span class="string">'port'</span>:<span class="string">'80'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2-工厂方法"><a href="/2017/11/13/pymianshidaan/#2-工厂方法" class="headerlink" title="2 工厂方法"></a>2 工厂方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">items=[(<span class="string">'name'</span>,<span class="string">'earth'</span>),(<span class="string">'port'</span>,<span class="string">'80'</span>)]</span><br><span class="line">dict2=dict(items)</span><br><span class="line">dict1=dict(([<span class="string">'name'</span>,<span class="string">'earth'</span>],[<span class="string">'port'</span>,<span class="string">'80'</span>]))</span><br></pre></td></tr></table></figure><h3 id="3-fromkeys-方法"><a href="/2017/11/13/pymianshidaan/#3-fromkeys-方法" class="headerlink" title="3 fromkeys()方法"></a>3 fromkeys()方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1=&#123;&#125;.fromkeys((<span class="string">'x'</span>,<span class="string">'y'</span>),<span class="number">-1</span>)</span><br><span class="line">dict=&#123;<span class="string">'x'</span>:<span class="number">-1</span>,<span class="string">'y'</span>:<span class="number">-1</span>&#125;</span><br><span class="line">dict2=&#123;&#125;.fromkeys((<span class="string">'x'</span>,<span class="string">'y'</span>))</span><br><span class="line">dict2=&#123;<span class="string">'x'</span>:<span class="keyword">None</span>, <span class="string">'y'</span>:<span class="keyword">None</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="8-合并两个有序列表"><a href="/2017/11/13/pymianshidaan/#8-合并两个有序列表" class="headerlink" title="8 合并两个有序列表"></a>8 合并两个有序列表</h2><p>知乎远程面试要求编程</p><blockquote><p> 尾递归</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_recursion_merge_sort2</span><span class="params">(l1, l2, tmp)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(l1) == <span class="number">0</span> <span class="keyword">or</span> len(l2) == <span class="number">0</span>:</span><br><span class="line">        tmp.extend(l1)</span><br><span class="line">        tmp.extend(l2)</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> l1[<span class="number">0</span>] &lt; l2[<span class="number">0</span>]:</span><br><span class="line">            tmp.append(l1[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">del</span> l1[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp.append(l2[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">del</span> l2[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> _recursion_merge_sort2(l1, l2, tmp)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursion_merge_sort2</span><span class="params">(l1, l2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> _recursion_merge_sort2(l1, l2, [])</span><br></pre></td></tr></table></figure><blockquote><p> 循环算法</p></blockquote><p>思路：</p><p>定义一个新的空列表</p><p>比较两个列表的首个元素</p><p>小的就插入到新列表里</p><p>把已经插入新列表的元素从旧列表删除</p><p>直到两个旧列表有一个为空</p><p>再把旧列表加到新列表后面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def loop_merge_sort(l1, l2):</span><br><span class="line">    tmp = []</span><br><span class="line">    while len(l1) &gt; 0 and len(l2) &gt; 0:</span><br><span class="line">        if l1[0] &lt; l2[0]:</span><br><span class="line">            tmp.append(l1[0])</span><br><span class="line">            del l1[0]</span><br><span class="line">        else:</span><br><span class="line">            tmp.append(l2[0])</span><br><span class="line">            del l2[0]</span><br><span class="line">    tmp.extend(l1)</span><br><span class="line">    tmp.extend(l2)</span><br><span class="line">    return tmp</span><br></pre></td></tr></table></figure><blockquote><p>pop弹出</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line">b = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sortedlist</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">while</span> a <span class="keyword">and</span> b:</span><br><span class="line">        <span class="keyword">if</span> a[<span class="number">0</span>] &gt;= b[<span class="number">0</span>]:</span><br><span class="line">            c.append(b.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c.append(a.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">        c.append(a.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        c.append(b.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="keyword">print</span> merge_sortedlist(a,b)</span><br></pre></td></tr></table></figure><h2 id="9-交叉链表求交点"><a href="/2017/11/13/pymianshidaan/#9-交叉链表求交点" class="headerlink" title="9 交叉链表求交点"></a>9 交叉链表求交点</h2><blockquote><p>其实思想可以按照从尾开始比较两个链表，如果相交，则从尾开始必然一致，只要从尾开始比较，直至不一致的地方即为交叉点，如图所示</p></blockquote><p><img src="http://hi.csdn.net/attachment/201106/28/0_1309244136MWLP.gif" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用a,b两个list来模拟链表，可以看出交叉点是 7这个节点</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,min(len(a),len(b))):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">1</span> <span class="keyword">and</span> (a[<span class="number">-1</span>] != b[<span class="number">-1</span>]):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"No"</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> a[-i] != b[-i]:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"交叉节点："</span>,a[-i+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>另外一种比较正规的方法，构造链表类</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">node</span><span class="params">(l1, l2)</span>:</span></span><br><span class="line">    length1, lenth2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="comment"># 求两个链表长度</span></span><br><span class="line">    <span class="keyword">while</span> l1.next:</span><br><span class="line">        l1 = l1.next</span><br><span class="line">        length1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l2.next:</span><br><span class="line">        l2 = l2.next</span><br><span class="line">        length2 += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 长的链表先走</span></span><br><span class="line">    <span class="keyword">if</span> length1 &gt; lenth2:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(length1 - length2):</span><br><span class="line">            l1 = l1.next</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(length2 - length1):</span><br><span class="line">            l2 = l2.next</span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">        <span class="keyword">if</span> l1.next == l2.next:</span><br><span class="line">            <span class="keyword">return</span> l1.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l1 = l1.next</span><br><span class="line">            l2 = l2.next</span><br></pre></td></tr></table></figure><p>修改了一下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">node</span><span class="params">(l1, l2)</span>:</span></span><br><span class="line">    length1, length2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="comment"># 求两个链表长度</span></span><br><span class="line">    <span class="keyword">while</span> l1.next:</span><br><span class="line">        l1 = l1.next<span class="comment">#尾节点</span></span><br><span class="line">        length1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l2.next:</span><br><span class="line">        l2 = l2.next<span class="comment">#尾节点</span></span><br><span class="line">        length2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果相交</span></span><br><span class="line">    <span class="keyword">if</span> l1.next == l2.next:</span><br><span class="line">        <span class="comment"># 长的链表先走</span></span><br><span class="line">        <span class="keyword">if</span> length1 &gt; length2:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(length1 - length2):</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">return</span> l1<span class="comment">#返回交点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(length2 - length1):</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            <span class="keyword">return</span> l2<span class="comment">#返回交点</span></span><br><span class="line">    <span class="comment"># 如果不相交</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>思路: <a href="http://humaoli.blog.163.com/blog/static/13346651820141125102125995/" target="_blank" rel="noopener">http://humaoli.blog.163.com/blog/static/13346651820141125102125995/</a></p><h2 id="10-二分查找"><a href="/2017/11/13/pymianshidaan/#10-二分查找" class="headerlink" title="10 二分查找"></a>10 二分查找</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list,item)</span>:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(list)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> low&lt;=high:</span><br><span class="line">        mid = (low+high)/<span class="number">2</span></span><br><span class="line">        guess = list[mid]</span><br><span class="line">        <span class="keyword">if</span> guess&gt;item:</span><br><span class="line">            high = mid<span class="number">-1</span></span><br><span class="line">        <span class="keyword">elif</span> guess&lt;item:</span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">mylist = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">print</span> binary_search(mylist,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>参考: <a href="http://blog.csdn.net/u013205877/article/details/76411718" target="_blank" rel="noopener">http://blog.csdn.net/u013205877/article/details/76411718</a></p><h2 id="11-快排"><a href="/2017/11/13/pymianshidaan/#11-快排" class="headerlink" title="11 快排"></a>11 快排</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(list)&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> list</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        midpivot = list[<span class="number">0</span>]</span><br><span class="line">        lessbeforemidpivot = [i <span class="keyword">for</span> i <span class="keyword">in</span> list[<span class="number">1</span>:] <span class="keyword">if</span> i&lt;=midpivot]</span><br><span class="line">        biggerafterpivot = [i <span class="keyword">for</span> i <span class="keyword">in</span> list[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; midpivot]</span><br><span class="line">        finallylist = quicksort(lessbeforemidpivot)+[midpivot]+quicksort(biggerafterpivot)</span><br><span class="line">        <span class="keyword">return</span> finallylist</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> quicksort([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure><blockquote><p> 更多排序问题可见：<a href="http://blog.csdn.net/mrlevo520/article/details/77829204" target="_blank" rel="noopener">数据结构与算法-排序篇-Python描述</a></p></blockquote><h2 id="12-找零问题"><a href="/2017/11/13/pymianshidaan/#12-找零问题" class="headerlink" title="12 找零问题"></a>12 找零问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#values是硬币的面值values = [ 25, 21, 10, 5, 1]</span></span><br><span class="line"><span class="comment">#valuesCounts   钱币对应的种类数</span></span><br><span class="line"><span class="comment">#money  找出来的总钱数</span></span><br><span class="line"><span class="comment">#coinsUsed   对应于目前钱币总数i所使用的硬币数目</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(values,valuesCounts,money,coinsUsed)</span>:</span></span><br><span class="line">    <span class="comment">#遍历出从1到money所有的钱数可能</span></span><br><span class="line">    <span class="keyword">for</span> cents <span class="keyword">in</span> range(<span class="number">1</span>,money+<span class="number">1</span>):</span><br><span class="line">        minCoins = cents</span><br><span class="line">        <span class="comment">#把所有的硬币面值遍历出来和钱数做对比</span></span><br><span class="line">        <span class="keyword">for</span> kind <span class="keyword">in</span> range(<span class="number">0</span>,valuesCounts):</span><br><span class="line">            <span class="keyword">if</span> (values[kind] &lt;= cents):</span><br><span class="line">                temp = coinsUsed[cents - values[kind]] +<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> (temp &lt; minCoins):</span><br><span class="line">                    minCoins = temp</span><br><span class="line">        coinsUsed[cents] = minCoins</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'面值:&#123;0&#125;的最少硬币使用数为:&#123;1&#125;'</span>.format(cents, coinsUsed[cents]))</span><br></pre></td></tr></table></figure><p>思路: <a href="http://blog.csdn.net/wdxin1322/article/details/9501163" target="_blank" rel="noopener">http://blog.csdn.net/wdxin1322/article/details/9501163</a></p><p>方法: <a href="http://www.cnblogs.com/ChenxofHit/archive/2011/03/18/1988431.html" target="_blank" rel="noopener">http://www.cnblogs.com/ChenxofHit/archive/2011/03/18/1988431.html</a></p><h2 id="13-广度遍历和深度遍历二叉树"><a href="/2017/11/13/pymianshidaan/#13-广度遍历和深度遍历二叉树" class="headerlink" title="13 广度遍历和深度遍历二叉树"></a>13 广度遍历和深度遍历二叉树</h2><p>给定一个数组，构建二叉树，并且按层次打印这个二叉树</p><h2 id="14-二叉树节点"><a href="/2017/11/13/pymianshidaan/#14-二叉树节点" class="headerlink" title="14 二叉树节点"></a>14 二叉树节点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, left=None, right=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line">tree = Node(<span class="number">1</span>, Node(<span class="number">3</span>, Node(<span class="number">7</span>, Node(<span class="number">0</span>)), Node(<span class="number">6</span>)), Node(<span class="number">2</span>, Node(<span class="number">5</span>), Node(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><h2 id="15-层次遍历"><a href="/2017/11/13/pymianshidaan/#15-层次遍历" class="headerlink" title="15 层次遍历"></a>15 层次遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lookup</span><span class="params">(root)</span>:</span></span><br><span class="line">    row = [root]</span><br><span class="line">    <span class="keyword">while</span> row:</span><br><span class="line">        print(row)</span><br><span class="line">        row = [kid <span class="keyword">for</span> item <span class="keyword">in</span> row <span class="keyword">for</span> kid <span class="keyword">in</span> (item.left, item.right) <span class="keyword">if</span> kid]</span><br></pre></td></tr></table></figure><h2 id="16-深度遍历"><a href="/2017/11/13/pymianshidaan/#16-深度遍历" class="headerlink" title="16 深度遍历"></a>16 深度遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deep</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">print</span> root.data</span><br><span class="line">    deep(root.left)</span><br><span class="line">    deep(root.right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lookup(tree)</span><br><span class="line">    deep(tree)</span><br></pre></td></tr></table></figure><h2 id="17-前中后序遍历"><a href="/2017/11/13/pymianshidaan/#17-前中后序遍历" class="headerlink" title="17 前中后序遍历"></a>17 前中后序遍历</h2><p>深度遍历改变顺序就OK了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#二叉树的遍历</span></span><br><span class="line"><span class="comment">#简单的二叉树节点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,value,left,right)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"><span class="comment">#中序遍历:遍历左子树,访问当前节点,遍历右子树</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mid_travelsal</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        mid_travelsal(root.left)</span><br><span class="line">    <span class="comment">#访问当前节点</span></span><br><span class="line">    print(root.value)</span><br><span class="line">    <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        mid_travelsal(root.right)</span><br><span class="line"></span><br><span class="line"><span class="comment">#前序遍历:访问当前节点,遍历左子树,遍历右子树</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_travelsal</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (root.value)</span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        pre_travelsal(root.left)</span><br><span class="line">    <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        pre_travelsal(root.right)</span><br><span class="line"></span><br><span class="line"><span class="comment">#后续遍历:遍历左子树,遍历右子树,访问当前节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_trvelsal</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        post_trvelsal(root.left)</span><br><span class="line">    <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        post_trvelsal(root.right)</span><br><span class="line">    <span class="keyword">print</span> (root.value)</span><br></pre></td></tr></table></figure><h2 id="18-求最大树深"><a href="/2017/11/13/pymianshidaan/#18-求最大树深" class="headerlink" title="18 求最大树深"></a>18 求最大树深</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="19-求两棵树是否相同"><a href="/2017/11/13/pymianshidaan/#19-求两棵树是否相同" class="headerlink" title="19 求两棵树是否相同"></a>19 求两棵树是否相同</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(p, q)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> p == <span class="keyword">None</span> <span class="keyword">and</span> q == <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">elif</span> p <span class="keyword">and</span> q :</span><br><span class="line">        <span class="keyword">return</span> p.val == q.val <span class="keyword">and</span> isSameTree(p.left,q.left) <span class="keyword">and</span> isSameTree(p.right,q.right)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h2 id="20-前序中序求后序"><a href="/2017/11/13/pymianshidaan/#20-前序中序求后序" class="headerlink" title="20 前序中序求后序"></a>20 前序中序求后序</h2><p>推荐: <a href="http://blog.csdn.net/hinyunsin/article/details/6315502" target="_blank" rel="noopener">http://blog.csdn.net/hinyunsin/article/details/6315502</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rebuild</span><span class="params">(pre, center)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    cur = Node(pre[<span class="number">0</span>])</span><br><span class="line">    index = center.index(pre[<span class="number">0</span>])</span><br><span class="line">    cur.left = rebuild(pre[<span class="number">1</span>:index + <span class="number">1</span>], center[:index])</span><br><span class="line">    cur.right = rebuild(pre[index + <span class="number">1</span>:], center[index + <span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deep</span><span class="params">(root)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    deep(root.left)</span><br><span class="line">    deep(root.right)</span><br><span class="line">    <span class="keyword">print</span> root.data</span><br></pre></td></tr></table></figure><h2 id="21-单链表逆置"><a href="/2017/11/13/pymianshidaan/#21-单链表逆置" class="headerlink" title="21 单链表逆置"></a>21 单链表逆置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data=None, next=None)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.next = next</span><br><span class="line"></span><br><span class="line">link = Node(<span class="number">1</span>, Node(<span class="number">2</span>, Node(<span class="number">3</span>, Node(<span class="number">4</span>, Node(<span class="number">5</span>, Node(<span class="number">6</span>, Node(<span class="number">7</span>, Node(<span class="number">8</span>, Node(<span class="number">9</span>)))))))))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rev</span><span class="params">(link)</span>:</span></span><br><span class="line">    pre = link</span><br><span class="line">    cur = link.next</span><br><span class="line">    pre.next = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        tmp = cur.next</span><br><span class="line">        cur.next = pre</span><br><span class="line">        pre = cur</span><br><span class="line">        cur = tmp</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line"></span><br><span class="line">root = rev(link)</span><br><span class="line"><span class="keyword">while</span> root:</span><br><span class="line">    <span class="keyword">print</span> root.data</span><br><span class="line">    root = root.next</span><br></pre></td></tr></table></figure><p>思路: <a href="http://blog.csdn.net/feliciafay/article/details/6841115" target="_blank" rel="noopener">http://blog.csdn.net/feliciafay/article/details/6841115</a></p><p>方法: <a href="http://www.xuebuyuan.com/2066385.html?mobile=1" target="_blank" rel="noopener">http://www.xuebuyuan.com/2066385.html?mobile=1</a></p><h2 id="22-两个字符串是否是变位词"><a href="/2017/11/13/pymianshidaan/#22-两个字符串是否是变位词" class="headerlink" title="22 两个字符串是否是变位词"></a>22 两个字符串是否是变位词</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Anagram</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    @:param s1: The first string</span></span><br><span class="line"><span class="string">    @:param s2: The second string</span></span><br><span class="line"><span class="string">    @:return true or false</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Solution1</span><span class="params">(s1,s2)</span>:</span></span><br><span class="line">        alist = list(s2)</span><br><span class="line"></span><br><span class="line">        pos1 = <span class="number">0</span></span><br><span class="line">        stillOK = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pos1 &lt; len(s1) <span class="keyword">and</span> stillOK:</span><br><span class="line">            pos2 = <span class="number">0</span></span><br><span class="line">            found = <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">while</span> pos2 &lt; len(alist) <span class="keyword">and</span> <span class="keyword">not</span> found:</span><br><span class="line">                <span class="keyword">if</span> s1[pos1] == alist[pos2]:</span><br><span class="line">                    found = <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pos2 = pos2 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> found:</span><br><span class="line">                alist[pos2] = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stillOK = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">            pos1 = pos1 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stillOK</span><br><span class="line"></span><br><span class="line">    print(Solution1(<span class="string">'abcd'</span>,<span class="string">'dcba'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Solution2</span><span class="params">(s1,s2)</span>:</span></span><br><span class="line">        alist1 = list(s1)</span><br><span class="line">        alist2 = list(s2)</span><br><span class="line"></span><br><span class="line">        alist1.sort()</span><br><span class="line">        alist2.sort()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pos = <span class="number">0</span></span><br><span class="line">        matches = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pos &lt; len(s1) <span class="keyword">and</span> matches:</span><br><span class="line">            <span class="keyword">if</span> alist1[pos] == alist2[pos]:</span><br><span class="line">                pos = pos + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                matches = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matches</span><br><span class="line"></span><br><span class="line">    print(Solution2(<span class="string">'abcde'</span>,<span class="string">'edcbg'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Solution3</span><span class="params">(s1,s2)</span>:</span></span><br><span class="line">        c1 = [<span class="number">0</span>]*<span class="number">26</span></span><br><span class="line">        c2 = [<span class="number">0</span>]*<span class="number">26</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s1)):</span><br><span class="line">            pos = ord(s1[i])-ord(<span class="string">'a'</span>)</span><br><span class="line">            c1[pos] = c1[pos] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s2)):</span><br><span class="line">            pos = ord(s2[i])-ord(<span class="string">'a'</span>)</span><br><span class="line">            c2[pos] = c2[pos] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        stillOK = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">while</span> j&lt;<span class="number">26</span> <span class="keyword">and</span> stillOK:</span><br><span class="line">            <span class="keyword">if</span> c1[j] == c2[j]:</span><br><span class="line">                j = j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stillOK = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stillOK</span><br><span class="line"></span><br><span class="line">    print(Solution3(<span class="string">'apple'</span>,<span class="string">'pleap'</span>))</span><br></pre></td></tr></table></figure><h2 id="23-动态规划问题"><a href="/2017/11/13/pymianshidaan/#23-动态规划问题" class="headerlink" title="23 动态规划问题"></a>23 动态规划问题</h2><blockquote><p> 可参考：<a href="http://blog.csdn.net/mrlevo520/article/details/75676160" target="_blank" rel="noopener">动态规划(DP)的整理-Python描述</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 面试题 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7 常用命令集合</title>
      <link href="/2017/09/22/CentOS7ml/"/>
      <url>/2017/09/22/CentOS7ml/</url>
      <content type="html"><![CDATA[<h1 id="文件与目录操作"><a href="/2017/09/22/CentOS7ml/#文件与目录操作" class="headerlink" title="文件与目录操作"></a>文件与目录操作</h1><p>命令 解析<br>cd /home 进入 ‘/home’ 目录<br>cd .. 返回上一级目录<br>cd ../.. 返回上两级目录<br>cd - 返回上次所在目录<br>cp file1 file2 将file1复制为file2<br>cp -a dir1 dir2 复制一个目录<br>cp -a /tmp/dir1 . 复制一个目录到当前工作目录（.代表当前目录）<br>ls 查看目录中的文件<br>ls -a 显示隐藏文件<br>ls -l 显示详细信息<br>ls -lrt 按时间显示文件（l表示详细列表，r表示反向排序，t表示按时间排序）<br>pwd 显示工作路径<br>mkdir dir1 创建 ‘dir1’ 目录<br>mkdir dir1 dir2 同时创建两个目录<br>mkdir -p /tmp/dir1/dir2 创建一个目录树<br>mv dir1 dir2 移动/重命名一个目录<br>rm -f file1 删除 ‘file1’<br>rm -rf dir1 删除 ‘dir1’ 目录及其子目录内容</p><h1 id="查看文件内容"><a href="/2017/09/22/CentOS7ml/#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h1><p>命令 解析<br>cat file1 从第一个字节开始正向查看文件的内容<br>head -2 file1 查看一个文件的前两行<br>more file1 查看一个长文件的内容<br>tac file1 从最后一行开始反向查看一个文件的内容<br>tail -3 file1 查看一个文件的最后三行<br>vi file 打开并浏览文件</p><h1 id="文本内容处理"><a href="/2017/09/22/CentOS7ml/#文本内容处理" class="headerlink" title="文本内容处理"></a>文本内容处理</h1><p>命令 解析<br>grep str /tmp/test 在文件 ‘/tmp/test’ 中查找 “str”<br>grep ^str /tmp/test 在文件 ‘/tmp/test’ 中查找以 “str” 开始的行<br>grep [0-9] /tmp/test 查找 ‘/tmp/test’ 文件中所有包含数字的行<br>grep str -r /tmp/* 在目录 ‘/tmp’ 及其子目录中查找 “str”<br>diff file1 file2 找出两个文件的不同处<br>sdiff file1 file2 以对比的方式显示两个文件的不同</p><h1 id="vi-file"><a href="/2017/09/22/CentOS7ml/#vi-file" class="headerlink" title="vi file"></a>vi file</h1><p>操作 解析<br>i 进入编辑文本模式<br>Esc 退出编辑文本模式<br>:w 保存当前修改<br>:q 不保存退出vi<br>:wq 保存当前修改并退出vi</p><h1 id="查询操作"><a href="/2017/09/22/CentOS7ml/#查询操作" class="headerlink" title="查询操作"></a>查询操作</h1><p>命令 解析<br>find / -name file1 从 ‘/’ 开始进入根文件系统查找文件和目录<br>find / -user user1 查找属于用户 ‘user1’ 的文件和目录<br>find /home/user1 -name <em>.bin 在目录 ‘/ home/user1’ 中查找以 ‘.bin’ 结尾的文件<br>find /usr/bin -type f -atime +100 查找在过去100天内未被使用过的执行文件<br>find /usr/bin -type f -mtime -10 查找在10天内被创建或者修改过的文件<br>locate </em>.ps 寻找以 ‘.ps’ 结尾的文件，先运行 ‘updatedb’ 命令<br>find -name ‘*.[ch]’ | xargs grep -E ‘expr’ 在当前目录及其子目录所有.c和.h文件中查找 ‘expr’<br>find -type f -print0 | xargs -r0 grep -F ‘expr’ 在当前目录及其子目录的常规文件中查找 ‘expr’<br>find -maxdepth 1 -type f | xargs grep -F ‘expr’ 在当前目录中查找 ‘expr’</p><h1 id="压缩、解压"><a href="/2017/09/22/CentOS7ml/#压缩、解压" class="headerlink" title="压缩、解压"></a>压缩、解压</h1><p>命令 解析<br>bzip2 file1 压缩 file1<br>bunzip2 file1.bz2 解压 file1.bz2<br>gzip file1 压缩 file1<br>gzip -9 file1 最大程度压缩 file1<br>gunzip file1.gz 解压 file1.gz<br>tar -cvf archive.tar file1 把file1打包成 archive.tar（-c: 建立压缩档案；-v: 显示所有过程；-f: 使用档案名字，是必须的，是最后一个参数）<br>tar -cvf archive.tar file1 dir1 把 file1，dir1 打包成 archive.tar<br>tar -tf archive.tar 显示一个包中的内容<br>tar -xvf archive.tar 释放一个包<br>tar -xvf archive.tar -C /tmp 把压缩包释放到 /tmp目录下<br>zip file1.zip file1 创建一个zip格式的压缩包<br>zip -r file1.zip file1 dir1 把文件和目录压缩成一个zip格式的压缩包<br>unzip file1.zip 解压一个zip格式的压缩包到当前目录<br>unzip test.zip -d /tmp/ 解压一个zip格式的压缩包到 /tmp 目录</p><h1 id="yum安装器"><a href="/2017/09/22/CentOS7ml/#yum安装器" class="headerlink" title="yum安装器"></a>yum安装器</h1><p>命令 解析<br>yum -y install [package] 下载并安装一个rpm包<br>yum localinstall [package.rpm] 安装一个rpm包，使用你自己的软件仓库解决所有依赖关系<br>yum -y update 更新当前系统中安装的所有rpm包<br>yum update [package] 更新一个rpm包<br>yum remove [package] 删除一个rpm包<br>yum list 列出当前系统中安装的所有包<br>yum search [package] 在rpm仓库中搜寻软件包<br>yum clean [package] 清除缓存目录（/var/cache/yum）下的软件包<br>yum clean headers 删除所有头文件<br>yum clean all 删除所有缓存的包和头文件</p><h1 id="网络相关"><a href="/2017/09/22/CentOS7ml/#网络相关" class="headerlink" title="网络相关"></a>网络相关</h1><p>命令 解析<br>ifconfig eth0 显示一个以太网卡的配置<br>ifconfig eth0 192.168.1.1 netmask 255.255.255.0 配置网卡的IP地址<br>ifdown eth0 禁用 ‘eth0’ 网络设备<br>ifup eth0 启用 ‘eth0’ 网络设备<br>iwconfig eth1 显示一个无线网卡的配置<br>iwlist scan 显示无线网络<br>ip addr show 显示网卡的IP地址</p><h1 id="系统相关"><a href="/2017/09/22/CentOS7ml/#系统相关" class="headerlink" title="系统相关"></a>系统相关</h1><p>命令 解析<br>su - 切换到root权限（与su有区别）<br>shutdown -h now 关机<br>shutdown -r now 重启<br>top 罗列使用CPU资源最多的linux任务 （输入q退出）<br>pstree 以树状图显示程序<br>man ping 查看参考手册（例如ping 命令）<br>passwd 修改密码<br>df -h 显示磁盘的使用情况<br>cal -3 显示前一个月，当前月以及下一个月的月历<br>cal 10 1988 显示指定月，年的月历<br>date –date ‘1970-01-01 UTC 1427888888 seconds’ 把一相对于1970-01-01 00:00的秒数转换成时间<br>XSheel 5相关操作</p><h1 id="窗体快捷键"><a href="/2017/09/22/CentOS7ml/#窗体快捷键" class="headerlink" title="窗体快捷键"></a>窗体快捷键</h1><p>命令 解析<br>Ctrl + u 删除光标之前到行首的字符<br>Ctrl + k 删除光标之前到行尾的字符<br>Ctrl + c 取消当前行输入的命令，相当于Ctrl + Break<br>Ctrl + a 光标移动到行首（ahead of line），相当于通常的Home键<br>Ctrl + e 光标移动到行尾（end of line）<br>Ctrl + f 光标向前（forward）移动一个字符位置<br>Ctrl + b 光标往回（backward）移动一个字符位置<br>Ctrl + l 清屏，相当于执行clear命令<br>Ctrl + r 显示:号提示，根据用户输入查找相关历史命令（reverse-i-search）<br>Ctrl + w 删除从光标位置前到当前所处单词（word）的开头<br>Ctrl + t 交换光标位置前的两个字符<br>Ctrl + y 粘贴最后一次被删除的单词<br>Ctrl + Alt + d 显示桌面<br>Alt + b 光标往回（backward）移动到前一个单词<br>Alt + d 删除从光标位置到当前所处单词的末尾<br>Alt + F2 运行<br>Alt + F4 关闭当前窗口<br>Alt + F9 最小化当前窗口<br>Alt + F10 最大化当前窗口<br>Alt + Tab 切换窗口<br>Alt + 左键 移动窗口（或在最下面的任务栏滚动鼠标滑轮）</p><h1 id="操作小技巧"><a href="/2017/09/22/CentOS7ml/#操作小技巧" class="headerlink" title="操作小技巧"></a>操作小技巧</h1><p>鼠标中间键：粘贴突出显示的文本。(使用鼠标左键来选择文本。把光标指向想粘贴文本的地方。点击鼠标中间键来粘贴。)</p><p>Tab：命令行自动补全。使用 shell 提示时可使用这一方式。键入命令或文件名的前几个字符，然后按 [Tab] 键，它会自动补全命令或显示匹配键入字符的所有命令。</p><p>在滚动条的空白处点击鼠标中键：屏幕即滚动到那个地方。</p><p>在桌面或文件管理器中直接按 / 就可以输入位置，打开文件管理器。</p><p>在 vi 或 Firefox 中直接按 / 即可进入快速搜索状态。</p><p>网站链接和图片可直接拖放到桌面或者目录，可以马上下载。</p><p>直接将文件管理器中的文件拖到终端中就可以在终端中得到完整的路径名。</p><p>结束语</p><p>其实要学好Linux的操作并不是很困难的事情，在平常的使用过程中，碰到问题，学会去网上寻找答案不失为一个非常好的手段！谢谢大家！</p><p>转自：<a href="http://blog.csdn.net/o0darknessyy0o/article/details/52072054" target="_blank" rel="noopener">http://blog.csdn.net/o0darknessyy0o/article/details/52072054</a></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python学习资料</title>
      <link href="/2017/07/30/Pyziliao/"/>
      <url>/2017/07/30/Pyziliao/</url>
      <content type="html"><![CDATA[<h1 id="电子书下载："><a href="/2017/07/30/Pyziliao/#电子书下载：" class="headerlink" title="电子书下载："></a>电子书下载：</h1><p>简明Python教程2.7<br>简明Python教程3.5<br>笨办法学 Python （第三版）<br>python标准库中文版PDF(带章节书签)<br>深入理解Python中文版高清PDF<br>【Python 2.7教程】廖雪峰<br>django_book中文版 简明Python教程<br>Python编程指南<br>以上电子书著作版权归原作者所有！链接后期有空会重新补充</p><h1 id="编辑器下载："><a href="/2017/07/30/Pyziliao/#编辑器下载：" class="headerlink" title="编辑器下载："></a>编辑器下载：</h1><p>Python官网下载<br><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a><br>sublimetext官网下载<br><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">http://www.sublimetext.com/</a><br>Visual Studio Code官网下载 （中文官网）<br><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">https://code.visualstudio.com/Download</a><br>Vim官网下载<br><a href="https://www.vim.org/download.php" target="_blank" rel="noopener">https://www.vim.org/download.php</a><br>Atom官网下载<br><a href="https://atom.io/" target="_blank" rel="noopener">https://atom.io/</a><br>PyCharm官网下载<br><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/</a><br>Eclipse官网下载<br><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">https://www.eclipse.org/downloads/</a><br>Emacs官网下载<br><a href="http://www.gnu.org/software/emacs/" target="_blank" rel="noopener">http://www.gnu.org/software/emacs/</a></p><h1 id="Linux下载："><a href="/2017/07/30/Pyziliao/#Linux下载：" class="headerlink" title="Linux下载："></a>Linux下载：</h1><p>Redhat官网下载<br><a href="https://access.redhat.com/downloads" target="_blank" rel="noopener">https://access.redhat.com/downloads</a><br>CentOS官网下载<br><a href="https://www.centos.org/download/" target="_blank" rel="noopener">https://www.centos.org/download/</a><br>Ubuntu官网下载<br><a href="https://cn.ubuntu.com/download/" target="_blank" rel="noopener">https://cn.ubuntu.com/download/</a><br>Mint官网下载<br><a href="https://www.linuxmint.com/download.php" target="_blank" rel="noopener">https://www.linuxmint.com/download.php</a><br>Debian官网下载<br><a href="https://www.debian.org/distrib/" target="_blank" rel="noopener">https://www.debian.org/distrib/</a><br>Arch官网下载<br><a href="https://www.archlinux.org/download/" target="_blank" rel="noopener">https://www.archlinux.org/download/</a><br>Fedora官网下载<br><a href="https://getfedora.org/zh_CN/" target="_blank" rel="noopener">https://getfedora.org/zh_CN/</a><br>deepin官网下载<br><a href="https://www.deepin.org/download/" target="_blank" rel="noopener">https://www.deepin.org/download/</a></p><h1 id="数据库下载："><a href="/2017/07/30/Pyziliao/#数据库下载：" class="headerlink" title="数据库下载："></a>数据库下载：</h1><p>MYSQL官网下载<br><a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener">https://www.mysql.com/downloads/</a><br>MongoDB官网下载<br><a href="https://www.mongodb.com/" target="_blank" rel="noopener">https://www.mongodb.com/</a><br>Redis官网下载<br><a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p><p>内容有错误的或者有需要补充的，请在评论区留言</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
            <tag> IDE </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim常用命令总结</title>
      <link href="/2016/09/11/vimml/"/>
      <url>/2016/09/11/vimml/</url>
      <content type="html"><![CDATA[<p>在命令状态下对当前行用== （连按=两次）, 或对多行用n==（n是自然数）表示自动缩进从当前行起的下面n行。你可以试试把代码缩进任意打乱再用n==排版，相当于一般IDE里的code format。使用gg=G可对整篇代码进行排版。<br>vim 选择文本，删除，复制，粘贴<br>文本的选择，对于编辑器来说，是很基本的东西，也经常被用到，总结如下：<br>v 从光标当前位置开始，光标所经过的地方会被选中，再按一下v结束。<br>V 从光标当前行开始，光标经过的行都会被选中，再按一下Ｖ结束。<br>Ctrl + v 从光标当前位置开始，选中光标起点和终点所构成的矩形区域，再按一下Ｃtrl + v结束。<br>ggVG 选中全部的文本， 其中gg为跳到行首，V选中整行，G末尾<br>选中后就可以用编辑命令对其进行编辑，如<br>d 删除<br>y 复制 （默认是复制到”寄存器）<br>p 粘贴 （默认从”寄存器取出内容粘贴）<br>“+y 复制到系统剪贴板(也就是vim的+寄存器）<br>“+p 从系统剪贴板粘贴</p><p>=============================================================</p><h2 id="vim命令总结"><a href="/2016/09/11/vimml/#vim命令总结" class="headerlink" title="vim命令总结"></a>vim命令总结</h2><h3 id="1-删除字符"><a href="/2016/09/11/vimml/#1-删除字符" class="headerlink" title="1.删除字符"></a>1.删除字符</h3><p>要删除一个字符，只需要将光标移到该字符上按下”x”。</p><h3 id="2-删除一行"><a href="/2016/09/11/vimml/#2-删除一行" class="headerlink" title="2.删除一行"></a>2.删除一行</h3><p>删除一整行内容使用”dd”命令。删除后下面的行会移上来填补空缺。</p><h3 id="3-删除换行符"><a href="/2016/09/11/vimml/#3-删除换行符" class="headerlink" title="3.删除换行符"></a>3.删除换行符</h3><p>在Vim中你可以把两行合并为一行，也就是说两行之间的换行符被删除了：命令是”J”。</p><h3 id="4-撤销"><a href="/2016/09/11/vimml/#4-撤销" class="headerlink" title="4.撤销"></a>4.撤销</h3><p>如果你误删了过多的内容。显然你可以再输入一遍，但是命令”u” 更简便，它可以撤消上一次的操作。</p><h3 id="5-重做"><a href="/2016/09/11/vimml/#5-重做" class="headerlink" title="5.重做"></a>5.重做</h3><p>如果你撤消了多次，你还可以用CTRL-R(重做)来反转撤消的动作。换句话说，它是对撤消的撤消。撤消命令还有另一种形式，”U”命令，它一次撤消对一行的全部操作。第二次使用该命令则会撤消前一个”U”的操作。用”u”和CTRL-R你可以找回任何一个操作状态。</p><h3 id="6-追加"><a href="/2016/09/11/vimml/#6-追加" class="headerlink" title="6.追加"></a>6.追加</h3><p>“i”命令可以在当前光标之前插入文本。<br>“a”命令可以在当前光标之后插入文本。<br>“o”命令可以在当前行的下面另起一行，并使当前模式转为Insert模式。<br>“O”命令(注意是大写的字母O)将在当前行的上面另起一行。</p><h3 id="7-使用命令计数"><a href="/2016/09/11/vimml/#7-使用命令计数" class="headerlink" title="7.使用命令计数"></a>7.使用命令计数</h3><p>假设你要向上移动9行。这可以用”kkkkkkkkk”或”9k”来完成。事实上，很多命令都可以接受一个数字作为重复执行同一命令的次数。比如刚才的例子，要在行尾追加三个感叹号，当时用的命令是”a!!!”。另一个办法是用”3a!”命令。3说明该命令将被重复执行3次。同样，删除3个字符可以用”3x”。指定的数字要紧挨在它所要修饰的命令前面。</p><h3 id="8-退出"><a href="/2016/09/11/vimml/#8-退出" class="headerlink" title="8.退出"></a>8.退出</h3><p>要退出Vim，用命令”ZZ”。该命令保存当前文件并退出Vim。</p><h3 id="9-放弃编辑"><a href="/2016/09/11/vimml/#9-放弃编辑" class="headerlink" title="9.放弃编辑"></a>9.放弃编辑</h3><p>丢弃所有的修改并退出，用命令”:q!”。用”:e!”命令放弃所有修改并重新载入该文件的原始内容。</p><p>###10.以Word为单位的移动<br>使用”w”命令可以将光标向前移动一个word的首字符上；比如”3w”将光标向前移动3个words。”b”命令则将光标向后移动到前一个word的首字符上。<br>“e”命令会将光标移动到下一个word的最后一个字符。命令”ge”，它将光标移动到前一个word的最后一个字符上。、</p><h3 id="11-移动到行首或行尾"><a href="/2016/09/11/vimml/#11-移动到行首或行尾" class="headerlink" title="11.移动到行首或行尾"></a>11.移动到行首或行尾</h3><p>“$”命令将光标移动到当前行行尾。如果你的键盘上有一个键，它的作用也一样。”^”命令将光标移动到当前行的第一个非空白字符上。”0”命令则总是把光标移动到当前行的第一个字符上。键也是如此。”$”命令还可接受一个计数，如”1$”会将光标移动到当前行行尾，”2$”则会移动到下一行的行尾，如此类推。”0”命令却不能接受类似这样的计数，命令”^”前加上一个计数也没有任何效果。</p><h3 id="12-移动到指定字符上"><a href="/2016/09/11/vimml/#12-移动到指定字符上" class="headerlink" title="12.移动到指定字符上"></a>12.移动到指定字符上</h3><p>命令”fx”在当前行上查找下一个字符x（向右方向），可以带一个命令计数”F”命令向左方向搜索。”tx”命令形同”fx”命令，只不过它不是把光标停留在被搜索字符上，而是在它之前的一个字符上。提示：”t”意为”To”。该命令的反方向版是”Tx”。这4个命令都可以用”;”来重复。以”,”也是重复同样的命令，但是方向与原命令的方向相反。</p><h3 id="13-以匹配一个括号为目的移动"><a href="/2016/09/11/vimml/#13-以匹配一个括号为目的移动" class="headerlink" title="13.以匹配一个括号为目的移动"></a>13.以匹配一个括号为目的移动</h3><p>用命令”%”跳转到与当前光标下的括号相匹配的那一个括号上去。如果当前光标在”(“上，它就向前跳转到与它匹配的”)”上，如果当前在”)”上，它就向后自动跳转到匹配的”(“上去.</p><h3 id="14-移动到指定行"><a href="/2016/09/11/vimml/#14-移动到指定行" class="headerlink" title="14.移动到指定行"></a>14.移动到指定行</h3><p>用”G”命令指定一个命令计数，这个命令就会把光标定位到由命令计数指定的行上。比如”33G”就会把光标置于第33行上。没有指定命令计数作为参数的话, “G”会把光标定位到最后一行上。”gg”命令是跳转到第一行的快捷的方法。<br>另一个移动到某行的方法是在命令”%”之前指定一个命令计数比如”50%”将会把光标定位在文件的中间. “90%”跳到接近文件尾的地方。<br>命令”H”,”M”,”L”,分别将光标跳转到第一行，中间行，结尾行部分。</p><h3 id="15-告诉你当前的位置"><a href="/2016/09/11/vimml/#15-告诉你当前的位置" class="headerlink" title="15.告诉你当前的位置"></a>15.告诉你当前的位置</h3><p>使用CTRL-G命令。”set number”在每行的前面显示一个行号。相反关闭行号用命令”:set nonumber”。”:set ruler”在Vim窗口的右下角显示当前光标位置。</p><h3 id="16-滚屏"><a href="/2016/09/11/vimml/#16-滚屏" class="headerlink" title="16.滚屏"></a>16.滚屏</h3><p>CTRL-U显示文本的窗口向上滚动了半屏。CTRL-D命令将窗口向下移动半屏。一次滚动一行可以使用CTRL-E(向上滚动)和CTRL-Y(向下滚动)。要向前滚动一整屏使用命令CTRL-F。另外CTRL-B是它的反向版。”zz”命令会把当前行置为屏幕正中央，”zt”命令会把当前行置于屏幕顶端，”zb”则把当前行置于屏幕底端.</p><h3 id="17-简单搜索"><a href="/2016/09/11/vimml/#17-简单搜索" class="headerlink" title="17.简单搜索"></a>17.简单搜索</h3><p>“/string”命令可用于搜索一个字符串。要查找上次查找的字符串的下一个位置,使用”n”命令。如果你知道你要找的确切位置是目标字符串的第几次出现，还可以在”n”之前放置一个命令计数。”3n”会去查找目标字符串的第3次出现。<br>“?”命令与”/“的工作相同，只是搜索方向相反.”N”命令会重复前一次查找，但是与最初用”/“或”?”指定的搜索方向相反。<br>如果查找内容忽略大小写，则用命令”set ignorecase”, 返回精确匹配用命令”set noignorecase” 。</p><h3 id="18-在文本中查找下一个word"><a href="/2016/09/11/vimml/#18-在文本中查找下一个word" class="headerlink" title="18.在文本中查找下一个word"></a>18.在文本中查找下一个word</h3><p>把光标定位于这个word上然后按下””键。Vim将会取当前光标所在的word并将它作用目标字符串进行搜索。”#”命令是””的反向版。还可以在这两个命令前加一个命令计数:”3*”查找当前光标下的word的第三次出现。</p><h3 id="19-查找整个word"><a href="/2016/09/11/vimml/#19-查找整个word" class="headerlink" title="19.查找整个word"></a>19.查找整个word</h3><p>如果你用”/the”来查找Vim也会匹配到”there”。要查找作为独立单词的”the”使用如下命令：”/the&gt;”。”&gt;”是一个特殊的记法，它只匹配一个word的结束处。近似地，”&lt;”匹配到一个word的开始处。这样查找作为一个word的”the”就可以用:”/“。</p><h3 id="20-高亮显示搜索结果"><a href="/2016/09/11/vimml/#20-高亮显示搜索结果" class="headerlink" title="20.高亮显示搜索结果"></a>20.高亮显示搜索结果</h3><p>开启这一功能用”:set hlsearch”，关闭这一功能：”:set nohlsearch”。如果只是想去掉当前的高亮显示，可以使用下面的命令：”:nohlsearch”(可以简写为noh)。</p><h3 id="21-匹配一行的开头与结尾"><a href="/2016/09/11/vimml/#21-匹配一行的开头与结尾" class="headerlink" title="21.匹配一行的开头与结尾"></a>21.匹配一行的开头与结尾</h3><p>^ 字符匹配一行的开头。$字符匹配一行的末尾。<br>所以”/was$”只匹配位于一行末尾的单词was，所以”/^was”只匹配位于一行开始的单词was。</p><h3 id="22-匹配任何的单字符"><a href="/2016/09/11/vimml/#22-匹配任何的单字符" class="headerlink" title="22.匹配任何的单字符"></a>22.匹配任何的单字符</h3><p>.这个字符可以匹配到任何字符。比如”c.m”可以匹配任何前一个字符是c，后一个字符是m的情况，不管中间的字符是什么。</p><h3 id="23-匹配特殊字符"><a href="/2016/09/11/vimml/#23-匹配特殊字符" class="headerlink" title="23.匹配特殊字符"></a>23.匹配特殊字符</h3><p>放一个反斜杠在特殊字符前面。如果你查找”ter。”，用命令”/ter。”</p><h3 id="24-使用标记"><a href="/2016/09/11/vimml/#24-使用标记" class="headerlink" title="24.使用标记"></a>24.使用标记</h3><p>当你用”G”命令从一个地方跳转到另一个地方时，Vim会记得你起跳的位置。这个位置在Vim中是一个标记。使用命令” <code>&quot;可以使你跳回到刚才的出发点。</code>命令可以在两点之间来回跳转。CTRL-O命令是跳转到你更早些时间停置光标的位置(提示:O意为older). CTRL-I则是跳回到后来停置光标的更新的位置(提示：I在键盘上位于O前面)。<br>注:使用CTRL-I 与按下键一样。</p><h3 id="25-具名标记"><a href="/2016/09/11/vimml/#25-具名标记" class="headerlink" title="25.具名标记"></a>25.具名标记</h3><p>命令”ma”将当前光标下的位置名之为标记”a”。从a到z一共可以使用26个自定义的标记。要跳转到一个你定义过的标记，使用命令” marks “marks就是定义的标记的名字。命令” ‘a “使你跳转到a所在行的行首，” a “会精确定位a所在的位置。命令：”:marks”用来查看标记的列表。<br>命令delm！删除所有标记。</p><h3 id="26-操作符命令和位移"><a href="/2016/09/11/vimml/#26-操作符命令和位移" class="headerlink" title="26.操作符命令和位移"></a>26.操作符命令和位移</h3><p>“dw”命令可以删除一个word，”d4w”命令是删除4个word，依此类推。类似有”d2e”、”d$”。此类命令有一个固定的模式：操作符命令+位移命令。首先键入一个操作符命令。比如”d”是一个删除操作符。接下来是一个位移命。比如”w”。这样任何移动光标命令所及之处，都是命令的作用范围。</p><h3 id="27-改变文本"><a href="/2016/09/11/vimml/#27-改变文本" class="headerlink" title="27.改变文本"></a>27.改变文本</h3><p>操作符命令是”c”，改变命令。它的行为与”d”命令类似，不过在命令执行后会进入Insert模式。比如”cw”改变一个word。或者，更准确地说，它删除一个word并让你置身于Insert模式。<br>“cc”命令可以改变整行。不过仍保持原来的缩进。<br>“c$”改变当前光标到行尾的内容。<br>快捷命令：x 代表dl(删除当前光标下的字符)<br>X 代表dh(删除当前光标左边的字符)<br>D 代表d$(删除到行尾的内容)<br>C 代表c$(修改到行尾的内容)<br>s 代表cl(修改一个字符)<br>S 代表cc(修改一整行)<br>命令”3dw”和”d3w”都是删除3个word。第一个命令”3dw”可以看作是删除一个word的操作执行3次；第二个命令”d3w”是一次删除3个word。这是其中不明显的差异。事实上你可以在两处都放上命令记数，比如，”3d2w”是删除两个word，重复执行3次，总共是6个word。</p><h3 id="28-替换单个字符"><a href="/2016/09/11/vimml/#28-替换单个字符" class="headerlink" title="28.替换单个字符"></a>28.替换单个字符</h3><p>“r”命令不是一个操作符命令。它等待你键入下一个字符用以替换当前光标下的那个字符。”r”命令前辍以一个命令记数是将多个字符都替换为即将输入的那个字符。要把一个字符替换为一个换行符使用”r”。它会删除一个字符并插入一个换行符。在此处使用命令记数只会删除指定个数的字符：”4r”将把4个字符替换为一个换行符。</p><h3 id="29-重复改动"><a href="/2016/09/11/vimml/#29-重复改动" class="headerlink" title="29.重复改动"></a>29.重复改动</h3><p>“.”命令会重复上一次做出的改动。”.”命令会重复你做出的所有修改，除了”u”命令CTRL-R和以冒号开头的命令。”.”需要在Normal模式下执行，它重复的是命令，而不是被改动的内容，</p><h3 id="30-Visual模式"><a href="/2016/09/11/vimml/#30-Visual模式" class="headerlink" title="30.Visual模式"></a>30.Visual模式</h3><p>按”v”可以进入Visual模式。移动光标以覆盖你想操纵的文本范围。同时被选中的文本会以高亮显示。最后键入操作符命令。</p><h3 id="31-移动文本"><a href="/2016/09/11/vimml/#31-移动文本" class="headerlink" title="31.移动文本"></a>31.移动文本</h3><p>以”d”或”x”这样的命令删除文本时，被删除的内容还是被保存了起来。你还可以用p命令把它取回来。”P”命令是把被去回的内容放在光标之前，”p”则是放在光标之后。对于以”dd”删除的整行内容，”P”会把它置于当前行的上一行。”p”则是至于当前行的后一行。也可以对命令”p”和”P”命令使用命令记数。它的效果是同样的内容被取回指定的次数。这样一来”dd”之后的”3p”就可以把被删除行的3 份副本放到当前位置。<br>命令”xp”将光标所在的字符与后一个字符交换。</p><h3 id="32-复制文本（VIM编辑器内复制）"><a href="/2016/09/11/vimml/#32-复制文本（VIM编辑器内复制）" class="headerlink" title="32.复制文本（VIM编辑器内复制）"></a>32.复制文本（VIM编辑器内复制）</h3><p>“y”操作符命令会把文本复制到一个寄存器3中。然后可以用”p”命令把它取回。因为”y”是一个操作符命令，所以你可以用”yw”来复制一个word. 同样可以使用命令记数。如下例中用”y2w”命令复制两个word，”yy”命令复制一整行，”Y”也是复制整行的内容，复制当前光标至行尾的命令是”y$”。</p><h3 id="33-文本对象"><a href="/2016/09/11/vimml/#33-文本对象" class="headerlink" title="33.文本对象"></a>33.文本对象</h3><p>“diw” 删除当前光标所在的word(不包括空白字符) “daw” 删除当前光标所在的word(包括空白字符)</p><h3 id="34-快捷命令"><a href="/2016/09/11/vimml/#34-快捷命令" class="headerlink" title="34.快捷命令"></a>34.快捷命令</h3><p>x 删除当前光标下的字符(“dl”的快捷命令)<br>X 删除当前光标之前的字符(“dh”的快捷命令)<br>D 删除自当前光标至行尾的内容(“d$”的快捷命令)<br>dw 删除自当前光标至下一个word的开头<br>db 删除自当前光标至前一个word的开始<br>diw 删除当前光标所在的word(不包括空白字符)<br>daw 删除当前光标所在的word(包括空白字符)<br>dG 删除当前行至文件尾的内容<br>dgg 删除当前行至文件头的内容<br>如果你用”c”命令代替”d”这些命令就都变成更改命令。使用”y”就是yank命令，如此类推。</p><h3 id="35-编辑另一个文件"><a href="/2016/09/11/vimml/#35-编辑另一个文件" class="headerlink" title="35.编辑另一个文件"></a>35.编辑另一个文件</h3><p>用命令”:edit foo.txt”，也可简写为”:e foo.txt”。</p><h3 id="36-文件列表"><a href="/2016/09/11/vimml/#36-文件列表" class="headerlink" title="36.文件列表"></a>36.文件列表</h3><p>可以在启动Vim时就指定要编辑多个文件，用命令”vim one.c two.c three.c”。Vim将在启动后只显示第一个文件，完成该文件的编辑后，可以用令：”:next”或”:n”要保存工作成果并继续下一个文件的编辑，命令：”:wnext”或”:wn”可以合并这一过程。</p><h3 id="37-显示当前正在编辑的文件"><a href="/2016/09/11/vimml/#37-显示当前正在编辑的文件" class="headerlink" title="37.显示当前正在编辑的文件"></a>37.显示当前正在编辑的文件</h3><p>用命令”:args”。</p><h3 id="38-移动到另一个文件"><a href="/2016/09/11/vimml/#38-移动到另一个文件" class="headerlink" title="38.移动到另一个文件"></a>38.移动到另一个文件</h3><p>用命令”:previous” “:prev”回到上一个文件,合并保存步骤则是”:wprevious” “:wprev”。要移到最后一个文件”:last”,到第一个”:first”.不过没有”:wlast”或者”:wfirst”这样的命令。可以在”:next”和”:previous”命令前面使用一个命令计数。</p><h3 id="39-编辑另一个文件列表"><a href="/2016/09/11/vimml/#39-编辑另一个文件列表" class="headerlink" title="39.编辑另一个文件列表"></a>39.编辑另一个文件列表</h3><p>不用重新启动Vim，就可以重新定义一个文件列表。命令”:args five.c six.c seven.h”定义了要编辑的三个文件。</p><h3 id="39-自动存盘"><a href="/2016/09/11/vimml/#39-自动存盘" class="headerlink" title="39.自动存盘"></a>39.自动存盘</h3><p>命令”:set autowrite”,”set aw”。自动把内容写回文件: 如果文件被修改过，在每个:next、:rewind、:last、:first、:previous、:stop、:suspend、:tag、:!、:make、CTRL-] 和 CTRL-^命令时进行。<br>命令”:set autowriteall”,”set awa”。和 ‘autowrite’ 类似，但也适用于”:edit”、”:enew”、”:quit”、”:qall”、”:exit”、”:xit”、”:recover” 和关闭 Vim 窗口。置位本选项也意味着 Vim 的行为就像打开 ‘autowrite’ 一样。</p><h3 id="40-切换到另一文件"><a href="/2016/09/11/vimml/#40-切换到另一文件" class="headerlink" title="40.切换到另一文件"></a>40.切换到另一文件</h3><p>要在两个文件间快速切换，使用CTRL-^。</p><h3 id="41-文件标记"><a href="/2016/09/11/vimml/#41-文件标记" class="headerlink" title="41.文件标记"></a>41.文件标记</h3><p>以大写字母命名的标记。它们是全局标记，它们可以用在任何文件中。比如，正在编辑”fab1.Java”,用命令”50%mF”在文件的中间设置一个名为F的标记。然后在”fab2.java”文件中，用命令”GnB”在最后一行设置名为B的标记。在可以用”F”命令跳转到文件”fab1.java”的半中间。或者编辑另一个文件，”‘B”命令会再把你带回文件”fab2.java”的最后一行。<br>要知道某个标记所代表的位置是什么，可以将该标记的名字作为”marks”命令的参数”:marks M”或者连续跟上几个参数”:marks MJK”<br>可以用CTRL-O和CTRL-I可以跳转到较早的位置和靠后的某位置。</p><h3 id="42-查看文件"><a href="/2016/09/11/vimml/#42-查看文件" class="headerlink" title="42.查看文件"></a>42.查看文件</h3><p>仅是查看文件，不向文件写入内容，可以用只读形式编辑文件。用命令：<br>vim -R file。如果是想强制性地避免对文件进行修改，可以用命令：<br>vim -M file。</p><h3 id="43-更改文件名"><a href="/2016/09/11/vimml/#43-更改文件名" class="headerlink" title="43.更改文件名"></a>43.更改文件名</h3><p>将现有文件存成新的文件，用命令”:sav(eas) move.c”。如果想改变当前正在编辑的文件名，但不想保存该文件，就可以用命令：”:f(ile) move.c”。</p><h3 id="44-分割一个窗口"><a href="/2016/09/11/vimml/#44-分割一个窗口" class="headerlink" title="44.分割一个窗口"></a>44.分割一个窗口</h3><p>打开一个新窗口最简单的办法就是使用命令：”:split”。CTRL-W 命令可以切换当前活动窗口。</p><h3 id="45-关闭窗口"><a href="/2016/09/11/vimml/#45-关闭窗口" class="headerlink" title="45.关闭窗口"></a>45.关闭窗口</h3><p>用命令：”close”.可以关闭当前窗口。实际上,任何退出文件编辑的命令”:quit”和”ZZ”都会关闭窗口，但是用”:close”可以阻止你关闭最后一个Vim，以免以意外地整个关闭了Vim。</p><h3 id="46-关闭除当前窗口外的所有其他窗口"><a href="/2016/09/11/vimml/#46-关闭除当前窗口外的所有其他窗口" class="headerlink" title="46.关闭除当前窗口外的所有其他窗口"></a>46.关闭除当前窗口外的所有其他窗口</h3><p>用命令：”:only”,关闭除当前窗口外的所有其它窗口。如果这些窗口中有被修改过的，你会得到一个错误信息，同时那个窗口会被留下来。</p><h3 id="47-为另一个文件分隔出一个窗口"><a href="/2016/09/11/vimml/#47-为另一个文件分隔出一个窗口" class="headerlink" title="47.为另一个文件分隔出一个窗口"></a>47.为另一个文件分隔出一个窗口</h3><p>命令”:split two.c”可以打开第二个窗口同时在新打开的窗口中开始编辑作为<br>参数的文件。如果要打开一个新窗口并开始编辑一个空的缓冲区，使用命令:”:new”。</p><h3 id="48-垂直分割"><a href="/2016/09/11/vimml/#48-垂直分割" class="headerlink" title="48.垂直分割"></a>48.垂直分割</h3><p>用命令”:vsplit或：:vsplit two.c”。同样有一个对应的”:vnew”命令，用于垂直分隔窗口并在其中打开一个新的空缓冲区。</p><h3 id="49-切换窗口"><a href="/2016/09/11/vimml/#49-切换窗口" class="headerlink" title="49.切换窗口"></a>49.切换窗口</h3><p>CTRL-W h 到左边的窗口<br>CTRL-W j 到下面的窗口<br>CTRL-W k 到上面的窗口<br>CTRL-W l 到右边的窗口<br>CTRL-W t 到顶部窗口<br>CTRL-W b 到底部窗口</p><h3 id="50-针对所有窗口操作的命令"><a href="/2016/09/11/vimml/#50-针对所有窗口操作的命令" class="headerlink" title="50.针对所有窗口操作的命令"></a>50.针对所有窗口操作的命令</h3><p>“:qall”放弃所有操作并退出，”:wall”保存所有，”:wqall”保存所有并退出。</p><h3 id="51-为每一个文件打开一个窗口"><a href="/2016/09/11/vimml/#51-为每一个文件打开一个窗口" class="headerlink" title="51.为每一个文件打开一个窗口"></a>51.为每一个文件打开一个窗口</h3><p>使用”-o”选项可以让Vim为每一个文件打开一个窗口：<br>“vim -o one.txt two.txt three.txt”。</p><h3 id="52-使用vimdiff查看不同"><a href="/2016/09/11/vimml/#52-使用vimdiff查看不同" class="headerlink" title="52.使用vimdiff查看不同"></a>52.使用vimdiff查看不同</h3><p>“vimdiff main.c~ main.c”,另一种进入diff模式的办法可以在Vim运行中操作。编辑文件”main.c”，然后打开另一个分隔窗口显示其不同:<br>“:edit main.c”<br>“:vertical diffpatch main.c.diff”。</p><h3 id="53-页签"><a href="/2016/09/11/vimml/#53-页签" class="headerlink" title="53.页签"></a>53.页签</h3><p>命令”:tabe(dit) thatfile”在一个窗口中打开”thatfile”，该窗口占据着整个的Vim显示区域。命令”:tab split/new”结果是新建了一个拥有一个窗口的页签。以用”gt”命令在不同的页签间切换。<br>这是我总结的一些基本用法,可能对初用者会有帮助,独乐乐不如众乐乐,是吧!<br>说明：以下黑色为vi和vim均有的一般功能，而红色为Vim（Vi Improved）所特有功能。Vim一般的Unix和Linux下均有安装。</p><h2 id="三种状态"><a href="/2016/09/11/vimml/#三种状态" class="headerlink" title="三种状态"></a>三种状态</h2><p>Command： 任何输入都会作为编辑命令，而不会出现在屏幕上，任何输入都引起立即反映<br>Insert： 任何输入的数据都置于编辑寄存器，按ESC，可跳回command方式<br>Escape： 以“：”或者“/”为前导的指令，出现在屏幕的最下一行，任何输入都被当成特别指令。</p><h2 id="离开vi"><a href="/2016/09/11/vimml/#离开vi" class="headerlink" title="离开vi"></a>离开vi</h2><p>:q! 离开vi，并放弃刚在缓冲区内编辑的内容。<br>:wq 将缓冲区内的资料写入磁盘中，并离开vi。</p>]]></content>
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
